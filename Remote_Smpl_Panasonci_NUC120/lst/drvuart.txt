; generated by ARM C/C++ Compiler, 5.02 [Build 28]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\drvuart.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\drvuart.d --cpu=Cortex-M0 --apcs=interwork -O0 -Otime -I.\ -I..\..\..\..\CMSIS\CM0\CoreSupport -I..\..\..\..\CMSIS\CM0\DeviceSupport\Nuvoton\NUC1xx -I..\..\..\Include -I..\..\..\Include\Driver -Id:\Keil\ARM\RV31\INC -Id:\Keil\ARM\CMSIS\Include -Id:\Keil\ARM\Inc\Nuvoton\NUC1xx -DUSE_STDPERIPH_DRIVER --omf_browse=.\obj\drvuart.crf ..\..\..\Src\Driver\DrvUART.c]
                          THUMB

                          AREA ||i.BaudRateCalculator||, CODE, READONLY, ALIGN=2

                  BaudRateCalculator PROC
;;;92     
;;;93     static void BaudRateCalculator(uint32_t clk, uint32_t baudRate, E_UART_PORT u32Port)
000000  b5f7              PUSH     {r0-r2,r4-r7,lr}
;;;94     {
000002  b082              SUB      sp,sp,#8
000004  4617              MOV      r7,r2
;;;95       	int32_t tmp;
;;;96     	int32_t div;
;;;97       
;;;98       	UART_T * tUART;
;;;99     	tUART = (UART_T *)((uint32_t)UART0 + u32Port);  
000006  4831              LDR      r0,|L1.204|
000008  183c              ADDS     r4,r7,r0
;;;100    
;;;101    	if(((clk / baudRate)%16)<3)	      /* Source Clock mod 16 <3 => Using Divider X =16 (MODE#0) */ 
00000a  9903              LDR      r1,[sp,#0xc]
00000c  9802              LDR      r0,[sp,#8]
00000e  f7fffffe          BL       __aeabi_uidivmod
000012  0700              LSLS     r0,r0,#28
000014  0f00              LSRS     r0,r0,#28
000016  2803              CMP      r0,#3
000018  d20f              BCS      |L1.58|
;;;102    	{								  
;;;103    		tUART->BAUD.DIV_X_EN = 0;
00001a  6a60              LDR      r0,[r4,#0x24]
00001c  2101              MOVS     r1,#1
00001e  0749              LSLS     r1,r1,#29
000020  4388              BICS     r0,r0,r1
000022  6260              STR      r0,[r4,#0x24]
;;;104    	    tUART->BAUD.DIV_X_ONE   = 0;
000024  6a60              LDR      r0,[r4,#0x24]
000026  1049              ASRS     r1,r1,#1
000028  4388              BICS     r0,r0,r1
00002a  6260              STR      r0,[r4,#0x24]
;;;105    		tmp = clk / baudRate/16  -2;
00002c  9903              LDR      r1,[sp,#0xc]
00002e  9802              LDR      r0,[sp,#8]
000030  f7fffffe          BL       __aeabi_uidivmod
000034  0900              LSRS     r0,r0,#4
000036  1e86              SUBS     r6,r0,#2
000038  e040              B        |L1.188|
                  |L1.58|
;;;106    	}
;;;107    	else							  /* Source Clock mod 16 >3 => Up 5% Error BaudRate */
;;;108    	{
;;;109    	    tUART->BAUD.DIV_X_EN = 1;			  /* Try to Set Divider X = 1 (MODE#2)*/
00003a  6a60              LDR      r0,[r4,#0x24]
00003c  2101              MOVS     r1,#1
00003e  0749              LSLS     r1,r1,#29
000040  4388              BICS     r0,r0,r1
000042  1840              ADDS     r0,r0,r1
000044  6260              STR      r0,[r4,#0x24]
;;;110    	    tUART->BAUD.DIV_X_ONE   = 1;
000046  6a60              LDR      r0,[r4,#0x24]
000048  1049              ASRS     r1,r1,#1
00004a  4388              BICS     r0,r0,r1
00004c  1840              ADDS     r0,r0,r1
00004e  6260              STR      r0,[r4,#0x24]
;;;111    		tmp = clk / baudRate  -2;
000050  9903              LDR      r1,[sp,#0xc]
000052  9802              LDR      r0,[sp,#8]
000054  f7fffffe          BL       __aeabi_uidivmod
000058  1e86              SUBS     r6,r0,#2
;;;112    
;;;113    		if(tmp > 0xFFFF)			  /* If Divider > Range  */
00005a  481d              LDR      r0,|L1.208|
00005c  4286              CMP      r6,r0
00005e  dd2d              BLE      |L1.188|
;;;114    		{
;;;115    			tUART->BAUD.DIV_X_EN = 1;		  /* Try to Set Divider X up 10 (MODE#1) */
000060  6a60              LDR      r0,[r4,#0x24]
000062  2101              MOVS     r1,#1
000064  0749              LSLS     r1,r1,#29
000066  4388              BICS     r0,r0,r1
000068  1840              ADDS     r0,r0,r1
00006a  6260              STR      r0,[r4,#0x24]
;;;116    			tUART->BAUD.DIV_X_ONE   = 0;
00006c  6a60              LDR      r0,[r4,#0x24]
00006e  1049              ASRS     r1,r1,#1
000070  4388              BICS     r0,r0,r1
000072  6260              STR      r0,[r4,#0x24]
;;;117    
;;;118    			for(div = 8; div <16;div++)
000074  2508              MOVS     r5,#8
000076  e01e              B        |L1.182|
                  |L1.120|
;;;119    			{
;;;120    				if(((clk / baudRate)%(div+1))<3)
000078  9903              LDR      r1,[sp,#0xc]
00007a  9802              LDR      r0,[sp,#8]
00007c  f7fffffe          BL       __aeabi_uidivmod
000080  1c69              ADDS     r1,r5,#1
000082  9001              STR      r0,[sp,#4]
000084  f7fffffe          BL       __aeabi_uidivmod
000088  2903              CMP      r1,#3
00008a  d213              BCS      |L1.180|
;;;121    				{
;;;122    					tUART->BAUD.DIVIDER_X   = div;
00008c  6a60              LDR      r0,[r4,#0x24]
00008e  210f              MOVS     r1,#0xf
000090  0609              LSLS     r1,r1,#24
000092  4388              BICS     r0,r0,r1
000094  0629              LSLS     r1,r5,#24
000096  220f              MOVS     r2,#0xf
000098  0612              LSLS     r2,r2,#24
00009a  4011              ANDS     r1,r1,r2
00009c  4308              ORRS     r0,r0,r1
00009e  6260              STR      r0,[r4,#0x24]
;;;123    					tmp = clk / baudRate / (div+1) -2;
0000a0  9903              LDR      r1,[sp,#0xc]
0000a2  9802              LDR      r0,[sp,#8]
0000a4  f7fffffe          BL       __aeabi_uidivmod
0000a8  1c69              ADDS     r1,r5,#1
0000aa  9001              STR      r0,[sp,#4]
0000ac  f7fffffe          BL       __aeabi_uidivmod
0000b0  1e86              SUBS     r6,r0,#2
;;;124    					break;
0000b2  e002              B        |L1.186|
                  |L1.180|
0000b4  1c6d              ADDS     r5,r5,#1              ;118
                  |L1.182|
0000b6  2d10              CMP      r5,#0x10              ;118
0000b8  dbde              BLT      |L1.120|
                  |L1.186|
0000ba  bf00              NOP      
                  |L1.188|
;;;125    				}
;;;126    			}
;;;127    		}
;;;128    	}
;;;129    
;;;130    	tUART->BAUD.BRD = tmp; 
0000bc  6a60              LDR      r0,[r4,#0x24]
0000be  0c00              LSRS     r0,r0,#16
0000c0  0400              LSLS     r0,r0,#16
0000c2  b2b1              UXTH     r1,r6
0000c4  4308              ORRS     r0,r0,r1
0000c6  6260              STR      r0,[r4,#0x24]
;;;131    
;;;132    }
0000c8  b005              ADD      sp,sp,#0x14
0000ca  bdf0              POP      {r4-r7,pc}
;;;133    
                          ENDP

                  |L1.204|
                          DCD      0x40050000
                  |L1.208|
                          DCD      0x0000ffff

                          AREA ||i.DrvUART_ClearIntFlag||, CODE, READONLY, ALIGN=2

                  DrvUART_ClearIntFlag PROC
;;;532    /*---------------------------------------------------------------------------------------------------------*/
;;;533    uint32_t DrvUART_ClearIntFlag(E_UART_PORT u32Port,uint32_t u32InterruptFlag)
000000  b510              PUSH     {r4,lr}
;;;534    {
000002  4603              MOV      r3,r0
000004  460a              MOV      r2,r1
;;;535    	UART_T * tUART;
;;;536    
;;;537    	tUART = (UART_T *)((uint32_t)UART0 + u32Port); 
000006  4821              LDR      r0,|L2.140|
000008  1819              ADDS     r1,r3,r0
;;;538    
;;;539        if((u32InterruptFlag & DRVUART_RDAINT_FLAG) ||
00000a  1580              ASRS     r0,r0,#22
00000c  4202              TST      r2,r0
00000e  d105              BNE      |L2.28|
;;;540           (u32InterruptFlag & DRVUART_THREINT_FLAG)||
000010  0040              LSLS     r0,r0,#1
000012  4202              TST      r2,r0
000014  d102              BNE      |L2.28|
;;;541           (u32InterruptFlag & DRVUART_TOUTINT_FLAG))
000016  00c0              LSLS     r0,r0,#3
000018  4202              TST      r2,r0
00001a  d001              BEQ      |L2.32|
                  |L2.28|
;;;542            return E_DRVUART_ARGUMENT;
00001c  481c              LDR      r0,|L2.144|
                  |L2.30|
;;;543    
;;;544    	if(u32InterruptFlag & DRVUART_RLSINT)			        	/* clear Receive Line Status Interrupt */	   
;;;545    	{
;;;546    		tUART->FSR.BIF = 1;
;;;547    		tUART->FSR.FEF = 1;
;;;548    		tUART->FSR.PEF = 1;
;;;549    	}
;;;550    
;;;551    	if(u32InterruptFlag & DRVUART_MOSINT_FLAG)				    /* clear Modem Interrupt */	   
;;;552    		tUART->MSR.DCTSF = 1;
;;;553    
;;;554    
;;;555      	if(u32InterruptFlag & DRVUART_LININT_FLAG)      			/* clear LIN break Interrupt */	   
;;;556    		tUART->ISR.LIN_RX_BREAK_IF = 1;
;;;557    
;;;558    	if(u32InterruptFlag & DRVUART_BUFERRINT_FLAG)       		/* clear Buffer ErrorInterrupt */	   
;;;559    	{
;;;560    		tUART->FSR.TX_OVER_IF = 1;
;;;561    		tUART->FSR.RX_OVER_IF = 1;
;;;562    	}
;;;563    	return E_SUCCESS;
;;;564    }
00001e  bd10              POP      {r4,pc}
                  |L2.32|
000020  2004              MOVS     r0,#4                 ;544
000022  4202              TST      r2,r0                 ;544
000024  d00e              BEQ      |L2.68|
000026  6988              LDR      r0,[r1,#0x18]         ;546
000028  2440              MOVS     r4,#0x40              ;546
00002a  43a0              BICS     r0,r0,r4              ;546
00002c  3040              ADDS     r0,r0,#0x40           ;546
00002e  6188              STR      r0,[r1,#0x18]         ;546
000030  6988              LDR      r0,[r1,#0x18]         ;547
000032  2420              MOVS     r4,#0x20              ;547
000034  43a0              BICS     r0,r0,r4              ;547
000036  3020              ADDS     r0,r0,#0x20           ;547
000038  6188              STR      r0,[r1,#0x18]         ;547
00003a  6988              LDR      r0,[r1,#0x18]         ;548
00003c  2410              MOVS     r4,#0x10              ;548
00003e  43a0              BICS     r0,r0,r4              ;548
000040  3010              ADDS     r0,r0,#0x10           ;548
000042  6188              STR      r0,[r1,#0x18]         ;548
                  |L2.68|
000044  2001              MOVS     r0,#1                 ;551
000046  02c0              LSLS     r0,r0,#11             ;551
000048  4202              TST      r2,r0                 ;551
00004a  d004              BEQ      |L2.86|
00004c  6948              LDR      r0,[r1,#0x14]         ;552
00004e  0840              LSRS     r0,r0,#1              ;552
000050  0040              LSLS     r0,r0,#1              ;552
000052  1c40              ADDS     r0,r0,#1              ;552
000054  6148              STR      r0,[r1,#0x14]         ;552
                  |L2.86|
000056  2001              MOVS     r0,#1                 ;555
000058  03c0              LSLS     r0,r0,#15             ;555
00005a  4202              TST      r2,r0                 ;555
00005c  d004              BEQ      |L2.104|
00005e  69c8              LDR      r0,[r1,#0x1c]         ;556
000060  2480              MOVS     r4,#0x80              ;556
000062  43a0              BICS     r0,r0,r4              ;556
000064  3080              ADDS     r0,r0,#0x80           ;556
000066  61c8              STR      r0,[r1,#0x1c]         ;556
                  |L2.104|
000068  2001              MOVS     r0,#1                 ;558
00006a  0340              LSLS     r0,r0,#13             ;558
00006c  4202              TST      r2,r0                 ;558
00006e  d00a              BEQ      |L2.134|
000070  6988              LDR      r0,[r1,#0x18]         ;560
000072  2401              MOVS     r4,#1                 ;560
000074  0624              LSLS     r4,r4,#24             ;560
000076  43a0              BICS     r0,r0,r4              ;560
000078  1900              ADDS     r0,r0,r4              ;560
00007a  6188              STR      r0,[r1,#0x18]         ;560
00007c  6988              LDR      r0,[r1,#0x18]         ;561
00007e  0840              LSRS     r0,r0,#1              ;561
000080  0040              LSLS     r0,r0,#1              ;561
000082  1c40              ADDS     r0,r0,#1              ;561
000084  6188              STR      r0,[r1,#0x18]         ;561
                  |L2.134|
000086  2000              MOVS     r0,#0                 ;563
000088  e7c9              B        |L2.30|
;;;565    
                          ENDP

00008a  0000              DCW      0x0000
                  |L2.140|
                          DCD      0x40050000
                  |L2.144|
                          DCD      0xffff9807

                          AREA ||i.DrvUART_Close||, CODE, READONLY, ALIGN=2

                  DrvUART_Close PROC
;;;381    
;;;382    void DrvUART_Close(E_UART_PORT u32Port)
000000  b510              PUSH     {r4,lr}
;;;383    {
000002  4604              MOV      r4,r0
;;;384    	if(u32Port == UART_PORT1)	
000004  2001              MOVS     r0,#1
000006  0500              LSLS     r0,r0,#20
000008  4284              CMP      r4,r0
00000a  d113              BNE      |L3.52|
;;;385    	{
;;;386    		while(!UART1->FSR.TE_FLAG);
00000c  bf00              NOP      
                  |L3.14|
00000e  481f              LDR      r0,|L3.140|
000010  6980              LDR      r0,[r0,#0x18]
000012  00c0              LSLS     r0,r0,#3
000014  0fc0              LSRS     r0,r0,#31
000016  d0fa              BEQ      |L3.14|
;;;387    		SYSCLK->APBCLK.UART1_EN = 0;
000018  481d              LDR      r0,|L3.144|
00001a  6880              LDR      r0,[r0,#8]
00001c  2101              MOVS     r1,#1
00001e  0449              LSLS     r1,r1,#17
000020  4388              BICS     r0,r0,r1
000022  491b              LDR      r1,|L3.144|
000024  6088              STR      r0,[r1,#8]
;;;388    		g_pfnUART1callback = NULL;
000026  2000              MOVS     r0,#0
000028  491a              LDR      r1,|L3.148|
00002a  6008              STR      r0,[r1,#0]  ; g_pfnUART1callback
;;;389            NVIC_DisableIRQ (UART1_IRQn); 
00002c  200d              MOVS     r0,#0xd
00002e  f7fffffe          BL       NVIC_DisableIRQ
000032  e02a              B        |L3.138|
                  |L3.52|
;;;390    	}
;;;391    	else if(u32Port == UART_PORT2)	
000034  2041              MOVS     r0,#0x41
000036  0380              LSLS     r0,r0,#14
000038  4284              CMP      r4,r0
00003a  d113              BNE      |L3.100|
;;;392    	{
;;;393    		while(!UART2->FSR.TE_FLAG);
00003c  bf00              NOP      
                  |L3.62|
00003e  4816              LDR      r0,|L3.152|
000040  6980              LDR      r0,[r0,#0x18]
000042  00c0              LSLS     r0,r0,#3
000044  0fc0              LSRS     r0,r0,#31
000046  d0fa              BEQ      |L3.62|
;;;394    		SYSCLK->APBCLK.UART2_EN = 0;
000048  4811              LDR      r0,|L3.144|
00004a  6880              LDR      r0,[r0,#8]
00004c  2101              MOVS     r1,#1
00004e  0489              LSLS     r1,r1,#18
000050  4388              BICS     r0,r0,r1
000052  490f              LDR      r1,|L3.144|
000054  6088              STR      r0,[r1,#8]
;;;395    		g_pfnUART2callback = NULL;
000056  2000              MOVS     r0,#0
000058  4910              LDR      r1,|L3.156|
00005a  6008              STR      r0,[r1,#0]  ; g_pfnUART2callback
;;;396            NVIC_DisableIRQ (UART0_IRQn); 
00005c  200c              MOVS     r0,#0xc
00005e  f7fffffe          BL       NVIC_DisableIRQ
000062  e012              B        |L3.138|
                  |L3.100|
;;;397    	}
;;;398    	else
;;;399    	{
;;;400    		while(!UART0->FSR.TE_FLAG);
000064  bf00              NOP      
                  |L3.102|
000066  480e              LDR      r0,|L3.160|
000068  6980              LDR      r0,[r0,#0x18]
00006a  00c0              LSLS     r0,r0,#3
00006c  0fc0              LSRS     r0,r0,#31
00006e  d0fa              BEQ      |L3.102|
;;;401    		SYSCLK->APBCLK.UART0_EN = 0;
000070  4807              LDR      r0,|L3.144|
000072  6880              LDR      r0,[r0,#8]
000074  2101              MOVS     r1,#1
000076  0409              LSLS     r1,r1,#16
000078  4388              BICS     r0,r0,r1
00007a  4905              LDR      r1,|L3.144|
00007c  6088              STR      r0,[r1,#8]
;;;402    		g_pfnUART0callback = NULL;
00007e  2000              MOVS     r0,#0
000080  4908              LDR      r1,|L3.164|
000082  6008              STR      r0,[r1,#0]  ; g_pfnUART0callback
;;;403            NVIC_DisableIRQ(UART0_IRQn);      
000084  200c              MOVS     r0,#0xc
000086  f7fffffe          BL       NVIC_DisableIRQ
                  |L3.138|
;;;404    	}
;;;405    }
00008a  bd10              POP      {r4,pc}
;;;406    
                          ENDP

                  |L3.140|
                          DCD      0x40150000
                  |L3.144|
                          DCD      0x50000200
                  |L3.148|
                          DCD      g_pfnUART1callback
                  |L3.152|
                          DCD      0x40154000
                  |L3.156|
                          DCD      g_pfnUART2callback
                  |L3.160|
                          DCD      0x40050000
                  |L3.164|
                          DCD      g_pfnUART0callback

                          AREA ||i.DrvUART_DisableInt||, CODE, READONLY, ALIGN=2

                  DrvUART_DisableInt PROC
;;;478    /*---------------------------------------------------------------------------------------------------------*/
;;;479    void DrvUART_DisableInt(E_UART_PORT u32Port,uint32_t u32InterruptFlag)
000000  b570              PUSH     {r4-r6,lr}
;;;480    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;481    	if(u32Port == UART_PORT0)			   
000006  2c00              CMP      r4,#0
000008  d106              BNE      |L4.24|
;;;482    	{
;;;483    		outpw(&UART0->IER + u32Port,inpw(&UART0->IER + u32Port) &~u32InterruptFlag);	   /* Disable INT  */
00000a  4824              LDR      r0,|L4.156|
00000c  00a1              LSLS     r1,r4,#2
00000e  5840              LDR      r0,[r0,r1]
000010  43a8              BICS     r0,r0,r5
000012  4922              LDR      r1,|L4.156|
000014  00a2              LSLS     r2,r4,#2
000016  5088              STR      r0,[r1,r2]
                  |L4.24|
;;;484    	}
;;;485    	
;;;486    	if(u32InterruptFlag & DRVUART_TOUTINT)			  							 /* Disable Counter Enable */
000018  2010              MOVS     r0,#0x10
00001a  4205              TST      r5,r0
00001c  d01b              BEQ      |L4.86|
;;;487    	{
;;;488    		if(u32Port == UART_PORT0)
00001e  2c00              CMP      r4,#0
000020  d108              BNE      |L4.52|
;;;489    			UART0->IER.RTO_IEN = 0;
000022  481e              LDR      r0,|L4.156|
000024  1f00              SUBS     r0,r0,#4
000026  6840              LDR      r0,[r0,#4]
000028  2110              MOVS     r1,#0x10
00002a  4388              BICS     r0,r0,r1
00002c  491b              LDR      r1,|L4.156|
00002e  1f09              SUBS     r1,r1,#4
000030  6048              STR      r0,[r1,#4]
000032  e010              B        |L4.86|
                  |L4.52|
;;;490    		else if(u32Port == UART_PORT1)
000034  2001              MOVS     r0,#1
000036  0500              LSLS     r0,r0,#20
000038  4284              CMP      r4,r0
00003a  d106              BNE      |L4.74|
;;;491    			UART1->IER.RTO_IEN = 0;
00003c  4818              LDR      r0,|L4.160|
00003e  6840              LDR      r0,[r0,#4]
000040  2110              MOVS     r1,#0x10
000042  4388              BICS     r0,r0,r1
000044  4916              LDR      r1,|L4.160|
000046  6048              STR      r0,[r1,#4]
000048  e005              B        |L4.86|
                  |L4.74|
;;;492    		else
;;;493    			UART2->IER.RTO_IEN = 0;
00004a  4816              LDR      r0,|L4.164|
00004c  6840              LDR      r0,[r0,#4]
00004e  2110              MOVS     r1,#0x10
000050  4388              BICS     r0,r0,r1
000052  4914              LDR      r1,|L4.164|
000054  6048              STR      r0,[r1,#4]
                  |L4.86|
;;;494    			
;;;495    	}
;;;496    	
;;;497    	switch (u32Port)									   			 /* Disable Callback function and NVIC */
000056  2c00              CMP      r4,#0
000058  d008              BEQ      |L4.108|
00005a  2001              MOVS     r0,#1
00005c  0500              LSLS     r0,r0,#20
00005e  1a20              SUBS     r0,r4,r0
000060  d00b              BEQ      |L4.122|
000062  2101              MOVS     r1,#1
000064  0389              LSLS     r1,r1,#14
000066  1a40              SUBS     r0,r0,r1
000068  d115              BNE      |L4.150|
00006a  e00d              B        |L4.136|
                  |L4.108|
;;;498        {
;;;499            case UART_PORT0:
;;;500    			g_pfnUART0callback = NULL;
00006c  2000              MOVS     r0,#0
00006e  490e              LDR      r1,|L4.168|
000070  6008              STR      r0,[r1,#0]  ; g_pfnUART0callback
;;;501                NVIC_DisableIRQ(UART0_IRQn);   
000072  200c              MOVS     r0,#0xc
000074  f7fffffe          BL       NVIC_DisableIRQ
;;;502                break;
000078  e00e              B        |L4.152|
                  |L4.122|
;;;503    
;;;504            case UART_PORT1:
;;;505    			g_pfnUART1callback = NULL;
00007a  2000              MOVS     r0,#0
00007c  490b              LDR      r1,|L4.172|
00007e  6008              STR      r0,[r1,#0]  ; g_pfnUART1callback
;;;506               	NVIC_DisableIRQ(UART1_IRQn);    
000080  200d              MOVS     r0,#0xd
000082  f7fffffe          BL       NVIC_DisableIRQ
;;;507                break;
000086  e007              B        |L4.152|
                  |L4.136|
;;;508            
;;;509    		case UART_PORT2:
;;;510    			g_pfnUART2callback = NULL;
000088  2000              MOVS     r0,#0
00008a  4909              LDR      r1,|L4.176|
00008c  6008              STR      r0,[r1,#0]  ; g_pfnUART2callback
;;;511               	NVIC_DisableIRQ(UART0_IRQn);    
00008e  200c              MOVS     r0,#0xc
000090  f7fffffe          BL       NVIC_DisableIRQ
;;;512                break;
000094  e000              B        |L4.152|
                  |L4.150|
;;;513    
;;;514            default:
;;;515                break;
000096  bf00              NOP      
                  |L4.152|
000098  bf00              NOP                            ;502
;;;516        }
;;;517    
;;;518    }
00009a  bd70              POP      {r4-r6,pc}
;;;519    
                          ENDP

                  |L4.156|
                          DCD      0x40050004
                  |L4.160|
                          DCD      0x40150000
                  |L4.164|
                          DCD      0x40154000
                  |L4.168|
                          DCD      g_pfnUART0callback
                  |L4.172|
                          DCD      g_pfnUART1callback
                  |L4.176|
                          DCD      g_pfnUART2callback

                          AREA ||i.DrvUART_DisablePDMA||, CODE, READONLY, ALIGN=2

                  DrvUART_DisablePDMA PROC
;;;740    /*---------------------------------------------------------------------------------------------------------*/
;;;741    void DrvUART_DisablePDMA(E_UART_PORT u32Port)
000000  2800              CMP      r0,#0
;;;742    {
;;;743    	
;;;744    	if(u32Port == UART_PORT0)
000002  d10e              BNE      |L5.34|
;;;745    	{
;;;746    		UART0->IER.DMA_TX_EN 	= 0;
000004  490f              LDR      r1,|L5.68|
000006  6849              LDR      r1,[r1,#4]
000008  2201              MOVS     r2,#1
00000a  0392              LSLS     r2,r2,#14
00000c  4391              BICS     r1,r1,r2
00000e  4a0d              LDR      r2,|L5.68|
000010  6051              STR      r1,[r2,#4]
;;;747    		UART0->IER.DMA_RX_EN	= 0;	
000012  4611              MOV      r1,r2
000014  6849              LDR      r1,[r1,#4]
000016  2201              MOVS     r2,#1
000018  03d2              LSLS     r2,r2,#15
00001a  4391              BICS     r1,r1,r2
00001c  4a09              LDR      r2,|L5.68|
00001e  6051              STR      r1,[r2,#4]
000020  e00f              B        |L5.66|
                  |L5.34|
;;;748    	}
;;;749    	else if(u32Port == UART_PORT1)
000022  2101              MOVS     r1,#1
000024  0509              LSLS     r1,r1,#20
000026  4288              CMP      r0,r1
000028  d10b              BNE      |L5.66|
;;;750    	{
;;;751    		UART1->IER.DMA_TX_EN 	= 0;
00002a  4907              LDR      r1,|L5.72|
00002c  6849              LDR      r1,[r1,#4]
00002e  1182              ASRS     r2,r0,#6
000030  4391              BICS     r1,r1,r2
000032  4a05              LDR      r2,|L5.72|
000034  6051              STR      r1,[r2,#4]
;;;752    		UART1->IER.DMA_RX_EN	= 0;
000036  4611              MOV      r1,r2
000038  6849              LDR      r1,[r1,#4]
00003a  1142              ASRS     r2,r0,#5
00003c  4391              BICS     r1,r1,r2
00003e  4a02              LDR      r2,|L5.72|
000040  6051              STR      r1,[r2,#4]
                  |L5.66|
;;;753    	}
;;;754    
;;;755    }
000042  4770              BX       lr
;;;756    
                          ENDP

                  |L5.68|
                          DCD      0x40050000
                  |L5.72|
                          DCD      0x40150000

                          AREA ||i.DrvUART_EnableInt||, CODE, READONLY, ALIGN=2

                  DrvUART_EnableInt PROC
;;;423    void
;;;424    DrvUART_EnableInt(
000000  b5f8              PUSH     {r3-r7,lr}
;;;425    	E_UART_PORT   u32Port,
;;;426    	uint32_t  u32InterruptFlag,
;;;427    	PFN_DRVUART_CALLBACK pfncallback
;;;428    )
;;;429    {
000002  4606              MOV      r6,r0
000004  460d              MOV      r5,r1
000006  4617              MOV      r7,r2
;;;430    	UART_T * tUART;
;;;431        
;;;432    	tUART = (UART_T *)((uint32_t)UART0 + u32Port); 
000008  4839              LDR      r0,|L6.240|
00000a  1834              ADDS     r4,r6,r0
;;;433    
;;;434    	tUART->IER.RDA_IEN		=(u32InterruptFlag & DRVUART_RDAINT)?1:0 ;
00000c  6860              LDR      r0,[r4,#4]
00000e  0840              LSRS     r0,r0,#1
000010  0040              LSLS     r0,r0,#1
000012  07e9              LSLS     r1,r5,#31
000014  0fc9              LSRS     r1,r1,#31
000016  4308              ORRS     r0,r0,r1
000018  6060              STR      r0,[r4,#4]
;;;435    	tUART->IER.THRE_IEN		=(u32InterruptFlag & DRVUART_THREINT)?1:0;
00001a  6860              LDR      r0,[r4,#4]
00001c  2102              MOVS     r1,#2
00001e  4388              BICS     r0,r0,r1
000020  4029              ANDS     r1,r1,r5
000022  0849              LSRS     r1,r1,#1
000024  0049              LSLS     r1,r1,#1
000026  2202              MOVS     r2,#2
000028  4011              ANDS     r1,r1,r2
00002a  4308              ORRS     r0,r0,r1
00002c  6060              STR      r0,[r4,#4]
;;;436    	tUART->IER.RLS_IEN		=(u32InterruptFlag & DRVUART_RLSINT)?1:0;
00002e  6860              LDR      r0,[r4,#4]
000030  2104              MOVS     r1,#4
000032  4388              BICS     r0,r0,r1
000034  4029              ANDS     r1,r1,r5
000036  0889              LSRS     r1,r1,#2
000038  0089              LSLS     r1,r1,#2
00003a  2204              MOVS     r2,#4
00003c  4011              ANDS     r1,r1,r2
00003e  4308              ORRS     r0,r0,r1
000040  6060              STR      r0,[r4,#4]
;;;437    	tUART->IER.MODEM_IEN	=(u32InterruptFlag & DRVUART_MOSINT)?1:0;
000042  6860              LDR      r0,[r4,#4]
000044  2108              MOVS     r1,#8
000046  4388              BICS     r0,r0,r1
000048  4029              ANDS     r1,r1,r5
00004a  08c9              LSRS     r1,r1,#3
00004c  00c9              LSLS     r1,r1,#3
00004e  2208              MOVS     r2,#8
000050  4011              ANDS     r1,r1,r2
000052  4308              ORRS     r0,r0,r1
000054  6060              STR      r0,[r4,#4]
;;;438    		
;;;439    	tUART->IER.TIME_OUT_EN		=(u32InterruptFlag & DRVUART_TOUTINT)?1:0;   	/* Time-out count enable */
000056  6860              LDR      r0,[r4,#4]
000058  0211              LSLS     r1,r2,#8
00005a  4388              BICS     r0,r0,r1
00005c  2110              MOVS     r1,#0x10
00005e  4029              ANDS     r1,r1,r5
000060  0909              LSRS     r1,r1,#4
000062  02c9              LSLS     r1,r1,#11
000064  0212              LSLS     r2,r2,#8
000066  4011              ANDS     r1,r1,r2
000068  4308              ORRS     r0,r0,r1
00006a  6060              STR      r0,[r4,#4]
;;;440    	tUART->IER.RTO_IEN		=(u32InterruptFlag & DRVUART_TOUTINT)?1:0;		/* Time-out INT enable */
00006c  6860              LDR      r0,[r4,#4]
00006e  2110              MOVS     r1,#0x10
000070  4388              BICS     r0,r0,r1
000072  4029              ANDS     r1,r1,r5
000074  0909              LSRS     r1,r1,#4
000076  0109              LSLS     r1,r1,#4
000078  2210              MOVS     r2,#0x10
00007a  4011              ANDS     r1,r1,r2
00007c  4308              ORRS     r0,r0,r1
00007e  6060              STR      r0,[r4,#4]
;;;441    
;;;442    	tUART->IER.BUF_ERR_IEN	=(u32InterruptFlag & DRVUART_BUFERRINT)?1:0;
000080  6860              LDR      r0,[r4,#4]
000082  2120              MOVS     r1,#0x20
000084  4388              BICS     r0,r0,r1
000086  4029              ANDS     r1,r1,r5
000088  0949              LSRS     r1,r1,#5
00008a  0149              LSLS     r1,r1,#5
00008c  2220              MOVS     r2,#0x20
00008e  4011              ANDS     r1,r1,r2
000090  4308              ORRS     r0,r0,r1
000092  6060              STR      r0,[r4,#4]
;;;443    	tUART->IER.WAKE_EN		=(u32InterruptFlag & DRVUART_WAKEUPINT)?1:0;
000094  6860              LDR      r0,[r4,#4]
000096  2140              MOVS     r1,#0x40
000098  4388              BICS     r0,r0,r1
00009a  2180              MOVS     r1,#0x80
00009c  4029              ANDS     r1,r1,r5
00009e  09c9              LSRS     r1,r1,#7
0000a0  0189              LSLS     r1,r1,#6
0000a2  2240              MOVS     r2,#0x40
0000a4  4011              ANDS     r1,r1,r2
0000a6  4308              ORRS     r0,r0,r1
0000a8  6060              STR      r0,[r4,#4]
;;;444    	tUART->IER.LIN_RX_BRK_IEN=(u32InterruptFlag & DRVUART_LININT)?1:0;
0000aa  6860              LDR      r0,[r4,#4]
0000ac  0091              LSLS     r1,r2,#2
0000ae  4388              BICS     r0,r0,r1
0000b0  4029              ANDS     r1,r1,r5
0000b2  0a09              LSRS     r1,r1,#8
0000b4  0209              LSLS     r1,r1,#8
0000b6  0092              LSLS     r2,r2,#2
0000b8  4011              ANDS     r1,r1,r2
0000ba  4308              ORRS     r0,r0,r1
0000bc  6060              STR      r0,[r4,#4]
;;;445    
;;;446    
;;;447        if(u32Port == UART_PORT0)											   	/* Install Callback function */
0000be  2e00              CMP      r6,#0
0000c0  d105              BNE      |L6.206|
;;;448        {
;;;449    		g_pfnUART0callback = pfncallback;        
0000c2  480c              LDR      r0,|L6.244|
0000c4  6007              STR      r7,[r0,#0]  ; g_pfnUART0callback
;;;450    		NVIC_EnableIRQ(UART0_IRQn); 
0000c6  200c              MOVS     r0,#0xc
0000c8  f7fffffe          BL       NVIC_EnableIRQ
0000cc  e00e              B        |L6.236|
                  |L6.206|
;;;451        }
;;;452    	else if(u32Port == UART_PORT1)										   	/* Install Callback function */
0000ce  2001              MOVS     r0,#1
0000d0  0500              LSLS     r0,r0,#20
0000d2  4286              CMP      r6,r0
0000d4  d105              BNE      |L6.226|
;;;453    	{
;;;454    		g_pfnUART1callback = pfncallback;
0000d6  4808              LDR      r0,|L6.248|
0000d8  6007              STR      r7,[r0,#0]  ; g_pfnUART1callback
;;;455    		NVIC_EnableIRQ(UART1_IRQn); 
0000da  200d              MOVS     r0,#0xd
0000dc  f7fffffe          BL       NVIC_EnableIRQ
0000e0  e004              B        |L6.236|
                  |L6.226|
;;;456    	}
;;;457    	else															    	/* Install Callback function */
;;;458        {
;;;459    		g_pfnUART2callback = pfncallback;
0000e2  4806              LDR      r0,|L6.252|
0000e4  6007              STR      r7,[r0,#0]  ; g_pfnUART2callback
;;;460    		NVIC_EnableIRQ(UART0_IRQn); 
0000e6  200c              MOVS     r0,#0xc
0000e8  f7fffffe          BL       NVIC_EnableIRQ
                  |L6.236|
;;;461        }
;;;462    
;;;463    }
0000ec  bdf8              POP      {r3-r7,pc}
;;;464    
                          ENDP

0000ee  0000              DCW      0x0000
                  |L6.240|
                          DCD      0x40050000
                  |L6.244|
                          DCD      g_pfnUART0callback
                  |L6.248|
                          DCD      g_pfnUART1callback
                  |L6.252|
                          DCD      g_pfnUART2callback

                          AREA ||i.DrvUART_EnablePDMA||, CODE, READONLY, ALIGN=2

                  DrvUART_EnablePDMA PROC
;;;712    /*---------------------------------------------------------------------------------------------------------*/
;;;713    void DrvUART_EnablePDMA(E_UART_PORT u32Port)
000000  2800              CMP      r0,#0
;;;714    {
;;;715    	
;;;716    	if(u32Port == UART_PORT0)
000002  d110              BNE      |L7.38|
;;;717    	{
;;;718    		UART0->IER.DMA_TX_EN 	= 1;
000004  4911              LDR      r1,|L7.76|
000006  6849              LDR      r1,[r1,#4]
000008  2201              MOVS     r2,#1
00000a  0392              LSLS     r2,r2,#14
00000c  4391              BICS     r1,r1,r2
00000e  1889              ADDS     r1,r1,r2
000010  4a0e              LDR      r2,|L7.76|
000012  6051              STR      r1,[r2,#4]
;;;719    		UART0->IER.DMA_RX_EN	= 1;	
000014  4611              MOV      r1,r2
000016  6849              LDR      r1,[r1,#4]
000018  2201              MOVS     r2,#1
00001a  03d2              LSLS     r2,r2,#15
00001c  4391              BICS     r1,r1,r2
00001e  1889              ADDS     r1,r1,r2
000020  4a0a              LDR      r2,|L7.76|
000022  6051              STR      r1,[r2,#4]
000024  e011              B        |L7.74|
                  |L7.38|
;;;720    	}
;;;721    	else if(u32Port == UART_PORT1)
000026  2101              MOVS     r1,#1
000028  0509              LSLS     r1,r1,#20
00002a  4288              CMP      r0,r1
00002c  d10d              BNE      |L7.74|
;;;722    	{
;;;723    		UART1->IER.DMA_TX_EN 	= 1;
00002e  4908              LDR      r1,|L7.80|
000030  6849              LDR      r1,[r1,#4]
000032  1182              ASRS     r2,r0,#6
000034  4391              BICS     r1,r1,r2
000036  1889              ADDS     r1,r1,r2
000038  4a05              LDR      r2,|L7.80|
00003a  6051              STR      r1,[r2,#4]
;;;724    		UART1->IER.DMA_RX_EN	= 1;
00003c  4611              MOV      r1,r2
00003e  6849              LDR      r1,[r1,#4]
000040  1142              ASRS     r2,r0,#5
000042  4391              BICS     r1,r1,r2
000044  1889              ADDS     r1,r1,r2
000046  4a02              LDR      r2,|L7.80|
000048  6051              STR      r1,[r2,#4]
                  |L7.74|
;;;725    	}
;;;726    
;;;727    }
00004a  4770              BX       lr
;;;728    
                          ENDP

                  |L7.76|
                          DCD      0x40050000
                  |L7.80|
                          DCD      0x40150000

                          AREA ||i.DrvUART_GetCTSInfo||, CODE, READONLY, ALIGN=2

                  DrvUART_GetCTSInfo PROC
;;;609    /*---------------------------------------------------------------------------------------------------------*/
;;;610    void DrvUART_GetCTSInfo(E_UART_PORT u32Port,uint8_t *pu8CTSValue,	uint8_t	*pu8CTSChangeState)
000000  b510              PUSH     {r4,lr}
;;;611    {
;;;612    	UART_T * tUART;
;;;613    
;;;614    	tUART = (UART_T *)((uint32_t)UART0 + u32Port);  
000002  4c05              LDR      r4,|L8.24|
000004  1903              ADDS     r3,r0,r4
;;;615    
;;;616     	*pu8CTSValue 		= tUART->MSR.CTS_ST;
000006  695c              LDR      r4,[r3,#0x14]
000008  06e4              LSLS     r4,r4,#27
00000a  0fe4              LSRS     r4,r4,#31
00000c  700c              STRB     r4,[r1,#0]
;;;617    	*pu8CTSChangeState 	= tUART->MSR.DCTSF;
00000e  695c              LDR      r4,[r3,#0x14]
000010  07e4              LSLS     r4,r4,#31
000012  0fe4              LSRS     r4,r4,#31
000014  7014              STRB     r4,[r2,#0]
;;;618    }	
000016  bd10              POP      {r4,pc}
;;;619    
                          ENDP

                  |L8.24|
                          DCD      0x40050000

                          AREA ||i.DrvUART_GetIntStatus||, CODE, READONLY, ALIGN=2

                  DrvUART_GetIntStatus PROC
;;;583    /*---------------------------------------------------------------------------------------------------------*/
;;;584    int32_t DrvUART_GetIntStatus(E_UART_PORT u32Port,uint32_t u32InterruptFlag)
000000  4602              MOV      r2,r0
;;;585    {
;;;586    
;;;587    	UART_T * tUART;
;;;588    
;;;589    	tUART = (UART_T *)((uint32_t)UART0 + u32Port); 
000002  4803              LDR      r0,|L9.16|
000004  1813              ADDS     r3,r2,r0
;;;590       
;;;591        return (tUART->u32ISR & u32InterruptFlag)>>u32InterruptFlag ;
000006  69d8              LDR      r0,[r3,#0x1c]
000008  4008              ANDS     r0,r0,r1
00000a  40c8              LSRS     r0,r0,r1
;;;592    
;;;593    }
00000c  4770              BX       lr
;;;594    
                          ENDP

00000e  0000              DCW      0x0000
                  |L9.16|
                          DCD      0x40050000

                          AREA ||i.DrvUART_GetVersion||, CODE, READONLY, ALIGN=2

                  DrvUART_GetVersion PROC
;;;866    /*---------------------------------------------------------------------------------------------------------*/
;;;867    int32_t	DrvUART_GetVersion(void)
000000  4800              LDR      r0,|L10.4|
;;;868    {
;;;869    	return DRVUART_VERSION_NUM;
;;;870    	
;;;871    }
000002  4770              BX       lr
;;;872    
                          ENDP

                  |L10.4|
                          DCD      0x00010204

                          AREA ||i.DrvUART_Open||, CODE, READONLY, ALIGN=2

                  DrvUART_Open PROC
;;;233    /*---------------------------------------------------------------------------------------------------------*/
;;;234    int32_t DrvUART_Open(E_UART_PORT u32Port, STR_UART_T *sParam)
000000  b5f8              PUSH     {r3-r7,lr}
;;;235    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;236    
;;;237    	UART_T * tUART;
;;;238       
;;;239        /*-----------------------------------------------------------------------------------------------------*/
;;;240        /* Check UART port                                                                                     */
;;;241        /*-----------------------------------------------------------------------------------------------------*/
;;;242        if ((u32Port != UART_PORT0) &&
000006  2e00              CMP      r6,#0
000008  d009              BEQ      |L11.30|
;;;243            (u32Port != UART_PORT1) &&
00000a  2001              MOVS     r0,#1
00000c  0500              LSLS     r0,r0,#20
00000e  4286              CMP      r6,r0
000010  d005              BEQ      |L11.30|
;;;244    		(u32Port != UART_PORT2))
000012  2041              MOVS     r0,#0x41
000014  0380              LSLS     r0,r0,#14
000016  4286              CMP      r6,r0
000018  d001              BEQ      |L11.30|
;;;245        {
;;;246    
;;;247    		return E_DRVUART_ERR_PORT_INVALID;
00001a  488f              LDR      r0,|L11.600|
                  |L11.28|
;;;248        }
;;;249    
;;;250    
;;;251        /*-----------------------------------------------------------------------------------------------------*/
;;;252        /* Check the supplied parity                                                                           */
;;;253        /*-----------------------------------------------------------------------------------------------------*/
;;;254        if ((sParam->u8cParity != DRVUART_PARITY_NONE) &&
;;;255            (sParam->u8cParity != DRVUART_PARITY_EVEN) &&
;;;256            (sParam->u8cParity != DRVUART_PARITY_ODD)  &&
;;;257            (sParam->u8cParity != DRVUART_PARITY_MARK) &&
;;;258            (sParam->u8cParity != DRVUART_PARITY_SPACE))
;;;259        {
;;;260     		return E_DRVUART_ERR_PARITY_INVALID;		
;;;261        }
;;;262        /*-----------------------------------------------------------------------------------------------------*/
;;;263        /* Check the supplied number of data bits                                                              */
;;;264        /*-----------------------------------------------------------------------------------------------------*/
;;;265        else if ((sParam->u8cDataBits != DRVUART_DATABITS_5) &&
;;;266                 (sParam->u8cDataBits != DRVUART_DATABITS_6) &&
;;;267                 (sParam->u8cDataBits != DRVUART_DATABITS_7) &&
;;;268                 (sParam->u8cDataBits != DRVUART_DATABITS_8))
;;;269        {
;;;270     		return E_DRVUART_ERR_DATA_BITS_INVALID;	 
;;;271        }
;;;272        /*-----------------------------------------------------------------------------------------------------*/
;;;273        /* Check the supplied number of stop bits                                                              */
;;;274        /*-----------------------------------------------------------------------------------------------------*/
;;;275        else if ((sParam->u8cStopBits != DRVUART_STOPBITS_1) &&
;;;276                 (sParam->u8cStopBits != DRVUART_STOPBITS_2) &&
;;;277                 (sParam->u8cStopBits != DRVUART_STOPBITS_1_5)
;;;278                 )
;;;279        {
;;;280          	return E_DRVUART_ERR_STOP_BITS_INVALID;	 
;;;281        }
;;;282    
;;;283    
;;;284        /*-----------------------------------------------------------------------------------------------------*/
;;;285        /* Check the supplied nember of trigger level bytes                                                    */
;;;286        /*-----------------------------------------------------------------------------------------------------*/
;;;287        else if ((sParam->u8cRxTriggerLevel != DRVUART_FIFO_1BYTES) &&
;;;288                 (sParam->u8cRxTriggerLevel != DRVUART_FIFO_4BYTES) &&
;;;289                 (sParam->u8cRxTriggerLevel != DRVUART_FIFO_8BYTES) &&
;;;290                 (sParam->u8cRxTriggerLevel != DRVUART_FIFO_14BYTES)&&
;;;291                 (sParam->u8cRxTriggerLevel != DRVUART_FIFO_30BYTES)&&
;;;292                 (sParam->u8cRxTriggerLevel != DRVUART_FIFO_46BYTES)&&
;;;293                 (sParam->u8cRxTriggerLevel != DRVUART_FIFO_62BYTES))
;;;294        {
;;;295    		return E_DRVUART_ERR_TRIGGERLEVEL_INVALID;		 
;;;296        }				
;;;297    
;;;298    	if(u32Port == UART_PORT0)
;;;299    	{
;;;300    		/* Reset IP */
;;;301    		SYS->IPRSTC2.UART0_RST = 1;
;;;302    		SYS->IPRSTC2.UART0_RST = 0;
;;;303    		
;;;304    		/* Enable UART clock */
;;;305    	    SYSCLK->APBCLK.UART0_EN = 1;
;;;306    	}
;;;307    	else if(u32Port == UART_PORT1)
;;;308    	{
;;;309    		/* Reset IP */
;;;310    		SYS->IPRSTC2.UART1_RST = 1;
;;;311    		SYS->IPRSTC2.UART1_RST = 0;
;;;312    		
;;;313    		/* Enable UART clock */
;;;314    	    SYSCLK->APBCLK.UART1_EN = 1;
;;;315    	}
;;;316    	else
;;;317    	{
;;;318    		/* Reset IP */
;;;319    		SYS->IPRSTC2.UART2_RST = 1;
;;;320    		SYS->IPRSTC2.UART2_RST = 0;
;;;321    		
;;;322    		/* Enable UART clock */
;;;323    	    SYSCLK->APBCLK.UART2_EN = 1;
;;;324    	}
;;;325    	
;;;326    	tUART = (UART_T *)((uint32_t)UART0 + u32Port); 
;;;327    
;;;328    
;;;329    	/* Tx FIFO Reset & Rx FIFO Reset & FIFO Mode Enable */
;;;330      	tUART->FCR.TFR =1;
;;;331      	tUART->FCR.RFR =1;
;;;332    
;;;333    	/* Set Rx Trigger Level */
;;;334    	tUART->FCR.RFITL = sParam->u8cRxTriggerLevel;  
;;;335    	
;;;336    	/* Set Parity & Data bits & Stop bits */
;;;337    	tUART->LCR.SPE	=((sParam->u8cParity)&0x4)?1:0;
;;;338    	tUART->LCR.EPE	=((sParam->u8cParity)&0x2)?1:0;
;;;339    	tUART->LCR.PBE	=((sParam->u8cParity)&0x1)?1:0;
;;;340    		
;;;341    	tUART->LCR.WLS	=sParam->u8cDataBits;
;;;342    	tUART->LCR.NSB	=sParam->u8cStopBits;
;;;343    		
;;;344    	/* Set Time-Out */
;;;345    	tUART->TOR.TOIC	=sParam->u8TimeOut;
;;;346    
;;;347        /* Check Clock Source */
;;;348        if(SYSCLK->PWRCON.XTL12M_EN)
;;;349            SYSCLK->CLKSEL1.UART_S = 0;
;;;350        else
;;;351        {
;;;352            if(SYSCLK->PLLCON.PD==0)
;;;353                SYSCLK->CLKSEL1.UART_S = 1;
;;;354            else
;;;355                if(SYSCLK->PWRCON.OSC22M_EN)
;;;356                    SYSCLK->CLKSEL1.UART_S = 3;
;;;357                else
;;;358                    return E_DRVUART_ERR_OPEN;
;;;359        }
;;;360     
;;;361    	/* Set BaudRate */
;;;362        BaudRateCalculator(GetUartClk(), sParam->u32BaudRate, u32Port);
;;;363        
;;;364    
;;;365    	return E_SUCCESS;
;;;366    }
00001c  bdf8              POP      {r3-r7,pc}
                  |L11.30|
00001e  79a0              LDRB     r0,[r4,#6]            ;254
000020  2800              CMP      r0,#0                 ;254
000022  d00e              BEQ      |L11.66|
000024  79a0              LDRB     r0,[r4,#6]            ;255
000026  2803              CMP      r0,#3                 ;255
000028  d00b              BEQ      |L11.66|
00002a  79a0              LDRB     r0,[r4,#6]            ;256
00002c  2801              CMP      r0,#1                 ;256
00002e  d008              BEQ      |L11.66|
000030  79a0              LDRB     r0,[r4,#6]            ;257
000032  2805              CMP      r0,#5                 ;257
000034  d005              BEQ      |L11.66|
000036  79a0              LDRB     r0,[r4,#6]            ;258
000038  2807              CMP      r0,#7                 ;258
00003a  d002              BEQ      |L11.66|
00003c  4886              LDR      r0,|L11.600|
00003e  1c40              ADDS     r0,r0,#1              ;260
000040  e7ec              B        |L11.28|
                  |L11.66|
000042  7920              LDRB     r0,[r4,#4]            ;265
000044  2800              CMP      r0,#0                 ;265
000046  d00b              BEQ      |L11.96|
000048  7920              LDRB     r0,[r4,#4]            ;266
00004a  2801              CMP      r0,#1                 ;266
00004c  d008              BEQ      |L11.96|
00004e  7920              LDRB     r0,[r4,#4]            ;267
000050  2802              CMP      r0,#2                 ;267
000052  d005              BEQ      |L11.96|
000054  7920              LDRB     r0,[r4,#4]            ;268
000056  2803              CMP      r0,#3                 ;268
000058  d002              BEQ      |L11.96|
00005a  487f              LDR      r0,|L11.600|
00005c  1c80              ADDS     r0,r0,#2              ;270
00005e  e7dd              B        |L11.28|
                  |L11.96|
000060  7960              LDRB     r0,[r4,#5]            ;275
000062  2800              CMP      r0,#0                 ;275
000064  d008              BEQ      |L11.120|
000066  7960              LDRB     r0,[r4,#5]            ;276
000068  2801              CMP      r0,#1                 ;276
00006a  d005              BEQ      |L11.120|
00006c  7960              LDRB     r0,[r4,#5]            ;277
00006e  2801              CMP      r0,#1                 ;277
000070  d002              BEQ      |L11.120|
000072  4879              LDR      r0,|L11.600|
000074  1cc0              ADDS     r0,r0,#3              ;280
000076  e7d1              B        |L11.28|
                  |L11.120|
000078  79e0              LDRB     r0,[r4,#7]            ;287
00007a  2800              CMP      r0,#0                 ;287
00007c  d014              BEQ      |L11.168|
00007e  79e0              LDRB     r0,[r4,#7]            ;288
000080  2801              CMP      r0,#1                 ;288
000082  d011              BEQ      |L11.168|
000084  79e0              LDRB     r0,[r4,#7]            ;289
000086  2802              CMP      r0,#2                 ;289
000088  d00e              BEQ      |L11.168|
00008a  79e0              LDRB     r0,[r4,#7]            ;290
00008c  2803              CMP      r0,#3                 ;290
00008e  d00b              BEQ      |L11.168|
000090  79e0              LDRB     r0,[r4,#7]            ;291
000092  2804              CMP      r0,#4                 ;291
000094  d008              BEQ      |L11.168|
000096  79e0              LDRB     r0,[r4,#7]            ;292
000098  2805              CMP      r0,#5                 ;292
00009a  d005              BEQ      |L11.168|
00009c  79e0              LDRB     r0,[r4,#7]            ;293
00009e  2806              CMP      r0,#6                 ;293
0000a0  d002              BEQ      |L11.168|
0000a2  486d              LDR      r0,|L11.600|
0000a4  1d00              ADDS     r0,r0,#4              ;295
0000a6  e7b9              B        |L11.28|
                  |L11.168|
0000a8  2e00              CMP      r6,#0                 ;298
0000aa  d11a              BNE      |L11.226|
0000ac  2005              MOVS     r0,#5                 ;301
0000ae  0700              LSLS     r0,r0,#28             ;301
0000b0  68c0              LDR      r0,[r0,#0xc]          ;301
0000b2  2101              MOVS     r1,#1                 ;301
0000b4  0409              LSLS     r1,r1,#16             ;301
0000b6  4388              BICS     r0,r0,r1              ;301
0000b8  1840              ADDS     r0,r0,r1              ;301
0000ba  2105              MOVS     r1,#5                 ;301
0000bc  0709              LSLS     r1,r1,#28             ;301
0000be  60c8              STR      r0,[r1,#0xc]          ;301
0000c0  4608              MOV      r0,r1                 ;302
0000c2  68c0              LDR      r0,[r0,#0xc]          ;302
0000c4  2101              MOVS     r1,#1                 ;302
0000c6  0409              LSLS     r1,r1,#16             ;302
0000c8  4388              BICS     r0,r0,r1              ;302
0000ca  2105              MOVS     r1,#5                 ;302
0000cc  0709              LSLS     r1,r1,#28             ;302
0000ce  60c8              STR      r0,[r1,#0xc]          ;302
0000d0  4862              LDR      r0,|L11.604|
0000d2  6880              LDR      r0,[r0,#8]            ;305
0000d4  2101              MOVS     r1,#1                 ;305
0000d6  0409              LSLS     r1,r1,#16             ;305
0000d8  4388              BICS     r0,r0,r1              ;305
0000da  1840              ADDS     r0,r0,r1              ;305
0000dc  495f              LDR      r1,|L11.604|
0000de  6088              STR      r0,[r1,#8]            ;305
0000e0  e035              B        |L11.334|
                  |L11.226|
0000e2  2001              MOVS     r0,#1                 ;307
0000e4  0500              LSLS     r0,r0,#20             ;307
0000e6  4286              CMP      r6,r0                 ;307
0000e8  d117              BNE      |L11.282|
0000ea  2005              MOVS     r0,#5                 ;310
0000ec  0700              LSLS     r0,r0,#28             ;310
0000ee  68c0              LDR      r0,[r0,#0xc]          ;310
0000f0  10f1              ASRS     r1,r6,#3              ;310
0000f2  4388              BICS     r0,r0,r1              ;310
0000f4  1840              ADDS     r0,r0,r1              ;310
0000f6  2105              MOVS     r1,#5                 ;310
0000f8  0709              LSLS     r1,r1,#28             ;310
0000fa  60c8              STR      r0,[r1,#0xc]          ;310
0000fc  4608              MOV      r0,r1                 ;311
0000fe  68c0              LDR      r0,[r0,#0xc]          ;311
000100  10f1              ASRS     r1,r6,#3              ;311
000102  4388              BICS     r0,r0,r1              ;311
000104  2105              MOVS     r1,#5                 ;311
000106  0709              LSLS     r1,r1,#28             ;311
000108  60c8              STR      r0,[r1,#0xc]          ;311
00010a  4854              LDR      r0,|L11.604|
00010c  6880              LDR      r0,[r0,#8]            ;314
00010e  10f1              ASRS     r1,r6,#3              ;314
000110  4388              BICS     r0,r0,r1              ;314
000112  1840              ADDS     r0,r0,r1              ;314
000114  4951              LDR      r1,|L11.604|
000116  6088              STR      r0,[r1,#8]            ;314
000118  e019              B        |L11.334|
                  |L11.282|
00011a  2005              MOVS     r0,#5                 ;319
00011c  0700              LSLS     r0,r0,#28             ;319
00011e  68c0              LDR      r0,[r0,#0xc]          ;319
000120  2101              MOVS     r1,#1                 ;319
000122  0489              LSLS     r1,r1,#18             ;319
000124  4388              BICS     r0,r0,r1              ;319
000126  1840              ADDS     r0,r0,r1              ;319
000128  2105              MOVS     r1,#5                 ;319
00012a  0709              LSLS     r1,r1,#28             ;319
00012c  60c8              STR      r0,[r1,#0xc]          ;319
00012e  4608              MOV      r0,r1                 ;320
000130  68c0              LDR      r0,[r0,#0xc]          ;320
000132  2101              MOVS     r1,#1                 ;320
000134  0489              LSLS     r1,r1,#18             ;320
000136  4388              BICS     r0,r0,r1              ;320
000138  2105              MOVS     r1,#5                 ;320
00013a  0709              LSLS     r1,r1,#28             ;320
00013c  60c8              STR      r0,[r1,#0xc]          ;320
00013e  4847              LDR      r0,|L11.604|
000140  6880              LDR      r0,[r0,#8]            ;323
000142  2101              MOVS     r1,#1                 ;323
000144  0489              LSLS     r1,r1,#18             ;323
000146  4388              BICS     r0,r0,r1              ;323
000148  1840              ADDS     r0,r0,r1              ;323
00014a  4944              LDR      r1,|L11.604|
00014c  6088              STR      r0,[r1,#8]            ;323
                  |L11.334|
00014e  4844              LDR      r0,|L11.608|
000150  1835              ADDS     r5,r6,r0              ;326
000152  68a8              LDR      r0,[r5,#8]            ;330
000154  2104              MOVS     r1,#4                 ;330
000156  4388              BICS     r0,r0,r1              ;330
000158  1d00              ADDS     r0,r0,#4              ;330
00015a  60a8              STR      r0,[r5,#8]            ;330
00015c  68a8              LDR      r0,[r5,#8]            ;331
00015e  2102              MOVS     r1,#2                 ;331
000160  4388              BICS     r0,r0,r1              ;331
000162  1c80              ADDS     r0,r0,#2              ;331
000164  60a8              STR      r0,[r5,#8]            ;331
000166  68a8              LDR      r0,[r5,#8]            ;334
000168  21f0              MOVS     r1,#0xf0              ;334
00016a  4388              BICS     r0,r0,r1              ;334
00016c  79e1              LDRB     r1,[r4,#7]            ;334
00016e  0109              LSLS     r1,r1,#4              ;334
000170  22f0              MOVS     r2,#0xf0              ;334
000172  4011              ANDS     r1,r1,r2              ;334
000174  4308              ORRS     r0,r0,r1              ;334
000176  60a8              STR      r0,[r5,#8]            ;334
000178  68e8              LDR      r0,[r5,#0xc]          ;337
00017a  2120              MOVS     r1,#0x20              ;337
00017c  4388              BICS     r0,r0,r1              ;337
00017e  79a1              LDRB     r1,[r4,#6]            ;337
000180  2204              MOVS     r2,#4                 ;337
000182  4011              ANDS     r1,r1,r2              ;337
000184  0889              LSRS     r1,r1,#2              ;337
000186  0149              LSLS     r1,r1,#5              ;337
000188  2220              MOVS     r2,#0x20              ;337
00018a  4011              ANDS     r1,r1,r2              ;337
00018c  4308              ORRS     r0,r0,r1              ;337
00018e  60e8              STR      r0,[r5,#0xc]          ;337
000190  68e8              LDR      r0,[r5,#0xc]          ;338
000192  2110              MOVS     r1,#0x10              ;338
000194  4388              BICS     r0,r0,r1              ;338
000196  79a1              LDRB     r1,[r4,#6]            ;338
000198  2202              MOVS     r2,#2                 ;338
00019a  4011              ANDS     r1,r1,r2              ;338
00019c  0849              LSRS     r1,r1,#1              ;338
00019e  0109              LSLS     r1,r1,#4              ;338
0001a0  2210              MOVS     r2,#0x10              ;338
0001a2  4011              ANDS     r1,r1,r2              ;338
0001a4  4308              ORRS     r0,r0,r1              ;338
0001a6  60e8              STR      r0,[r5,#0xc]          ;338
0001a8  68e8              LDR      r0,[r5,#0xc]          ;339
0001aa  2108              MOVS     r1,#8                 ;339
0001ac  4388              BICS     r0,r0,r1              ;339
0001ae  79a1              LDRB     r1,[r4,#6]            ;339
0001b0  00c9              LSLS     r1,r1,#3              ;339
0001b2  2208              MOVS     r2,#8                 ;339
0001b4  4011              ANDS     r1,r1,r2              ;339
0001b6  4308              ORRS     r0,r0,r1              ;339
0001b8  60e8              STR      r0,[r5,#0xc]          ;339
0001ba  68e8              LDR      r0,[r5,#0xc]          ;341
0001bc  0880              LSRS     r0,r0,#2              ;341
0001be  0080              LSLS     r0,r0,#2              ;341
0001c0  7921              LDRB     r1,[r4,#4]            ;341
0001c2  0789              LSLS     r1,r1,#30             ;341
0001c4  0f89              LSRS     r1,r1,#30             ;341
0001c6  4308              ORRS     r0,r0,r1              ;341
0001c8  60e8              STR      r0,[r5,#0xc]          ;341
0001ca  68e8              LDR      r0,[r5,#0xc]          ;342
0001cc  2104              MOVS     r1,#4                 ;342
0001ce  4388              BICS     r0,r0,r1              ;342
0001d0  7961              LDRB     r1,[r4,#5]            ;342
0001d2  0089              LSLS     r1,r1,#2              ;342
0001d4  2204              MOVS     r2,#4                 ;342
0001d6  4011              ANDS     r1,r1,r2              ;342
0001d8  4308              ORRS     r0,r0,r1              ;342
0001da  60e8              STR      r0,[r5,#0xc]          ;342
0001dc  6a28              LDR      r0,[r5,#0x20]         ;345
0001de  0a00              LSRS     r0,r0,#8              ;345
0001e0  0200              LSLS     r0,r0,#8              ;345
0001e2  7a21              LDRB     r1,[r4,#8]            ;345
0001e4  4308              ORRS     r0,r0,r1              ;345
0001e6  6228              STR      r0,[r5,#0x20]         ;345
0001e8  481c              LDR      r0,|L11.604|
0001ea  6800              LDR      r0,[r0,#0]            ;348
0001ec  07c0              LSLS     r0,r0,#31             ;348
0001ee  0fc0              LSRS     r0,r0,#31             ;348
0001f0  d007              BEQ      |L11.514|
0001f2  481a              LDR      r0,|L11.604|
0001f4  6940              LDR      r0,[r0,#0x14]         ;349
0001f6  2103              MOVS     r1,#3                 ;349
0001f8  0609              LSLS     r1,r1,#24             ;349
0001fa  4388              BICS     r0,r0,r1              ;349
0001fc  4917              LDR      r1,|L11.604|
0001fe  6148              STR      r0,[r1,#0x14]         ;349
000200  e020              B        |L11.580|
                  |L11.514|
000202  4816              LDR      r0,|L11.604|
000204  6a00              LDR      r0,[r0,#0x20]         ;352
000206  03c0              LSLS     r0,r0,#15             ;352
000208  0fc0              LSRS     r0,r0,#31             ;352
00020a  d10a              BNE      |L11.546|
00020c  4813              LDR      r0,|L11.604|
00020e  6940              LDR      r0,[r0,#0x14]         ;353
000210  2103              MOVS     r1,#3                 ;353
000212  0609              LSLS     r1,r1,#24             ;353
000214  4388              BICS     r0,r0,r1              ;353
000216  2101              MOVS     r1,#1                 ;353
000218  0609              LSLS     r1,r1,#24             ;353
00021a  1840              ADDS     r0,r0,r1              ;353
00021c  490f              LDR      r1,|L11.604|
00021e  6148              STR      r0,[r1,#0x14]         ;353
000220  e010              B        |L11.580|
                  |L11.546|
000222  480e              LDR      r0,|L11.604|
000224  6800              LDR      r0,[r0,#0]            ;355
000226  0740              LSLS     r0,r0,#29             ;355
000228  0fc0              LSRS     r0,r0,#31             ;355
00022a  d008              BEQ      |L11.574|
00022c  480b              LDR      r0,|L11.604|
00022e  6940              LDR      r0,[r0,#0x14]         ;356
000230  2103              MOVS     r1,#3                 ;356
000232  0609              LSLS     r1,r1,#24             ;356
000234  4388              BICS     r0,r0,r1              ;356
000236  1840              ADDS     r0,r0,r1              ;356
000238  4908              LDR      r1,|L11.604|
00023a  6148              STR      r0,[r1,#0x14]         ;356
00023c  e002              B        |L11.580|
                  |L11.574|
00023e  4806              LDR      r0,|L11.600|
000240  1d80              ADDS     r0,r0,#6              ;358
000242  e6eb              B        |L11.28|
                  |L11.580|
000244  f7fffffe          BL       GetUartClk
000248  4607              MOV      r7,r0                 ;362
00024a  4632              MOV      r2,r6                 ;362
00024c  6821              LDR      r1,[r4,#0]            ;362
00024e  f7fffffe          BL       BaudRateCalculator
000252  2000              MOVS     r0,#0                 ;365
000254  e6e2              B        |L11.28|
;;;367    
                          ENDP

000256  0000              DCW      0x0000
                  |L11.600|
                          DCD      0xffff9802
                  |L11.604|
                          DCD      0x50000200
                  |L11.608|
                          DCD      0x40050000

                          AREA ||i.DrvUART_Read||, CODE, READONLY, ALIGN=2

                  DrvUART_Read PROC
;;;632    /*---------------------------------------------------------------------------------------------------------*/
;;;633    int32_t DrvUART_Read(E_UART_PORT	u32Port,uint8_t	*pu8RxBuf, uint32_t	u32ReadBytes)
000000  b570              PUSH     {r4-r6,lr}
;;;634    {
000002  4603              MOV      r3,r0
000004  460c              MOV      r4,r1
;;;635        uint32_t  u32Count, u32delayno;
;;;636    
;;;637    	UART_T * tUART;
;;;638    
;;;639    	tUART = (UART_T *)((uint32_t)UART0 + u32Port);  
000006  480c              LDR      r0,|L12.56|
000008  181d              ADDS     r5,r3,r0
;;;640    
;;;641        for (u32Count=0; u32Count < u32ReadBytes; u32Count++)
00000a  2100              MOVS     r1,#0
00000c  e00f              B        |L12.46|
                  |L12.14|
;;;642        {
;;;643    		 u32delayno = 0;
00000e  2600              MOVS     r6,#0
;;;644    	     while (tUART->FSR.RX_EMPTY ==1)					    /* Check RX empty => failed */	   
000010  e006              B        |L12.32|
                  |L12.18|
;;;645    	     {
;;;646    	     	u32delayno++;        
000012  1c76              ADDS     r6,r6,#1
;;;647    	        if ( u32delayno >= 0x40000000 )        
000014  2001              MOVS     r0,#1
000016  0780              LSLS     r0,r0,#30
000018  4286              CMP      r6,r0
00001a  d301              BCC      |L12.32|
;;;648    	        	return E_DRVUART_ERR_TIMEOUT;               
00001c  4807              LDR      r0,|L12.60|
                  |L12.30|
;;;649             }
;;;650             pu8RxBuf[u32Count] = tUART->DATA;					    /* Get Data from UART RX  */
;;;651        }
;;;652    
;;;653        return E_SUCCESS;
;;;654    	
;;;655    }
00001e  bd70              POP      {r4-r6,pc}
                  |L12.32|
000020  69a8              LDR      r0,[r5,#0x18]         ;644
000022  0440              LSLS     r0,r0,#17             ;644
000024  0fc0              LSRS     r0,r0,#31             ;644
000026  d1f4              BNE      |L12.18|
000028  6828              LDR      r0,[r5,#0]            ;650
00002a  5460              STRB     r0,[r4,r1]            ;650
00002c  1c49              ADDS     r1,r1,#1              ;641
                  |L12.46|
00002e  4291              CMP      r1,r2                 ;641
000030  d3ed              BCC      |L12.14|
000032  2000              MOVS     r0,#0                 ;653
000034  e7f3              B        |L12.30|
;;;656    
                          ENDP

000036  0000              DCW      0x0000
                  |L12.56|
                          DCD      0x40050000
                  |L12.60|
                          DCD      0xffff9801

                          AREA ||i.DrvUART_SetFnIRDA||, CODE, READONLY, ALIGN=2

                  DrvUART_SetFnIRDA PROC
;;;776    /*---------------------------------------------------------------------------------------------------------*/
;;;777    void DrvUART_SetFnIRDA(E_UART_PORT u32Port,STR_IRCR_T *str_IRCR )
000000  b530              PUSH     {r4,r5,lr}
;;;778    {
000002  4602              MOV      r2,r0
;;;779    	UART_T * tUART;
;;;780    
;;;781    	tUART = (UART_T *)((uint32_t)UART0 + u32Port);  
000004  4b13              LDR      r3,|L13.84|
000006  18d0              ADDS     r0,r2,r3
;;;782    
;;;783    	tUART->FUNSEL.FUN_SEL 	= FUN_IRCR;							   	/* Enable IrDA function and configure */
000008  6b03              LDR      r3,[r0,#0x30]
00000a  089b              LSRS     r3,r3,#2
00000c  009b              LSLS     r3,r3,#2
00000e  1c9b              ADDS     r3,r3,#2
000010  6303              STR      r3,[r0,#0x30]
;;;784    	tUART->IRCR.TX_SELECT	= (str_IRCR->u8cTXSelect) ?1:0;
000012  6a83              LDR      r3,[r0,#0x28]
000014  2402              MOVS     r4,#2
000016  43a3              BICS     r3,r3,r4
000018  780c              LDRB     r4,[r1,#0]
00001a  2c00              CMP      r4,#0
00001c  d001              BEQ      |L13.34|
00001e  2401              MOVS     r4,#1
000020  e000              B        |L13.36|
                  |L13.34|
000022  2400              MOVS     r4,#0
                  |L13.36|
000024  0064              LSLS     r4,r4,#1
000026  2502              MOVS     r5,#2
000028  402c              ANDS     r4,r4,r5
00002a  4323              ORRS     r3,r3,r4
00002c  6283              STR      r3,[r0,#0x28]
;;;785    	tUART->IRCR.INV_TX		= str_IRCR->u8cInvTX ;
00002e  6a83              LDR      r3,[r0,#0x28]
000030  2420              MOVS     r4,#0x20
000032  43a3              BICS     r3,r3,r4
000034  784c              LDRB     r4,[r1,#1]
000036  0164              LSLS     r4,r4,#5
000038  2520              MOVS     r5,#0x20
00003a  402c              ANDS     r4,r4,r5
00003c  4323              ORRS     r3,r3,r4
00003e  6283              STR      r3,[r0,#0x28]
;;;786    	tUART->IRCR.INV_RX		= str_IRCR->u8cInvRX ;
000040  6a83              LDR      r3,[r0,#0x28]
000042  2440              MOVS     r4,#0x40
000044  43a3              BICS     r3,r3,r4
000046  788c              LDRB     r4,[r1,#2]
000048  01a4              LSLS     r4,r4,#6
00004a  2540              MOVS     r5,#0x40
00004c  402c              ANDS     r4,r4,r5
00004e  4323              ORRS     r3,r3,r4
000050  6283              STR      r3,[r0,#0x28]
;;;787    }
000052  bd30              POP      {r4,r5,pc}
;;;788    
                          ENDP

                  |L13.84|
                          DCD      0x40050000

                          AREA ||i.DrvUART_SetFnLIN||, CODE, READONLY, ALIGN=2

                  DrvUART_SetFnLIN PROC
;;;802    /*---------------------------------------------------------------------------------------------------------*/
;;;803    void DrvUART_SetFnLIN(E_UART_PORT u32Port,uint16_t u16Mode,uint16_t u16BreakLength)
000000  b570              PUSH     {r4-r6,lr}
;;;804    {
000002  4603              MOV      r3,r0
;;;805    	UART_T * tUART;
;;;806    
;;;807    	tUART = (UART_T *)((uint32_t)UART0 + u32Port);  
000004  4c10              LDR      r4,|L14.72|
000006  1918              ADDS     r0,r3,r4
;;;808    
;;;809    	tUART->FUNSEL.FUN_SEL 	= FUN_LIN;
000008  6b04              LDR      r4,[r0,#0x30]
00000a  08a4              LSRS     r4,r4,#2
00000c  00a4              LSLS     r4,r4,#2
00000e  1c64              ADDS     r4,r4,#1
000010  6304              STR      r4,[r0,#0x30]
;;;810    	
;;;811    	tUART->ALTCON.LIN_BKFL  = u16BreakLength;
000012  6ac4              LDR      r4,[r0,#0x2c]
000014  0924              LSRS     r4,r4,#4
000016  0124              LSLS     r4,r4,#4
000018  0715              LSLS     r5,r2,#28
00001a  0f2d              LSRS     r5,r5,#28
00001c  432c              ORRS     r4,r4,r5
00001e  62c4              STR      r4,[r0,#0x2c]
;;;812    	tUART->ALTCON.LIN_TX_EN	= (u16Mode & MODE_TX) ?1:0;
000020  6ac4              LDR      r4,[r0,#0x2c]
000022  2580              MOVS     r5,#0x80
000024  43ac              BICS     r4,r4,r5
000026  01cd              LSLS     r5,r1,#7
000028  2680              MOVS     r6,#0x80
00002a  4035              ANDS     r5,r5,r6
00002c  432c              ORRS     r4,r4,r5
00002e  62c4              STR      r4,[r0,#0x2c]
;;;813    	tUART->ALTCON.LIN_RX_EN	= (u16Mode & MODE_RX) ?1:0;
000030  6ac4              LDR      r4,[r0,#0x2c]
000032  2540              MOVS     r5,#0x40
000034  43ac              BICS     r4,r4,r5
000036  2502              MOVS     r5,#2
000038  400d              ANDS     r5,r5,r1
00003a  086d              LSRS     r5,r5,#1
00003c  01ad              LSLS     r5,r5,#6
00003e  2640              MOVS     r6,#0x40
000040  4035              ANDS     r5,r5,r6
000042  432c              ORRS     r4,r4,r5
000044  62c4              STR      r4,[r0,#0x2c]
;;;814    
;;;815    }
000046  bd70              POP      {r4-r6,pc}
;;;816    
                          ENDP

                  |L14.72|
                          DCD      0x40050000

                          AREA ||i.DrvUART_SetFnRS485||, CODE, READONLY, ALIGN=2

                  DrvUART_SetFnRS485 PROC
;;;836    /*---------------------------------------------------------------------------------------------------------*/
;;;837    void DrvUART_SetFnRS485(E_UART_PORT u32Port,STR_RS485_T *str_RS485)
000000  b530              PUSH     {r4,r5,lr}
;;;838    {
000002  4602              MOV      r2,r0
;;;839    					 
;;;840    	UART_T * tUART;
;;;841    
;;;842    	tUART = (UART_T *)((uint32_t)UART0 + u32Port);  
000004  4b2e              LDR      r3,|L15.192|
000006  18d0              ADDS     r0,r2,r3
;;;843    
;;;844    	tUART->FUNSEL.FUN_SEL 			= FUN_RS485;					
000008  6b03              LDR      r3,[r0,#0x30]
00000a  089b              LSRS     r3,r3,#2
00000c  009b              LSLS     r3,r3,#2
00000e  1cdb              ADDS     r3,r3,#3
000010  6303              STR      r3,[r0,#0x30]
;;;845    	tUART->ALTCON.RS485_ADD_EN	    = (str_RS485-> u8cAddrEnable) ?1:0;
000012  6ac3              LDR      r3,[r0,#0x2c]
000014  2401              MOVS     r4,#1
000016  03e4              LSLS     r4,r4,#15
000018  43a3              BICS     r3,r3,r4
00001a  784c              LDRB     r4,[r1,#1]
00001c  2c00              CMP      r4,#0
00001e  d001              BEQ      |L15.36|
000020  2401              MOVS     r4,#1
000022  e000              B        |L15.38|
                  |L15.36|
000024  2400              MOVS     r4,#0
                  |L15.38|
000026  03e4              LSLS     r4,r4,#15
000028  2501              MOVS     r5,#1
00002a  03ed              LSLS     r5,r5,#15
00002c  402c              ANDS     r4,r4,r5
00002e  4323              ORRS     r3,r3,r4
000030  62c3              STR      r3,[r0,#0x2c]
;;;846    	tUART->ALTCON.ADDR_MATCH		= str_RS485-> u8cAddrValue ;
000032  6ac3              LDR      r3,[r0,#0x2c]
000034  021b              LSLS     r3,r3,#8
000036  0a1b              LSRS     r3,r3,#8
000038  788c              LDRB     r4,[r1,#2]
00003a  0624              LSLS     r4,r4,#24
00003c  0e24              LSRS     r4,r4,#24
00003e  0624              LSLS     r4,r4,#24
000040  4323              ORRS     r3,r3,r4
000042  62c3              STR      r3,[r0,#0x2c]
;;;847    	tUART->ALTCON.RS485_NMM		    = (str_RS485-> u8cModeSelect & MODE_RS485_NMM)?1:0;	
000044  6ac3              LDR      r3,[r0,#0x2c]
000046  11ec              ASRS     r4,r5,#7
000048  43a3              BICS     r3,r3,r4
00004a  780c              LDRB     r4,[r1,#0]
00004c  0224              LSLS     r4,r4,#8
00004e  11ed              ASRS     r5,r5,#7
000050  402c              ANDS     r4,r4,r5
000052  4323              ORRS     r3,r3,r4
000054  62c3              STR      r3,[r0,#0x2c]
;;;848    	tUART->ALTCON.RS485_AAD		    = (str_RS485-> u8cModeSelect & MODE_RS485_AAD)?1:0;	
000056  6ac3              LDR      r3,[r0,#0x2c]
000058  006c              LSLS     r4,r5,#1
00005a  43a3              BICS     r3,r3,r4
00005c  780c              LDRB     r4,[r1,#0]
00005e  2502              MOVS     r5,#2
000060  402c              ANDS     r4,r4,r5
000062  0864              LSRS     r4,r4,#1
000064  0264              LSLS     r4,r4,#9
000066  022d              LSLS     r5,r5,#8
000068  402c              ANDS     r4,r4,r5
00006a  4323              ORRS     r3,r3,r4
00006c  62c3              STR      r3,[r0,#0x2c]
;;;849    	tUART->ALTCON.RS485_AUD		    = (str_RS485-> u8cModeSelect & MODE_RS485_AUD)?1:0;	
00006e  6ac3              LDR      r3,[r0,#0x2c]
000070  006c              LSLS     r4,r5,#1
000072  43a3              BICS     r3,r3,r4
000074  780c              LDRB     r4,[r1,#0]
000076  2504              MOVS     r5,#4
000078  402c              ANDS     r4,r4,r5
00007a  08a4              LSRS     r4,r4,#2
00007c  02a4              LSLS     r4,r4,#10
00007e  022d              LSLS     r5,r5,#8
000080  402c              ANDS     r4,r4,r5
000082  4323              ORRS     r3,r3,r4
000084  62c3              STR      r3,[r0,#0x2c]
;;;850    	tUART->TOR.DLY                  = str_RS485-> u8cDelayTime;
000086  6a03              LDR      r3,[r0,#0x20]
000088  24ff              MOVS     r4,#0xff
00008a  0224              LSLS     r4,r4,#8
00008c  43a3              BICS     r3,r3,r4
00008e  78cc              LDRB     r4,[r1,#3]
000090  0224              LSLS     r4,r4,#8
000092  25ff              MOVS     r5,#0xff
000094  022d              LSLS     r5,r5,#8
000096  402c              ANDS     r4,r4,r5
000098  4323              ORRS     r3,r3,r4
00009a  6203              STR      r3,[r0,#0x20]
;;;851    	tUART->FCR.RX_DIS               = (str_RS485-> u8cRxDisable) ?1:0;
00009c  6883              LDR      r3,[r0,#8]
00009e  24ff              MOVS     r4,#0xff
0000a0  3401              ADDS     r4,#1
0000a2  43a3              BICS     r3,r3,r4
0000a4  790c              LDRB     r4,[r1,#4]
0000a6  2c00              CMP      r4,#0
0000a8  d001              BEQ      |L15.174|
0000aa  2401              MOVS     r4,#1
0000ac  e000              B        |L15.176|
                  |L15.174|
0000ae  2400              MOVS     r4,#0
                  |L15.176|
0000b0  0224              LSLS     r4,r4,#8
0000b2  25ff              MOVS     r5,#0xff
0000b4  3501              ADDS     r5,#1
0000b6  402c              ANDS     r4,r4,r5
0000b8  4323              ORRS     r3,r3,r4
0000ba  6083              STR      r3,[r0,#8]
;;;852    	
;;;853    
;;;854    } 
0000bc  bd30              POP      {r4,r5,pc}
;;;855    /*---------------------------------------------------------------------------------------------------------*/
                          ENDP

0000be  0000              DCW      0x0000
                  |L15.192|
                          DCD      0x40050000

                          AREA ||i.DrvUART_SetRTS||, CODE, READONLY, ALIGN=2

                  DrvUART_SetRTS PROC
;;;184    /*---------------------------------------------------------------------------------------------------------*/
;;;185    void DrvUART_SetRTS(E_UART_PORT u32Port,uint8_t u8Value,uint16_t u16TriggerLevel)
000000  b570              PUSH     {r4-r6,lr}
;;;186    {
000002  4603              MOV      r3,r0
;;;187    	
;;;188    	UART_T * tUART;
;;;189    
;;;190    	tUART = (UART_T *)((uint32_t)UART0 + u32Port);  
000004  4c0a              LDR      r4,|L16.48|
000006  1918              ADDS     r0,r3,r4
;;;191    
;;;192    	tUART->MCR.RTS = u8Value;
000008  6904              LDR      r4,[r0,#0x10]
00000a  2502              MOVS     r5,#2
00000c  43ac              BICS     r4,r4,r5
00000e  004d              LSLS     r5,r1,#1
000010  2602              MOVS     r6,#2
000012  4035              ANDS     r5,r5,r6
000014  432c              ORRS     r4,r4,r5
000016  6104              STR      r4,[r0,#0x10]
;;;193    
;;;194    	tUART->FCR.RTS_TRI_LEV = u16TriggerLevel;
000018  6884              LDR      r4,[r0,#8]
00001a  250f              MOVS     r5,#0xf
00001c  042d              LSLS     r5,r5,#16
00001e  43ac              BICS     r4,r4,r5
000020  0415              LSLS     r5,r2,#16
000022  260f              MOVS     r6,#0xf
000024  0436              LSLS     r6,r6,#16
000026  4035              ANDS     r5,r5,r6
000028  432c              ORRS     r4,r4,r5
00002a  6084              STR      r4,[r0,#8]
;;;195    }	
00002c  bd70              POP      {r4-r6,pc}
;;;196    
                          ENDP

00002e  0000              DCW      0x0000
                  |L16.48|
                          DCD      0x40050000

                          AREA ||i.DrvUART_Write||, CODE, READONLY, ALIGN=2

                  DrvUART_Write PROC
;;;673    /*---------------------------------------------------------------------------------------------------------*/
;;;674    int32_t DrvUART_Write(E_UART_PORT	u32Port,uint8_t	*pu8TxBuf, 	uint32_t u32WriteBytes)
000000  b570              PUSH     {r4-r6,lr}
;;;675    {
000002  4603              MOV      r3,r0
000004  460c              MOV      r4,r1
;;;676        uint32_t  u32Count, u32delayno;
;;;677    
;;;678    	UART_T * tUART;
;;;679    
;;;680    	tUART = (UART_T *)((uint32_t)UART0 + u32Port);  
000006  480c              LDR      r0,|L17.56|
000008  181d              ADDS     r5,r3,r0
;;;681    
;;;682        for (u32Count=0; u32Count<u32WriteBytes; u32Count++)
00000a  2100              MOVS     r1,#0
00000c  e00f              B        |L17.46|
                  |L17.14|
;;;683        {
;;;684           u32delayno = 0;
00000e  2600              MOVS     r6,#0
;;;685    	   while (tUART->FSR.TE_FLAG !=1)						    	/* Wait Tx empty and Time-out manner */
000010  e006              B        |L17.32|
                  |L17.18|
;;;686           {
;;;687           	    u32delayno++;
000012  1c76              ADDS     r6,r6,#1
;;;688           	    if ( u32delayno >= 0x40000000 )     	    
000014  2001              MOVS     r0,#1
000016  0780              LSLS     r0,r0,#30
000018  4286              CMP      r6,r0
00001a  d301              BCC      |L17.32|
;;;689           	       return E_DRVUART_ERR_TIMEOUT;     	       
00001c  4807              LDR      r0,|L17.60|
                  |L17.30|
;;;690    				   
;;;691           }
;;;692    	   tUART->DATA = pu8TxBuf[u32Count];						/* Send UART Data from buffer */
;;;693        }
;;;694    
;;;695        return E_SUCCESS;
;;;696    	
;;;697      
;;;698    }
00001e  bd70              POP      {r4-r6,pc}
                  |L17.32|
000020  69a8              LDR      r0,[r5,#0x18]         ;685
000022  00c0              LSLS     r0,r0,#3              ;685
000024  0fc0              LSRS     r0,r0,#31             ;685
000026  d0f4              BEQ      |L17.18|
000028  5c60              LDRB     r0,[r4,r1]            ;692
00002a  6028              STR      r0,[r5,#0]            ;692
00002c  1c49              ADDS     r1,r1,#1              ;682
                  |L17.46|
00002e  4291              CMP      r1,r2                 ;682
000030  d3ed              BCC      |L17.14|
000032  2000              MOVS     r0,#0                 ;695
000034  e7f3              B        |L17.30|
;;;699    
                          ENDP

000036  0000              DCW      0x0000
                  |L17.56|
                          DCD      0x40050000
                  |L17.60|
                          DCD      0xffff9801

                          AREA ||i.GetUartClk||, CODE, READONLY, ALIGN=2

                  GetUartClk PROC
;;;143    /*---------------------------------------------------------------------------------------------------------*/
;;;144    static uint32_t GetUartClk(void)
000000  b570              PUSH     {r4-r6,lr}
;;;145    {
;;;146    	uint32_t clk =0 , div;
000002  2400              MOVS     r4,#0
;;;147    
;;;148        div = SYSCLK->CLKDIV.UART_N;				/* According PLL Clock and UART_Divider to get clock */
000004  480e              LDR      r0,|L18.64|
000006  6980              LDR      r0,[r0,#0x18]
000008  0500              LSLS     r0,r0,#20
00000a  0f05              LSRS     r5,r0,#28
;;;149    													
;;;150    	if(SYSCLK->CLKSEL1.UART_S == 0)			    /* Check UART Clock Source Setting */
00000c  480c              LDR      r0,|L18.64|
00000e  6940              LDR      r0,[r0,#0x14]
000010  0180              LSLS     r0,r0,#6
000012  0f80              LSRS     r0,r0,#30
000014  d103              BNE      |L18.30|
;;;151    	{
;;;152    		clk = DrvSYS_GetExtClockFreq();			/* Get External Clock From DrvSYS Setting */
000016  f7fffffe          BL       DrvSYS_GetExtClockFreq
00001a  4604              MOV      r4,r0
00001c  e00a              B        |L18.52|
                  |L18.30|
;;;153    	}
;;;154    	else if(SYSCLK->CLKSEL1.UART_S == 1)
00001e  4808              LDR      r0,|L18.64|
000020  6940              LDR      r0,[r0,#0x14]
000022  0180              LSLS     r0,r0,#6
000024  0f80              LSRS     r0,r0,#30
000026  2801              CMP      r0,#1
000028  d103              BNE      |L18.50|
;;;155    	{
;;;156    		clk = DrvSYS_GetPLLClockFreq();
00002a  f7fffffe          BL       DrvSYS_GetPLLClockFreq
00002e  4604              MOV      r4,r0
000030  e000              B        |L18.52|
                  |L18.50|
;;;157    	}
;;;158    	else
;;;159    		clk = __IRC22M;								/* Clock 22Mhz  */
000032  4c04              LDR      r4,|L18.68|
                  |L18.52|
;;;160    
;;;161    	return (clk/(div+1));
000034  1c69              ADDS     r1,r5,#1
000036  4620              MOV      r0,r4
000038  f7fffffe          BL       __aeabi_uidivmod
;;;162    }
00003c  bd70              POP      {r4-r6,pc}
;;;163    
                          ENDP

00003e  0000              DCW      0x0000
                  |L18.64|
                          DCD      0x50000200
                  |L18.68|
                          DCD      0x01518000

                          AREA ||i.NVIC_DisableIRQ||, CODE, READONLY, ALIGN=2

                  NVIC_DisableIRQ PROC
;;;809     */
;;;810    static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
000000  06c2              LSLS     r2,r0,#27
;;;811    {
;;;812      NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
000002  0ed2              LSRS     r2,r2,#27
000004  2101              MOVS     r1,#1
000006  4091              LSLS     r1,r1,r2
000008  4a01              LDR      r2,|L19.16|
00000a  6011              STR      r1,[r2,#0]
;;;813    }
00000c  4770              BX       lr
;;;814    
                          ENDP

00000e  0000              DCW      0x0000
                  |L19.16|
                          DCD      0xe000e180

                          AREA ||i.NVIC_EnableIRQ||, CODE, READONLY, ALIGN=2

                  NVIC_EnableIRQ PROC
;;;796     */
;;;797    static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
000000  06c2              LSLS     r2,r0,#27
;;;798    {
;;;799      NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
000002  0ed2              LSRS     r2,r2,#27
000004  2101              MOVS     r1,#1
000006  4091              LSLS     r1,r1,r2
000008  4a01              LDR      r2,|L20.16|
00000a  6011              STR      r1,[r2,#0]
;;;800    }
00000c  4770              BX       lr
;;;801    
                          ENDP

00000e  0000              DCW      0x0000
                  |L20.16|
                          DCD      0xe000e100

                          AREA ||i.UART02_IRQHandler||, CODE, READONLY, ALIGN=2

                  UART02_IRQHandler PROC
;;;32     /*---------------------------------------------------------------------------------------------------------*/
;;;33     void UART02_IRQHandler(void)
000000  b570              PUSH     {r4-r6,lr}
;;;34     {
;;;35         uint32_t u32uart0IntStatus,u32uart2IntStatus;
;;;36     
;;;37         u32uart0IntStatus = inpw(&UART0->ISR) ;
000002  480a              LDR      r0,|L21.44|
000004  69c4              LDR      r4,[r0,#0x1c]
;;;38     	
;;;39     	u32uart2IntStatus = inpw(&UART2->ISR) ;
000006  480a              LDR      r0,|L21.48|
000008  69c5              LDR      r5,[r0,#0x1c]
;;;40     	
;;;41         if(g_pfnUART0callback != NULL)
00000a  480a              LDR      r0,|L21.52|
00000c  6800              LDR      r0,[r0,#0]  ; g_pfnUART0callback
00000e  2800              CMP      r0,#0
000010  d003              BEQ      |L21.26|
;;;42     	{
;;;43             g_pfnUART0callback(u32uart0IntStatus);
000012  4620              MOV      r0,r4
000014  4907              LDR      r1,|L21.52|
000016  6809              LDR      r1,[r1,#0]  ; g_pfnUART0callback
000018  4788              BLX      r1
                  |L21.26|
;;;44         }
;;;45     	if(g_pfnUART2callback != NULL)
00001a  4807              LDR      r0,|L21.56|
00001c  6800              LDR      r0,[r0,#0]  ; g_pfnUART2callback
00001e  2800              CMP      r0,#0
000020  d003              BEQ      |L21.42|
;;;46         {
;;;47             g_pfnUART2callback(u32uart2IntStatus);
000022  4628              MOV      r0,r5
000024  4904              LDR      r1,|L21.56|
000026  6809              LDR      r1,[r1,#0]  ; g_pfnUART2callback
000028  4788              BLX      r1
                  |L21.42|
;;;48         }
;;;49     }
00002a  bd70              POP      {r4-r6,pc}
;;;50     
                          ENDP

                  |L21.44|
                          DCD      0x40050000
                  |L21.48|
                          DCD      0x40154000
                  |L21.52|
                          DCD      g_pfnUART0callback
                  |L21.56|
                          DCD      g_pfnUART2callback

                          AREA ||i.UART1_IRQHandler||, CODE, READONLY, ALIGN=2

                  UART1_IRQHandler PROC
;;;51     
;;;52     void UART1_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;53     {
;;;54         uint32_t u32IntStatus;
;;;55     
;;;56     	u32IntStatus = inpw(&UART1->ISR) ;
000002  4805              LDR      r0,|L22.24|
000004  69c4              LDR      r4,[r0,#0x1c]
;;;57     
;;;58         if(g_pfnUART1callback != NULL)
000006  4805              LDR      r0,|L22.28|
000008  6800              LDR      r0,[r0,#0]  ; g_pfnUART1callback
00000a  2800              CMP      r0,#0
00000c  d003              BEQ      |L22.22|
;;;59         {
;;;60            g_pfnUART1callback(u32IntStatus);
00000e  4620              MOV      r0,r4
000010  4902              LDR      r1,|L22.28|
000012  6809              LDR      r1,[r1,#0]  ; g_pfnUART1callback
000014  4788              BLX      r1
                  |L22.22|
;;;61         }
;;;62     
;;;63     }
000016  bd10              POP      {r4,pc}
;;;64     
                          ENDP

                  |L22.24|
                          DCD      0x40150000
                  |L22.28|
                          DCD      g_pfnUART1callback

                          AREA ||.data||, DATA, ALIGN=2

                  g_pfnUART0callback
                          DCD      0x00000000
                  g_pfnUART1callback
                          DCD      0x00000000
                  g_pfnUART2callback
                          DCD      0x00000000
