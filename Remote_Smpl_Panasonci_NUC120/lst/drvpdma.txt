; generated by ARM C/C++ Compiler, 5.02 [Build 28]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\drvpdma.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\drvpdma.d --cpu=Cortex-M0 --apcs=interwork -O0 -Otime -I.\ -I..\..\..\..\CMSIS\CM0\CoreSupport -I..\..\..\..\CMSIS\CM0\DeviceSupport\Nuvoton\NUC1xx -I..\..\..\Include -I..\..\..\Include\Driver -Id:\Keil\ARM\RV31\INC -Id:\Keil\ARM\CMSIS\Include -Id:\Keil\ARM\Inc\Nuvoton\NUC1xx -DUSE_STDPERIPH_DRIVER --omf_browse=.\obj\drvpdma.crf ..\..\..\Src\Driver\DrvPDMA.c]
                          THUMB

                          AREA ||i.DrvPDMA_CHEnableTransfer||, CODE, READONLY, ALIGN=2

                  DrvPDMA_CHEnableTransfer PROC
;;;436    
;;;437    int32_t	DrvPDMA_CHEnableTransfer(E_DRVPDMA_CHANNEL_INDEX eChannel)
000000  4602              MOV      r2,r0
;;;438    {
;;;439        volatile uint32_t u32SFR;
;;;440    	PDMA_T * tPDMA;
;;;441        																		/* Check PDMA Channel is Valid */
;;;442        if (eChannel > MAX_CHANNEL_NUM  )	    						        /* Check Channel is valid */
000002  2a09              CMP      r2,#9
000004  dd01              BLE      |L1.10|
;;;443            return E_DRVPDMA_ERR_PORT_INVALID;    
000006  4808              LDR      r0,|L1.40|
                  |L1.8|
;;;444                
;;;445       	tPDMA = (PDMA_T *)((uint32_t)PDMA0 + eChannel * CHANNEL_OFFSET);
;;;446    
;;;447        tPDMA->CSR.PDMACEN = 1;
;;;448        tPDMA->CSR.TRIG_EN = 1;												   /* PDMA Channl & Trigger Enable */
;;;449    
;;;450        return E_SUCCESS;      
;;;451    }
000008  4770              BX       lr
                  |L1.10|
00000a  0210              LSLS     r0,r2,#8              ;445
00000c  4b07              LDR      r3,|L1.44|
00000e  18c1              ADDS     r1,r0,r3              ;445
000010  6808              LDR      r0,[r1,#0]            ;447
000012  0840              LSRS     r0,r0,#1              ;447
000014  0040              LSLS     r0,r0,#1              ;447
000016  1c40              ADDS     r0,r0,#1              ;447
000018  6008              STR      r0,[r1,#0]            ;447
00001a  6808              LDR      r0,[r1,#0]            ;448
00001c  021b              LSLS     r3,r3,#8              ;448
00001e  4398              BICS     r0,r0,r3              ;448
000020  18c0              ADDS     r0,r0,r3              ;448
000022  6008              STR      r0,[r1,#0]            ;448
000024  2000              MOVS     r0,#0                 ;450
000026  e7ef              B        |L1.8|
;;;452    
                          ENDP

                  |L1.40|
                          DCD      0xffff9082
                  |L1.44|
                          DCD      0x50008000

                          AREA ||i.DrvPDMA_CHSoftwareReset||, CODE, READONLY, ALIGN=2

                  DrvPDMA_CHSoftwareReset PROC
;;;408    /*---------------------------------------------------------------------------------------------------------*/
;;;409    int32_t DrvPDMA_CHSoftwareReset(E_DRVPDMA_CHANNEL_INDEX eChannel)
000000  4601              MOV      r1,r0
;;;410    {
;;;411    	PDMA_T * tPDMA;
;;;412    	    
;;;413        if (eChannel > MAX_CHANNEL_NUM  )	    						   /* Check Channel is valid */
000002  2909              CMP      r1,#9
000004  dd01              BLE      |L2.10|
;;;414            return E_DRVPDMA_ERR_PORT_INVALID;    
000006  4806              LDR      r0,|L2.32|
                  |L2.8|
;;;415    
;;;416    	tPDMA = (PDMA_T *)((uint32_t)PDMA0 + eChannel * CHANNEL_OFFSET); 
;;;417     
;;;418       	tPDMA->CSR.SW_RST = 1;											   /* Set S/W Reset Bit */
;;;419     	
;;;420        return E_SUCCESS;     
;;;421    }
000008  4770              BX       lr
                  |L2.10|
00000a  0208              LSLS     r0,r1,#8              ;416
00000c  4b05              LDR      r3,|L2.36|
00000e  18c2              ADDS     r2,r0,r3              ;416
000010  6810              LDR      r0,[r2,#0]            ;418
000012  2302              MOVS     r3,#2                 ;418
000014  4398              BICS     r0,r0,r3              ;418
000016  1c80              ADDS     r0,r0,#2              ;418
000018  6010              STR      r0,[r2,#0]            ;418
00001a  2000              MOVS     r0,#0                 ;420
00001c  e7f4              B        |L2.8|
;;;422    
                          ENDP

00001e  0000              DCW      0x0000
                  |L2.32|
                          DCD      0xffff9082
                  |L2.36|
                          DCD      0x50008000

                          AREA ||i.DrvPDMA_ClearIntFlag||, CODE, READONLY, ALIGN=2

                  DrvPDMA_ClearIntFlag PROC
;;;559    /*---------------------------------------------------------------------------------------------------------*/
;;;560    void DrvPDMA_ClearIntFlag(E_DRVPDMA_CHANNEL_INDEX eChannel,E_DRVPDMA_INT_FLAG eIntFlag)
000000  b510              PUSH     {r4,lr}
;;;561    {
;;;562        volatile uint32_t u32SFR;
;;;563    	
;;;564    	u32SFR = (uint32_t)&PDMA0->ISR + eChannel * CHANNEL_OFFSET; 
000002  0203              LSLS     r3,r0,#8
000004  4c01              LDR      r4,|L3.12|
000006  191a              ADDS     r2,r3,r4
;;;565        
;;;566        outpw(u32SFR, eIntFlag);
000008  6011              STR      r1,[r2,#0]
;;;567    }
00000a  bd10              POP      {r4,pc}
;;;568    						  
                          ENDP

                  |L3.12|
                          DCD      0x50008024

                          AREA ||i.DrvPDMA_Close||, CODE, READONLY, ALIGN=2

                  DrvPDMA_Close PROC
;;;61     /*---------------------------------------------------------------------------------------------------------*/
;;;62     void DrvPDMA_Close(void)
000000  2000              MOVS     r0,#0
;;;63     {
;;;64        	/* Disable All PDMA clock */
;;;65     	outpw(&PDMA_GCR->GCRCSR,0x0);
000002  4904              LDR      r1,|L4.20|
000004  6008              STR      r0,[r1,#0]
;;;66     	
;;;67     	/* Disable PDMA clock */
;;;68     	SYSCLK->AHBCLK.PDMA_EN  =0;	
000006  4804              LDR      r0,|L4.24|
000008  6840              LDR      r0,[r0,#4]
00000a  2102              MOVS     r1,#2
00000c  4388              BICS     r0,r0,r1
00000e  4902              LDR      r1,|L4.24|
000010  6048              STR      r0,[r1,#4]
;;;69     	
;;;70     }
000012  4770              BX       lr
;;;71     
                          ENDP

                  |L4.20|
                          DCD      0x50008f00
                  |L4.24|
                          DCD      0x50000200

                          AREA ||i.DrvPDMA_DisableInt||, CODE, READONLY, ALIGN=2

                  DrvPDMA_DisableInt PROC
;;;499    
;;;500    int32_t DrvPDMA_DisableInt(E_DRVPDMA_CHANNEL_INDEX eChannel,E_DRVPDMA_INT_ENABLE eIntSource)
000000  b510              PUSH     {r4,lr}
;;;501    {
000002  4602              MOV      r2,r0
000004  460b              MOV      r3,r1
;;;502        PDMA_T * tPDMA;
;;;503    	
;;;504        if (eChannel > MAX_CHANNEL_NUM  )	    						   /* Check Channel is valid */
000006  2a09              CMP      r2,#9
000008  dd01              BLE      |L5.14|
;;;505            return E_DRVPDMA_ERR_PORT_INVALID;    
00000a  480a              LDR      r0,|L5.52|
                  |L5.12|
;;;506    
;;;507    	tPDMA = (PDMA_T *)((uint32_t)PDMA0 + eChannel * CHANNEL_OFFSET); 
;;;508    	
;;;509    	if((eIntSource&eDRVPDMA_TABORT)!=0)					 					/* Disable Specified Interrupt */
;;;510    		tPDMA->IER.TABORT_IE = 0;
;;;511    
;;;512    	if((eIntSource&eDRVPDMA_BLKD)!=0)
;;;513    		tPDMA->IER.BLKD_IE = 0;
;;;514    
;;;515    	return E_SUCCESS; 
;;;516    }
00000c  bd10              POP      {r4,pc}
                  |L5.14|
00000e  0210              LSLS     r0,r2,#8              ;507
000010  4c09              LDR      r4,|L5.56|
000012  1901              ADDS     r1,r0,r4              ;507
000014  07d8              LSLS     r0,r3,#31             ;509
000016  0fc0              LSRS     r0,r0,#31             ;509
000018  d003              BEQ      |L5.34|
00001a  6a08              LDR      r0,[r1,#0x20]         ;510
00001c  0840              LSRS     r0,r0,#1              ;510
00001e  0040              LSLS     r0,r0,#1              ;510
000020  6208              STR      r0,[r1,#0x20]         ;510
                  |L5.34|
000022  2002              MOVS     r0,#2                 ;512
000024  4203              TST      r3,r0                 ;512
000026  d003              BEQ      |L5.48|
000028  6a08              LDR      r0,[r1,#0x20]         ;513
00002a  2402              MOVS     r4,#2                 ;513
00002c  43a0              BICS     r0,r0,r4              ;513
00002e  6208              STR      r0,[r1,#0x20]         ;513
                  |L5.48|
000030  2000              MOVS     r0,#0                 ;515
000032  e7eb              B        |L5.12|
;;;517    
                          ENDP

                  |L5.52|
                          DCD      0xffff9082
                  |L5.56|
                          DCD      0x50008000

                          AREA ||i.DrvPDMA_EnableInt||, CODE, READONLY, ALIGN=2

                  DrvPDMA_EnableInt PROC
;;;465    /*---------------------------------------------------------------------------------------------------------*/
;;;466    int32_t DrvPDMA_EnableInt(E_DRVPDMA_CHANNEL_INDEX eChannel,E_DRVPDMA_INT_ENABLE eIntSource)
000000  b530              PUSH     {r4,r5,lr}
;;;467    {
000002  4602              MOV      r2,r0
000004  460b              MOV      r3,r1
;;;468        PDMA_T * tPDMA;
;;;469    
;;;470        if (eChannel > MAX_CHANNEL_NUM  )	    						   /* Check Channel is valid */
000006  2a09              CMP      r2,#9
000008  dd01              BLE      |L6.14|
;;;471            return E_DRVPDMA_ERR_PORT_INVALID;    
00000a  480e              LDR      r0,|L6.68|
                  |L6.12|
;;;472    			
;;;473    	tPDMA = (PDMA_T *)((uint32_t)PDMA0 + eChannel * CHANNEL_OFFSET); 
;;;474    	
;;;475    	if((eIntSource&eDRVPDMA_TABORT)!=0)
;;;476    		tPDMA->IER.TABORT_IE = 1;
;;;477    
;;;478    	if((eIntSource&eDRVPDMA_BLKD)!=0)
;;;479    		tPDMA->IER.BLKD_IE = 1;
;;;480    	    
;;;481        /* Enable Specified Interrupt */
;;;482    	NVIC_EnableIRQ(PDMA_IRQn);  
;;;483       
;;;484        return E_SUCCESS;      
;;;485    }
00000c  bd30              POP      {r4,r5,pc}
                  |L6.14|
00000e  0210              LSLS     r0,r2,#8              ;473
000010  4c0d              LDR      r4,|L6.72|
000012  1901              ADDS     r1,r0,r4              ;473
000014  07d8              LSLS     r0,r3,#31             ;475
000016  0fc0              LSRS     r0,r0,#31             ;475
000018  d004              BEQ      |L6.36|
00001a  6a08              LDR      r0,[r1,#0x20]         ;476
00001c  0840              LSRS     r0,r0,#1              ;476
00001e  0040              LSLS     r0,r0,#1              ;476
000020  1c40              ADDS     r0,r0,#1              ;476
000022  6208              STR      r0,[r1,#0x20]         ;476
                  |L6.36|
000024  2002              MOVS     r0,#2                 ;478
000026  4203              TST      r3,r0                 ;478
000028  d004              BEQ      |L6.52|
00002a  6a08              LDR      r0,[r1,#0x20]         ;479
00002c  2402              MOVS     r4,#2                 ;479
00002e  43a0              BICS     r0,r0,r4              ;479
000030  1c80              ADDS     r0,r0,#2              ;479
000032  6208              STR      r0,[r1,#0x20]         ;479
                  |L6.52|
000034  201a              MOVS     r0,#0x1a              ;482
000036  2401              MOVS     r4,#1                 ;482
000038  4084              LSLS     r4,r4,r0              ;482
00003a  4d04              LDR      r5,|L6.76|
00003c  602c              STR      r4,[r5,#0]            ;482
00003e  bf00              NOP                            ;482
000040  2000              MOVS     r0,#0                 ;484
000042  e7e3              B        |L6.12|
;;;486    
                          ENDP

                  |L6.68|
                          DCD      0xffff9082
                  |L6.72|
                          DCD      0x50008000
                  |L6.76|
                          DCD      0xe000e100

                          AREA ||i.DrvPDMA_GetAPBTransferWidth||, CODE, READONLY, ALIGN=2

                  DrvPDMA_GetAPBTransferWidth PROC
;;;222    /*---------------------------------------------------------------------------------------------------------*/
;;;223    int32_t DrvPDMA_GetAPBTransferWidth(E_DRVPDMA_CHANNEL_INDEX eChannel)
000000  4601              MOV      r1,r0
;;;224    {
;;;225     	PDMA_T * tPDMA;
;;;226    	   																		/* Check Channel is valid */
;;;227        if (eChannel > MAX_CHANNEL_NUM  )	    						   /* Check Channel is valid */
000002  2909              CMP      r1,#9
000004  dd01              BLE      |L7.10|
;;;228            return E_DRVPDMA_ERR_PORT_INVALID;    
000006  4804              LDR      r0,|L7.24|
                  |L7.8|
;;;229    
;;;230    	tPDMA = (PDMA_T *)((uint32_t)PDMA0 + eChannel * CHANNEL_OFFSET); 
;;;231    
;;;232    	return (int32_t)(tPDMA->CSR.APB_TWS);            					    /* Get Transfer Length */   
;;;233    }
000008  4770              BX       lr
                  |L7.10|
00000a  0208              LSLS     r0,r1,#8              ;230
00000c  4b03              LDR      r3,|L7.28|
00000e  18c2              ADDS     r2,r0,r3              ;230
000010  6810              LDR      r0,[r2,#0]            ;232
000012  02c0              LSLS     r0,r0,#11             ;232
000014  0f80              LSRS     r0,r0,#30             ;232
000016  e7f7              B        |L7.8|
;;;234    
                          ENDP

                  |L7.24|
                          DCD      0xffff9082
                  |L7.28|
                          DCD      0x50008000

                          AREA ||i.DrvPDMA_GetCHForAPBDevice||, CODE, READONLY, ALIGN=2

                  DrvPDMA_GetCHForAPBDevice PROC
;;;338    /*---------------------------------------------------------------------------------------------------------*/
;;;339    int32_t DrvPDMA_GetCHForAPBDevice(E_DRVPDMA_APB_DEVICE eDevice,E_DRVPDMA_APB_RW eRWAPB)
000000  b500              PUSH     {lr}
;;;340    {
000002  4602              MOV      r2,r0
;;;341      
;;;342    	switch(eDevice)
000004  0013              MOVS     r3,r2
000006  f7fffffe          BL       __ARM_common_switch8
00000a  0906              DCB      0x09,0x06
00000c  121e2a35          DCB      0x12,0x1e,0x2a,0x35
000010  41624d56          DCB      0x41,0x62,0x4d,0x56
000014  6200              DCB      0x62,0x00
;;;343    	{
;;;344    		case eDRVPDMA_SPI0:
;;;345    			if(eRWAPB)	  
000016  2900              CMP      r1,#0
000018  d004              BEQ      |L8.36|
;;;346    				return PDMA_GCR->PDSSR0.SPI0_TXSEL;						 	/* Get SPI0 PDMA Channel */
00001a  482e              LDR      r0,|L8.212|
00001c  6840              LDR      r0,[r0,#4]
00001e  0600              LSLS     r0,r0,#24
000020  0f00              LSRS     r0,r0,#28
                  |L8.34|
;;;347    			else
;;;348    				return PDMA_GCR->PDSSR0.SPI0_RXSEL;
;;;349    	   		
;;;350    	   	case eDRVPDMA_SPI1:												 	/* Get SPI1 PDMA Channel */
;;;351    			if(eRWAPB)	  
;;;352    				return PDMA_GCR->PDSSR0.SPI1_TXSEL;
;;;353    			else
;;;354    				return PDMA_GCR->PDSSR0.SPI1_RXSEL;
;;;355    	   		
;;;356    		case eDRVPDMA_SPI2:												 	/* Get SPI2 PDMA Channel */
;;;357    			if(eRWAPB)	
;;;358    				return PDMA_GCR->PDSSR0.SPI2_TXSEL;
;;;359    			else
;;;360    				return PDMA_GCR->PDSSR0.SPI2_RXSEL;
;;;361    	   																	 	
;;;362    		case eDRVPDMA_SPI3:													/* Get SPI3 PDMA Channel */
;;;363    			if(eRWAPB)	
;;;364    				return PDMA_GCR->PDSSR0.SPI3_TXSEL;
;;;365    			else
;;;366    				return PDMA_GCR->PDSSR0.SPI3_RXSEL;
;;;367    	   		
;;;368    		case eDRVPDMA_UART0:											 	/* Get UART0 PDMA Channel */
;;;369    			if(eRWAPB)	
;;;370    				return PDMA_GCR->PDSSR1.UART0_TXSEL;
;;;371    			else
;;;372    				return PDMA_GCR->PDSSR1.UART0_RXSEL;
;;;373    	   		
;;;374    		case eDRVPDMA_UART1:											 	/* Get UART1 PDMA Channel */
;;;375    			if(eRWAPB)	
;;;376    				return PDMA_GCR->PDSSR1.UART1_TXSEL;
;;;377    			else
;;;378    				return PDMA_GCR->PDSSR1.UART1_RXSEL;
;;;379    	   		
;;;380    		case eDRVPDMA_ADC:													/* Get ADC PDMA Channel */
;;;381    			if(eRWAPB)	
;;;382    				return E_DRVPDMA_FALSE_INPUT;
;;;383    			else
;;;384    				return PDMA_GCR->PDSSR1.ADC_RXSEL;
;;;385    
;;;386    		case eDRVPDMA_I2S:													/* Set I2S PDMA Channel */
;;;387    			if(eRWAPB)	
;;;388    				return PDMA_GCR->PDSSR2.I2S_TXSEL;
;;;389    			else								 
;;;390    				return PDMA_GCR->PDSSR2.I2S_RXSEL;
;;;391    	   		
;;;392    		default:
;;;393    			return 	E_DRVPDMA_FALSE_INPUT;
;;;394    	}
;;;395    }
000022  bd00              POP      {pc}
                  |L8.36|
000024  482b              LDR      r0,|L8.212|
000026  6840              LDR      r0,[r0,#4]            ;348
000028  0700              LSLS     r0,r0,#28             ;348
00002a  0f00              LSRS     r0,r0,#28             ;348
00002c  e7f9              B        |L8.34|
00002e  2900              CMP      r1,#0                 ;351
000030  d004              BEQ      |L8.60|
000032  4828              LDR      r0,|L8.212|
000034  6840              LDR      r0,[r0,#4]            ;352
000036  0400              LSLS     r0,r0,#16             ;352
000038  0f00              LSRS     r0,r0,#28             ;352
00003a  e7f2              B        |L8.34|
                  |L8.60|
00003c  4825              LDR      r0,|L8.212|
00003e  6840              LDR      r0,[r0,#4]            ;354
000040  0500              LSLS     r0,r0,#20             ;354
000042  0f00              LSRS     r0,r0,#28             ;354
000044  e7ed              B        |L8.34|
000046  2900              CMP      r1,#0                 ;357
000048  d004              BEQ      |L8.84|
00004a  4822              LDR      r0,|L8.212|
00004c  6840              LDR      r0,[r0,#4]            ;358
00004e  0200              LSLS     r0,r0,#8              ;358
000050  0f00              LSRS     r0,r0,#28             ;358
000052  e7e6              B        |L8.34|
                  |L8.84|
000054  481f              LDR      r0,|L8.212|
000056  6840              LDR      r0,[r0,#4]            ;360
000058  0300              LSLS     r0,r0,#12             ;360
00005a  0f00              LSRS     r0,r0,#28             ;360
00005c  e7e1              B        |L8.34|
00005e  2900              CMP      r1,#0                 ;363
000060  d003              BEQ      |L8.106|
000062  481c              LDR      r0,|L8.212|
000064  6840              LDR      r0,[r0,#4]            ;364
000066  0f00              LSRS     r0,r0,#28             ;364
000068  e7db              B        |L8.34|
                  |L8.106|
00006a  481a              LDR      r0,|L8.212|
00006c  6840              LDR      r0,[r0,#4]            ;366
00006e  0100              LSLS     r0,r0,#4              ;366
000070  0f00              LSRS     r0,r0,#28             ;366
000072  e7d6              B        |L8.34|
000074  2900              CMP      r1,#0                 ;369
000076  d004              BEQ      |L8.130|
000078  4816              LDR      r0,|L8.212|
00007a  6880              LDR      r0,[r0,#8]            ;370
00007c  0600              LSLS     r0,r0,#24             ;370
00007e  0f00              LSRS     r0,r0,#28             ;370
000080  e7cf              B        |L8.34|
                  |L8.130|
000082  4814              LDR      r0,|L8.212|
000084  6880              LDR      r0,[r0,#8]            ;372
000086  0700              LSLS     r0,r0,#28             ;372
000088  0f00              LSRS     r0,r0,#28             ;372
00008a  e7ca              B        |L8.34|
00008c  2900              CMP      r1,#0                 ;375
00008e  d004              BEQ      |L8.154|
000090  4810              LDR      r0,|L8.212|
000092  6880              LDR      r0,[r0,#8]            ;376
000094  0400              LSLS     r0,r0,#16             ;376
000096  0f00              LSRS     r0,r0,#28             ;376
000098  e7c3              B        |L8.34|
                  |L8.154|
00009a  480e              LDR      r0,|L8.212|
00009c  6880              LDR      r0,[r0,#8]            ;378
00009e  0500              LSLS     r0,r0,#20             ;378
0000a0  0f00              LSRS     r0,r0,#28             ;378
0000a2  e7be              B        |L8.34|
0000a4  2900              CMP      r1,#0                 ;381
0000a6  d001              BEQ      |L8.172|
0000a8  480b              LDR      r0,|L8.216|
0000aa  e7ba              B        |L8.34|
                  |L8.172|
0000ac  4809              LDR      r0,|L8.212|
0000ae  6880              LDR      r0,[r0,#8]            ;384
0000b0  0100              LSLS     r0,r0,#4              ;384
0000b2  0f00              LSRS     r0,r0,#28             ;384
0000b4  e7b5              B        |L8.34|
0000b6  2900              CMP      r1,#0                 ;387
0000b8  d004              BEQ      |L8.196|
0000ba  4806              LDR      r0,|L8.212|
0000bc  6900              LDR      r0,[r0,#0x10]         ;388
0000be  0600              LSLS     r0,r0,#24             ;388
0000c0  0f00              LSRS     r0,r0,#28             ;388
0000c2  e7ae              B        |L8.34|
                  |L8.196|
0000c4  4803              LDR      r0,|L8.212|
0000c6  6900              LDR      r0,[r0,#0x10]         ;390
0000c8  0700              LSLS     r0,r0,#28             ;390
0000ca  0f00              LSRS     r0,r0,#28             ;390
0000cc  e7a9              B        |L8.34|
0000ce  4802              LDR      r0,|L8.216|
0000d0  e7a7              B        |L8.34|
;;;396    
                          ENDP

0000d2  0000              DCW      0x0000
                  |L8.212|
                          DCD      0x50008f00
                  |L8.216|
                          DCD      0xffff9081

                          AREA ||i.DrvPDMA_GetCurrentDestAddr||, CODE, READONLY, ALIGN=2

                  DrvPDMA_GetCurrentDestAddr PROC
;;;730    /*---------------------------------------------------------------------------------------------------------*/
;;;731    uint32_t DrvPDMA_GetCurrentDestAddr(E_DRVPDMA_CHANNEL_INDEX eChannel)
000000  4601              MOV      r1,r0
;;;732    {
;;;733        volatile uint32_t u32SFR;
;;;734        
;;;735    	u32SFR = (uint32_t)&PDMA0->CDAR + eChannel * CHANNEL_OFFSET;
000002  0208              LSLS     r0,r1,#8
000004  4b01              LDR      r3,|L9.12|
000006  18c2              ADDS     r2,r0,r3
;;;736        
;;;737        return inpw(u32SFR);      
000008  6810              LDR      r0,[r2,#0]
;;;738    }
00000a  4770              BX       lr
;;;739    
                          ENDP

                  |L9.12|
                          DCD      0x50008018

                          AREA ||i.DrvPDMA_GetCurrentSourceAddr||, CODE, READONLY, ALIGN=2

                  DrvPDMA_GetCurrentSourceAddr PROC
;;;711    /*---------------------------------------------------------------------------------------------------------*/
;;;712    uint32_t DrvPDMA_GetCurrentSourceAddr(E_DRVPDMA_CHANNEL_INDEX eChannel)
000000  4601              MOV      r1,r0
;;;713    {
;;;714        volatile uint32_t u32SFR;
;;;715        
;;;716        u32SFR = (uint32_t)&PDMA0->CSAR + eChannel * CHANNEL_OFFSET;    
000002  0208              LSLS     r0,r1,#8
000004  4b01              LDR      r3,|L10.12|
000006  18c2              ADDS     r2,r0,r3
;;;717    
;;;718        return inpw(u32SFR);      
000008  6810              LDR      r0,[r2,#0]
;;;719    }
00000a  4770              BX       lr
;;;720    
                          ENDP

                  |L10.12|
                          DCD      0x50008014

                          AREA ||i.DrvPDMA_GetDestAddress||, CODE, READONLY, ALIGN=2

                  DrvPDMA_GetDestAddress PROC
;;;844    /*---------------------------------------------------------------------------------------------------------*/
;;;845    uint32_t DrvPDMA_GetDestAddress(E_DRVPDMA_CHANNEL_INDEX eChannel)
000000  4601              MOV      r1,r0
;;;846    {
;;;847     	PDMA_T * tPDMA;
;;;848    	   																/* Check Channel is valid */
;;;849        if (eChannel > MAX_CHANNEL_NUM  )	    						
000002  2909              CMP      r1,#9
000004  dd01              BLE      |L11.10|
;;;850            return E_DRVPDMA_ERR_PORT_INVALID;    
000006  4803              LDR      r0,|L11.20|
                  |L11.8|
;;;851    
;;;852    	tPDMA = (PDMA_T *)((uint32_t)PDMA0 + eChannel * CHANNEL_OFFSET); 
;;;853    
;;;854    	return (uint32_t)(tPDMA->DAR);            					    /* Get PDMA Channelx Destination Address  */   
;;;855    }
000008  4770              BX       lr
                  |L11.10|
00000a  0208              LSLS     r0,r1,#8              ;852
00000c  4b02              LDR      r3,|L11.24|
00000e  18c2              ADDS     r2,r0,r3              ;852
000010  6890              LDR      r0,[r2,#8]            ;854
000012  e7f9              B        |L11.8|
;;;856    
                          ENDP

                  |L11.20|
                          DCD      0xffff9082
                  |L11.24|
                          DCD      0x50008000

                          AREA ||i.DrvPDMA_GetInternalBufPointer||, CODE, READONLY, ALIGN=2

                  DrvPDMA_GetInternalBufPointer PROC
;;;598    /*---------------------------------------------------------------------------------------------------------*/
;;;599    uint32_t DrvPDMA_GetInternalBufPointer(E_DRVPDMA_CHANNEL_INDEX eChannel)
000000  4601              MOV      r1,r0
;;;600    {
;;;601     	PDMA_T * tPDMA;
;;;602        
;;;603        if (eChannel > MAX_CHANNEL_NUM  )	    						   /* Check Channel is valid */
000002  2909              CMP      r1,#9
000004  dd01              BLE      |L12.10|
;;;604            return E_DRVPDMA_ERR_PORT_INVALID;    
000006  4803              LDR      r0,|L12.20|
                  |L12.8|
;;;605       
;;;606    	tPDMA = (PDMA_T *)((uint32_t)PDMA0 + eChannel * CHANNEL_OFFSET); 
;;;607    
;;;608    	return (uint32_t)(tPDMA->u32POINT);
;;;609    }
000008  4770              BX       lr
                  |L12.10|
00000a  0208              LSLS     r0,r1,#8              ;606
00000c  4b02              LDR      r3,|L12.24|
00000e  18c2              ADDS     r2,r0,r3              ;606
000010  6910              LDR      r0,[r2,#0x10]         ;608
000012  e7f9              B        |L12.8|
;;;610    
                          ENDP

                  |L12.20|
                          DCD      0xffff9082
                  |L12.24|
                          DCD      0x50008000

                          AREA ||i.DrvPDMA_GetRemainTransferCount||, CODE, READONLY, ALIGN=2

                  DrvPDMA_GetRemainTransferCount PROC
;;;749    /*---------------------------------------------------------------------------------------------------------*/
;;;750    uint32_t DrvPDMA_GetRemainTransferCount(E_DRVPDMA_CHANNEL_INDEX eChannel)
000000  4601              MOV      r1,r0
;;;751    {
;;;752        volatile uint32_t u32SFR;
;;;753        
;;;754        u32SFR = (uint32_t)&PDMA0->CBCR + eChannel * CHANNEL_OFFSET;
000002  0208              LSLS     r0,r1,#8
000004  4b01              LDR      r3,|L13.12|
000006  18c2              ADDS     r2,r0,r3
;;;755        
;;;756    	return inpw(u32SFR);   
000008  6810              LDR      r0,[r2,#0]
;;;757    }
00000a  4770              BX       lr
;;;758    
                          ENDP

                  |L13.12|
                          DCD      0x5000801c

                          AREA ||i.DrvPDMA_GetSharedBufData||, CODE, READONLY, ALIGN=2

                  DrvPDMA_GetSharedBufData PROC
;;;620    /*---------------------------------------------------------------------------------------------------------*/
;;;621    uint32_t DrvPDMA_GetSharedBufData(E_DRVPDMA_CHANNEL_INDEX eChannel)
000000  4601              MOV      r1,r0
;;;622    {
;;;623        volatile uint32_t u32SFR;
;;;624        
;;;625        u32SFR = (uint32_t)&PDMA0->SBUF + eChannel * CHANNEL_OFFSET;  
000002  0208              LSLS     r0,r1,#8
000004  4b01              LDR      r3,|L14.12|
000006  18c2              ADDS     r2,r0,r3
;;;626        
;;;627        return inpw(u32SFR);
000008  6810              LDR      r0,[r2,#0]
;;;628    }
00000a  4770              BX       lr
;;;629    
                          ENDP

                  |L14.12|
                          DCD      0x50008080

                          AREA ||i.DrvPDMA_GetSourceAddress||, CODE, READONLY, ALIGN=2

                  DrvPDMA_GetSourceAddress PROC
;;;795    /*---------------------------------------------------------------------------------------------------------*/
;;;796    uint32_t DrvPDMA_GetSourceAddress(E_DRVPDMA_CHANNEL_INDEX eChannel)
000000  4601              MOV      r1,r0
;;;797    {
;;;798     	PDMA_T * tPDMA;
;;;799    	   																/* Check Channel is valid */
;;;800        if (eChannel > MAX_CHANNEL_NUM  )	    						
000002  2909              CMP      r1,#9
000004  dd01              BLE      |L15.10|
;;;801            return E_DRVPDMA_ERR_PORT_INVALID;    
000006  4803              LDR      r0,|L15.20|
                  |L15.8|
;;;802    
;;;803    	tPDMA = (PDMA_T *)((uint32_t)PDMA0 + eChannel * CHANNEL_OFFSET); 
;;;804    
;;;805    	return (uint32_t)(tPDMA->SAR);            					    /* Get PDMA Channelx Source Address  */   
;;;806    }
000008  4770              BX       lr
                  |L15.10|
00000a  0208              LSLS     r0,r1,#8              ;803
00000c  4b02              LDR      r3,|L15.24|
00000e  18c2              ADDS     r2,r0,r3              ;803
000010  6850              LDR      r0,[r2,#4]            ;805
000012  e7f9              B        |L15.8|
;;;807    
                          ENDP

                  |L15.20|
                          DCD      0xffff9082
                  |L15.24|
                          DCD      0x50008000

                          AREA ||i.DrvPDMA_GetTransferLength||, CODE, READONLY, ALIGN=2

                  DrvPDMA_GetTransferLength PROC
;;;165    /*---------------------------------------------------------------------------------------------------------*/
;;;166    int32_t DrvPDMA_GetTransferLength(E_DRVPDMA_CHANNEL_INDEX eChannel, uint32_t* pu32TransferLength)
000000  b510              PUSH     {r4,lr}
;;;167    {
000002  4602              MOV      r2,r0
;;;168    	PDMA_T * tPDMA;
;;;169        
;;;170        if (eChannel > MAX_CHANNEL_NUM  )	    						   /* Check Channel is valid */
000004  2a09              CMP      r2,#9
000006  dd01              BLE      |L16.12|
;;;171            return E_DRVPDMA_ERR_PORT_INVALID;    
000008  4804              LDR      r0,|L16.28|
                  |L16.10|
;;;172        
;;;173    	tPDMA = (PDMA_T *)((uint32_t)PDMA0 + eChannel * CHANNEL_OFFSET); 
;;;174    	
;;;175    	*pu32TransferLength = tPDMA->u32BCR;      								    /* Get Transfer Length */
;;;176    
;;;177        return E_SUCCESS;       
;;;178    }
00000a  bd10              POP      {r4,pc}
                  |L16.12|
00000c  0210              LSLS     r0,r2,#8              ;173
00000e  4c04              LDR      r4,|L16.32|
000010  1903              ADDS     r3,r0,r4              ;173
000012  68d8              LDR      r0,[r3,#0xc]          ;175
000014  6008              STR      r0,[r1,#0]            ;175
000016  2000              MOVS     r0,#0                 ;177
000018  e7f7              B        |L16.10|
;;;179    
                          ENDP

00001a  0000              DCW      0x0000
                  |L16.28|
                          DCD      0xffff9082
                  |L16.32|
                          DCD      0x50008000

                          AREA ||i.DrvPDMA_GetVersion||, CODE, READONLY, ALIGN=2

                  DrvPDMA_GetVersion PROC
;;;866    /*---------------------------------------------------------------------------------------------------------*/
;;;867    int32_t DrvPDMA_GetVersion(void)
000000  4800              LDR      r0,|L17.4|
;;;868    {
;;;869    	return DRVPDMA_VERSION_NUM;
;;;870    }
000002  4770              BX       lr
;;;871    
                          ENDP

                  |L17.4|
                          DCD      0x00010202

                          AREA ||i.DrvPDMA_Init||, CODE, READONLY, ALIGN=2

                  DrvPDMA_Init PROC
;;;45     /*---------------------------------------------------------------------------------------------------------*/
;;;46     void DrvPDMA_Init(void)
000000  4803              LDR      r0,|L18.16|
;;;47     {
;;;48     	/* Enable PDMA Clock */
;;;49     	SYSCLK->AHBCLK.PDMA_EN  =1;		 	
000002  6840              LDR      r0,[r0,#4]
000004  2102              MOVS     r1,#2
000006  4388              BICS     r0,r0,r1
000008  1c80              ADDS     r0,r0,#2
00000a  4901              LDR      r1,|L18.16|
00000c  6048              STR      r0,[r1,#4]
;;;50     }
00000e  4770              BX       lr
;;;51     
                          ENDP

                  |L18.16|
                          DCD      0x50000200

                          AREA ||i.DrvPDMA_InstallCallBack||, CODE, READONLY, ALIGN=2

                  DrvPDMA_InstallCallBack PROC
;;;685    /*---------------------------------------------------------------------------------------------------------*/
;;;686    int32_t DrvPDMA_InstallCallBack(
000000  b510              PUSH     {r4,lr}
;;;687    	E_DRVPDMA_CHANNEL_INDEX eChannel, 
;;;688        E_DRVPDMA_INT_ENABLE eIntSource,
;;;689    	PFN_DRVPDMA_CALLBACK pfncallback   
;;;690    )
;;;691    {
000002  4603              MOV      r3,r0
;;;692      
;;;693        if (eChannel > MAX_CHANNEL_NUM  )	    						   /* Check Channel is valid */
000004  2b09              CMP      r3,#9
000006  dd01              BLE      |L19.12|
;;;694            return E_DRVPDMA_ERR_PORT_INVALID;    
000008  4805              LDR      r0,|L19.32|
                  |L19.10|
;;;695    
;;;696    	g_pfnPDMACallback[eChannel][eIntSource>>1] = pfncallback;	       /* Install Callback funtion */
;;;697    	
;;;698        return E_SUCCESS;      
;;;699    }
00000a  bd10              POP      {r4,pc}
                  |L19.12|
00000c  200c              MOVS     r0,#0xc               ;696
00000e  4358              MULS     r0,r3,r0              ;696
000010  4c04              LDR      r4,|L19.36|
000012  1900              ADDS     r0,r0,r4              ;696
000014  104c              ASRS     r4,r1,#1              ;696
000016  00a4              LSLS     r4,r4,#2              ;696
000018  5102              STR      r2,[r0,r4]            ;696
00001a  2000              MOVS     r0,#0                 ;698
00001c  e7f5              B        |L19.10|
;;;700    
                          ENDP

00001e  0000              DCW      0x0000
                  |L19.32|
                          DCD      0xffff9082
                  |L19.36|
                          DCD      g_pfnPDMACallback

                          AREA ||i.DrvPDMA_IsCHBusy||, CODE, READONLY, ALIGN=2

                  DrvPDMA_IsCHBusy PROC
;;;137    /*---------------------------------------------------------------------------------------------------------*/
;;;138    int32_t DrvPDMA_IsCHBusy(E_DRVPDMA_CHANNEL_INDEX eChannel)
000000  4601              MOV      r1,r0
;;;139    {
;;;140      	PDMA_T * tPDMA;
;;;141        
;;;142        if (eChannel > MAX_CHANNEL_NUM  )	    						       /* Check Channel is valid */
000002  2909              CMP      r1,#9
000004  dd01              BLE      |L20.10|
;;;143            return E_DRVPDMA_ERR_PORT_INVALID;    
000006  4804              LDR      r0,|L20.24|
                  |L20.8|
;;;144     
;;;145     	tPDMA = (PDMA_T *)((uint32_t)PDMA0 + eChannel * CHANNEL_OFFSET); 
;;;146    
;;;147    	return (tPDMA->CSR.TRIG_EN)?TRUE:FALSE;								   /* Check Channel is triggering or not */
;;;148    }
000008  4770              BX       lr
                  |L20.10|
00000a  0208              LSLS     r0,r1,#8              ;145
00000c  4b03              LDR      r3,|L20.28|
00000e  18c2              ADDS     r2,r0,r3              ;145
000010  6810              LDR      r0,[r2,#0]            ;147
000012  0200              LSLS     r0,r0,#8              ;147
000014  0fc0              LSRS     r0,r0,#31             ;147
000016  e7f7              B        |L20.8|
;;;149    
                          ENDP

                  |L20.24|
                          DCD      0xffff9082
                  |L20.28|
                          DCD      0x50008000

                          AREA ||i.DrvPDMA_IsIntEnabled||, CODE, READONLY, ALIGN=2

                  DrvPDMA_IsIntEnabled PROC
;;;529    /*---------------------------------------------------------------------------------------------------------*/
;;;530    int32_t	DrvPDMA_IsIntEnabled(E_DRVPDMA_CHANNEL_INDEX eChannel,E_DRVPDMA_INT_ENABLE eIntSource )
000000  b510              PUSH     {r4,lr}
;;;531    {
000002  4603              MOV      r3,r0
000004  460a              MOV      r2,r1
;;;532    	PDMA_T * tPDMA;
;;;533    
;;;534    	tPDMA = (PDMA_T *)((uint32_t)PDMA0 + eChannel * CHANNEL_OFFSET); 
000006  0218              LSLS     r0,r3,#8
000008  4c0a              LDR      r4,|L21.52|
00000a  1901              ADDS     r1,r0,r4
;;;535    	
;;;536    	if(eIntSource==eDRVPDMA_TABORT)
00000c  2a01              CMP      r2,#1
00000e  d105              BNE      |L21.28|
;;;537    	{
;;;538    	  if(tPDMA->IER.TABORT_IE==1)
000010  6a08              LDR      r0,[r1,#0x20]
000012  4010              ANDS     r0,r0,r2
000014  d002              BEQ      |L21.28|
;;;539            return (tPDMA->IER.TABORT_IE)?TRUE:FALSE;
000016  6a08              LDR      r0,[r1,#0x20]
000018  4010              ANDS     r0,r0,r2
                  |L21.26|
;;;540    	}
;;;541    	if(eIntSource==eDRVPDMA_BLKD)		   
;;;542    	{
;;;543    	  if(tPDMA->IER.BLKD_IE==1)
;;;544    	    return (tPDMA->IER.BLKD_IE)?TRUE:FALSE;
;;;545    	}
;;;546    	return 0;
;;;547    }
00001a  bd10              POP      {r4,pc}
                  |L21.28|
00001c  2a02              CMP      r2,#2                 ;541
00001e  d107              BNE      |L21.48|
000020  6a08              LDR      r0,[r1,#0x20]         ;543
000022  0780              LSLS     r0,r0,#30             ;543
000024  0fc0              LSRS     r0,r0,#31             ;543
000026  d003              BEQ      |L21.48|
000028  6a08              LDR      r0,[r1,#0x20]         ;544
00002a  0780              LSLS     r0,r0,#30             ;544
00002c  0fc0              LSRS     r0,r0,#31             ;544
00002e  e7f4              B        |L21.26|
                  |L21.48|
000030  2000              MOVS     r0,#0                 ;546
000032  e7f2              B        |L21.26|
;;;548    
                          ENDP

                  |L21.52|
                          DCD      0x50008000

                          AREA ||i.DrvPDMA_Open||, CODE, READONLY, ALIGN=2

                  DrvPDMA_Open PROC
;;;93     /*---------------------------------------------------------------------------------------------------------*/
;;;94     int32_t DrvPDMA_Open(E_DRVPDMA_CHANNEL_INDEX eChannel,STR_PDMA_T *sParam)
000000  b530              PUSH     {r4,r5,lr}
;;;95     {						  
000002  4603              MOV      r3,r0
000004  460a              MOV      r2,r1
;;;96     	PDMA_T * tPDMA;
;;;97     
;;;98     	SYSCLK->AHBCLK.PDMA_EN  =1;	
000006  4824              LDR      r0,|L22.152|
000008  6840              LDR      r0,[r0,#4]
00000a  2402              MOVS     r4,#2
00000c  43a0              BICS     r0,r0,r4
00000e  1c80              ADDS     r0,r0,#2
000010  4c21              LDR      r4,|L22.152|
000012  6060              STR      r0,[r4,#4]
;;;99         /*-----------------------------------------------------------------------------------------------------*/
;;;100        /* Check PDMA channel                                                                                  */
;;;101        /*-----------------------------------------------------------------------------------------------------*/
;;;102        if (eChannel > eDRVPDMA_CHANNEL_8)
000014  2b08              CMP      r3,#8
000016  dd01              BLE      |L22.28|
;;;103        {
;;;104    		return E_DRVPDMA_ERR_PORT_INVALID;
000018  4820              LDR      r0,|L22.156|
                  |L22.26|
;;;105        }
;;;106    
;;;107    	tPDMA = (PDMA_T *)((uint32_t)PDMA0 + eChannel * CHANNEL_OFFSET); 
;;;108    
;;;109    	/*-----------------------------------------------------------------------------------------------------*/
;;;110        /* Set PDMA settings                                                                                   */
;;;111        /*-----------------------------------------------------------------------------------------------------*/
;;;112    	outpw(&PDMA_GCR->GCRCSR,inpw(&PDMA_GCR->GCRCSR) | 1<<(eChannel+8) );     	/* Enable Channel Clock */
;;;113    
;;;114     
;;;115     	tPDMA->CSR.PDMACEN 	= 1;   													/* Enable PDMA Channel */
;;;116    	tPDMA->SAR	 		= sParam->sSrcCtrl.u32Addr;								/* Set Source Address */
;;;117    	tPDMA->DAR 			= sParam->sDestCtrl.u32Addr;	    					/* Set Destination Address */
;;;118    	tPDMA->CSR.SAD_SEL 	= sParam->sSrcCtrl.eAddrDirection; 
;;;119    	tPDMA->CSR.DAD_SEL 	= sParam->sDestCtrl.eAddrDirection;
;;;120    	tPDMA->CSR.APB_TWS 	= sParam->u8TransWidth;
;;;121    	tPDMA->CSR.MODE_SEL = sParam->u8Mode;										/* Set Control Register */
;;;122    	tPDMA->u32BCR 			= sParam->i32ByteCnt;								    /* Set Byte Count Register */
;;;123    	return E_SUCCESS;    
;;;124    }
00001a  bd30              POP      {r4,r5,pc}
                  |L22.28|
00001c  0218              LSLS     r0,r3,#8              ;107
00001e  4c20              LDR      r4,|L22.160|
000020  1901              ADDS     r1,r0,r4              ;107
000022  4820              LDR      r0,|L22.164|
000024  6800              LDR      r0,[r0,#0]            ;112
000026  461c              MOV      r4,r3                 ;112
000028  3408              ADDS     r4,r4,#8              ;112
00002a  2501              MOVS     r5,#1                 ;112
00002c  40a5              LSLS     r5,r5,r4              ;112
00002e  4328              ORRS     r0,r0,r5              ;112
000030  4c1c              LDR      r4,|L22.164|
000032  6020              STR      r0,[r4,#0]            ;112
000034  6808              LDR      r0,[r1,#0]            ;115
000036  0840              LSRS     r0,r0,#1              ;115
000038  0040              LSLS     r0,r0,#1              ;115
00003a  1c40              ADDS     r0,r0,#1              ;115
00003c  6008              STR      r0,[r1,#0]            ;115
00003e  6810              LDR      r0,[r2,#0]            ;116
000040  6048              STR      r0,[r1,#4]            ;116
000042  6890              LDR      r0,[r2,#8]            ;117
000044  6088              STR      r0,[r1,#8]            ;117
000046  6808              LDR      r0,[r1,#0]            ;118
000048  2430              MOVS     r4,#0x30              ;118
00004a  43a0              BICS     r0,r0,r4              ;118
00004c  7914              LDRB     r4,[r2,#4]            ;118
00004e  0124              LSLS     r4,r4,#4              ;118
000050  2530              MOVS     r5,#0x30              ;118
000052  402c              ANDS     r4,r4,r5              ;118
000054  4320              ORRS     r0,r0,r4              ;118
000056  6008              STR      r0,[r1,#0]            ;118
000058  6808              LDR      r0,[r1,#0]            ;119
00005a  24c0              MOVS     r4,#0xc0              ;119
00005c  43a0              BICS     r0,r0,r4              ;119
00005e  7b14              LDRB     r4,[r2,#0xc]          ;119
000060  01a4              LSLS     r4,r4,#6              ;119
000062  25c0              MOVS     r5,#0xc0              ;119
000064  402c              ANDS     r4,r4,r5              ;119
000066  4320              ORRS     r0,r0,r4              ;119
000068  6008              STR      r0,[r1,#0]            ;119
00006a  6808              LDR      r0,[r1,#0]            ;120
00006c  036c              LSLS     r4,r5,#13             ;120
00006e  43a0              BICS     r0,r0,r4              ;120
000070  7c14              LDRB     r4,[r2,#0x10]         ;120
000072  04e4              LSLS     r4,r4,#19             ;120
000074  036d              LSLS     r5,r5,#13             ;120
000076  402c              ANDS     r4,r4,r5              ;120
000078  4320              ORRS     r0,r0,r4              ;120
00007a  6008              STR      r0,[r1,#0]            ;120
00007c  6808              LDR      r0,[r1,#0]            ;121
00007e  240c              MOVS     r4,#0xc               ;121
000080  43a0              BICS     r0,r0,r4              ;121
000082  7c54              LDRB     r4,[r2,#0x11]         ;121
000084  00a4              LSLS     r4,r4,#2              ;121
000086  250c              MOVS     r5,#0xc               ;121
000088  402c              ANDS     r4,r4,r5              ;121
00008a  4320              ORRS     r0,r0,r4              ;121
00008c  6008              STR      r0,[r1,#0]            ;121
00008e  6950              LDR      r0,[r2,#0x14]         ;122
000090  60c8              STR      r0,[r1,#0xc]          ;122
000092  2000              MOVS     r0,#0                 ;123
000094  e7c1              B        |L22.26|
;;;125    
                          ENDP

000096  0000              DCW      0x0000
                  |L22.152|
                          DCD      0x50000200
                  |L22.156|
                          DCD      0xffff9082
                  |L22.160|
                          DCD      0x50008000
                  |L22.164|
                          DCD      0x50008f00

                          AREA ||i.DrvPDMA_PollInt||, CODE, READONLY, ALIGN=2

                  DrvPDMA_PollInt PROC
;;;581    /*---------------------------------------------------------------------------------------------------------*/
;;;582    int32_t	DrvPDMA_PollInt(E_DRVPDMA_CHANNEL_INDEX eChannel,E_DRVPDMA_INT_FLAG eIntFlag)
000000  b510              PUSH     {r4,lr}
;;;583    {
000002  4602              MOV      r2,r0
;;;584        volatile uint32_t u32SFR;
;;;585        
;;;586        u32SFR = (uint32_t) & PDMA0->ISR + eChannel * CHANNEL_OFFSET; 
000004  0210              LSLS     r0,r2,#8
000006  4c02              LDR      r4,|L23.16|
000008  1903              ADDS     r3,r0,r4
;;;587        return inpw(u32SFR) & eIntFlag;
00000a  6818              LDR      r0,[r3,#0]
00000c  4008              ANDS     r0,r0,r1
;;;588    }
00000e  bd10              POP      {r4,pc}
;;;589    /*---------------------------------------------------------------------------------------------------------*/
                          ENDP

                  |L23.16|
                          DCD      0x50008024

                          AREA ||i.DrvPDMA_SetAPBTransferWidth||, CODE, READONLY, ALIGN=2

                  DrvPDMA_SetAPBTransferWidth PROC
;;;194    /*---------------------------------------------------------------------------------------------------------*/
;;;195    int32_t	DrvPDMA_SetAPBTransferWidth(E_DRVPDMA_CHANNEL_INDEX eChannel,E_DRVPDMA_TRANSFER_WIDTH eTransferWidth)
000000  b530              PUSH     {r4,r5,lr}
;;;196    {
000002  4602              MOV      r2,r0
000004  460b              MOV      r3,r1
;;;197    	PDMA_T * tPDMA;
;;;198    	    
;;;199        if (eChannel > MAX_CHANNEL_NUM  )	    						   /* Check Channel is valid */
000006  2a09              CMP      r2,#9
000008  dd01              BLE      |L24.14|
;;;200            return E_DRVPDMA_ERR_PORT_INVALID;    
00000a  4808              LDR      r0,|L24.44|
                  |L24.12|
;;;201        
;;;202    	tPDMA = (PDMA_T *)((uint32_t)PDMA0 + eChannel * CHANNEL_OFFSET); 
;;;203    																			
;;;204    	tPDMA->CSR.APB_TWS = eTransferWidth;	        						/* Set PDMA Transfer Length */
;;;205    
;;;206        return E_SUCCESS;     													
;;;207    }
00000c  bd30              POP      {r4,r5,pc}
                  |L24.14|
00000e  0210              LSLS     r0,r2,#8              ;202
000010  4c07              LDR      r4,|L24.48|
000012  1901              ADDS     r1,r0,r4              ;202
000014  6808              LDR      r0,[r1,#0]            ;204
000016  2403              MOVS     r4,#3                 ;204
000018  04e4              LSLS     r4,r4,#19             ;204
00001a  43a0              BICS     r0,r0,r4              ;204
00001c  04dc              LSLS     r4,r3,#19             ;204
00001e  2503              MOVS     r5,#3                 ;204
000020  04ed              LSLS     r5,r5,#19             ;204
000022  402c              ANDS     r4,r4,r5              ;204
000024  4320              ORRS     r0,r0,r4              ;204
000026  6008              STR      r0,[r1,#0]            ;204
000028  2000              MOVS     r0,#0                 ;206
00002a  e7ef              B        |L24.12|
;;;208    
                          ENDP

                  |L24.44|
                          DCD      0xffff9082
                  |L24.48|
                          DCD      0x50008000

                          AREA ||i.DrvPDMA_SetCHForAPBDevice||, CODE, READONLY, ALIGN=2

                  DrvPDMA_SetCHForAPBDevice PROC
;;;252    /*---------------------------------------------------------------------------------------------------------*/
;;;253    int32_t	DrvPDMA_SetCHForAPBDevice(
000000  b530              PUSH     {r4,r5,lr}
;;;254        E_DRVPDMA_CHANNEL_INDEX eChannel, 
;;;255        E_DRVPDMA_APB_DEVICE 	eDevice,
;;;256        E_DRVPDMA_APB_RW 		eRWAPB    
;;;257    )
;;;258    {  
000002  4604              MOV      r4,r0
;;;259        if (eChannel > MAX_CHANNEL_NUM  )	    						   /* Check Channel is valid */
000004  2c09              CMP      r4,#9
000006  dd01              BLE      |L25.12|
;;;260            return E_DRVPDMA_ERR_PORT_INVALID;    
000008  486a              LDR      r0,|L25.436|
                  |L25.10|
;;;261       
;;;262    	switch(eDevice)
;;;263    	{
;;;264    		case eDRVPDMA_SPI0:												    /* Set SPI0 PDMA Channel */
;;;265    			if(eRWAPB)	  
;;;266    				PDMA_GCR->PDSSR0.SPI0_TXSEL	=	eChannel;
;;;267    			else
;;;268    				PDMA_GCR->PDSSR0.SPI0_RXSEL	=	eChannel;
;;;269    	   		break;
;;;270    
;;;271    	   	case eDRVPDMA_SPI1:													/* Set SPI1 PDMA Channel */
;;;272    			if(eRWAPB)	  
;;;273    				PDMA_GCR->PDSSR0.SPI1_TXSEL	=	eChannel;
;;;274    			else
;;;275    				PDMA_GCR->PDSSR0.SPI1_RXSEL	=	eChannel;
;;;276    	   		break;
;;;277    																			
;;;278    		case eDRVPDMA_SPI2:													/* Set SPI2 PDMA Channel */
;;;279    			if(eRWAPB)	
;;;280    				PDMA_GCR->PDSSR0.SPI2_TXSEL	=	eChannel;
;;;281    			else
;;;282    				PDMA_GCR->PDSSR0.SPI2_RXSEL	=	eChannel;
;;;283    	   		break;
;;;284    																		   	
;;;285    		case eDRVPDMA_SPI3:													/* Set SPI3 PDMA Channel */
;;;286    			if(eRWAPB)	
;;;287    				PDMA_GCR->PDSSR0.SPI3_TXSEL	=	eChannel;
;;;288    			else
;;;289    				PDMA_GCR->PDSSR0.SPI3_RXSEL	=	eChannel;
;;;290    	   		break;
;;;291    
;;;292    		case eDRVPDMA_UART0:											   	/* Set UART0 PDMA Channel */
;;;293    			if(eRWAPB)	
;;;294    				PDMA_GCR->PDSSR1.UART0_TXSEL	=	eChannel;
;;;295    			else
;;;296    				PDMA_GCR->PDSSR1.UART0_RXSEL	=	eChannel;
;;;297    	   		break;
;;;298    		case eDRVPDMA_UART1:												/* Set UART1 PDMA Channel */
;;;299    			if(eRWAPB)	
;;;300    				PDMA_GCR->PDSSR1.UART1_TXSEL	=	eChannel;
;;;301    			else
;;;302    				PDMA_GCR->PDSSR1.UART1_RXSEL	=	eChannel;
;;;303    	   		break;
;;;304    		case eDRVPDMA_ADC:													/* Set ADC PDMA Channel */
;;;305    			if(eRWAPB)	
;;;306    				return 	E_DRVPDMA_FALSE_INPUT;
;;;307    			else
;;;308    				PDMA_GCR->PDSSR1.ADC_RXSEL	=	eChannel;
;;;309    	   		break;
;;;310    		case eDRVPDMA_I2S:													/* Set I2S PDMA Channel */
;;;311    			if(eRWAPB)	
;;;312    				PDMA_GCR->PDSSR2.I2S_TXSEL	=	eChannel;
;;;313    			else
;;;314    				PDMA_GCR->PDSSR2.I2S_RXSEL	=	eChannel;
;;;315    	   		break;
;;;316    		default:
;;;317    			return 	E_DRVPDMA_FALSE_INPUT;
;;;318    	}
;;;319     
;;;320        return E_SUCCESS;  
;;;321    }
00000a  bd30              POP      {r4,r5,pc}
                  |L25.12|
00000c  000b              MOVS     r3,r1                 ;262
00000e  f7fffffe          BL       __ARM_common_switch8
000012  0906              DCB      0x09,0x06
000014  1d39556f          DCB      0x1d,0x39,0x55,0x6f
000018  86cba2b4          DCB      0x86,0xcb,0xa2,0xb4
00001c  cb00              DCB      0xcb,0x00
00001e  2a00              CMP      r2,#0                 ;265
000020  d00a              BEQ      |L25.56|
000022  4865              LDR      r0,|L25.440|
000024  6840              LDR      r0,[r0,#4]            ;266
000026  23f0              MOVS     r3,#0xf0              ;266
000028  4398              BICS     r0,r0,r3              ;266
00002a  0123              LSLS     r3,r4,#4              ;266
00002c  25f0              MOVS     r5,#0xf0              ;266
00002e  402b              ANDS     r3,r3,r5              ;266
000030  4318              ORRS     r0,r0,r3              ;266
000032  4b61              LDR      r3,|L25.440|
000034  6058              STR      r0,[r3,#4]            ;266
000036  e008              B        |L25.74|
                  |L25.56|
000038  485f              LDR      r0,|L25.440|
00003a  6840              LDR      r0,[r0,#4]            ;268
00003c  0900              LSRS     r0,r0,#4              ;268
00003e  0100              LSLS     r0,r0,#4              ;268
000040  0723              LSLS     r3,r4,#28             ;268
000042  0f1b              LSRS     r3,r3,#28             ;268
000044  4318              ORRS     r0,r0,r3              ;268
000046  4b5c              LDR      r3,|L25.440|
000048  6058              STR      r0,[r3,#4]            ;268
                  |L25.74|
00004a  e0b0              B        |L25.430|
00004c  2a00              CMP      r2,#0                 ;272
00004e  d00c              BEQ      |L25.106|
000050  4859              LDR      r0,|L25.440|
000052  6840              LDR      r0,[r0,#4]            ;273
000054  230f              MOVS     r3,#0xf               ;273
000056  031b              LSLS     r3,r3,#12             ;273
000058  4398              BICS     r0,r0,r3              ;273
00005a  0323              LSLS     r3,r4,#12             ;273
00005c  250f              MOVS     r5,#0xf               ;273
00005e  032d              LSLS     r5,r5,#12             ;273
000060  402b              ANDS     r3,r3,r5              ;273
000062  4318              ORRS     r0,r0,r3              ;273
000064  4b54              LDR      r3,|L25.440|
000066  6058              STR      r0,[r3,#4]            ;273
000068  e00b              B        |L25.130|
                  |L25.106|
00006a  4853              LDR      r0,|L25.440|
00006c  6840              LDR      r0,[r0,#4]            ;275
00006e  230f              MOVS     r3,#0xf               ;275
000070  021b              LSLS     r3,r3,#8              ;275
000072  4398              BICS     r0,r0,r3              ;275
000074  0223              LSLS     r3,r4,#8              ;275
000076  250f              MOVS     r5,#0xf               ;275
000078  022d              LSLS     r5,r5,#8              ;275
00007a  402b              ANDS     r3,r3,r5              ;275
00007c  4318              ORRS     r0,r0,r3              ;275
00007e  4b4e              LDR      r3,|L25.440|
000080  6058              STR      r0,[r3,#4]            ;275
                  |L25.130|
000082  e094              B        |L25.430|
000084  2a00              CMP      r2,#0                 ;279
000086  d00c              BEQ      |L25.162|
000088  484b              LDR      r0,|L25.440|
00008a  6840              LDR      r0,[r0,#4]            ;280
00008c  230f              MOVS     r3,#0xf               ;280
00008e  051b              LSLS     r3,r3,#20             ;280
000090  4398              BICS     r0,r0,r3              ;280
000092  0523              LSLS     r3,r4,#20             ;280
000094  250f              MOVS     r5,#0xf               ;280
000096  052d              LSLS     r5,r5,#20             ;280
000098  402b              ANDS     r3,r3,r5              ;280
00009a  4318              ORRS     r0,r0,r3              ;280
00009c  4b46              LDR      r3,|L25.440|
00009e  6058              STR      r0,[r3,#4]            ;280
0000a0  e00b              B        |L25.186|
                  |L25.162|
0000a2  4845              LDR      r0,|L25.440|
0000a4  6840              LDR      r0,[r0,#4]            ;282
0000a6  230f              MOVS     r3,#0xf               ;282
0000a8  041b              LSLS     r3,r3,#16             ;282
0000aa  4398              BICS     r0,r0,r3              ;282
0000ac  0423              LSLS     r3,r4,#16             ;282
0000ae  250f              MOVS     r5,#0xf               ;282
0000b0  042d              LSLS     r5,r5,#16             ;282
0000b2  402b              ANDS     r3,r3,r5              ;282
0000b4  4318              ORRS     r0,r0,r3              ;282
0000b6  4b40              LDR      r3,|L25.440|
0000b8  6058              STR      r0,[r3,#4]            ;282
                  |L25.186|
0000ba  e078              B        |L25.430|
0000bc  2a00              CMP      r2,#0                 ;286
0000be  d00a              BEQ      |L25.214|
0000c0  483d              LDR      r0,|L25.440|
0000c2  6840              LDR      r0,[r0,#4]            ;287
0000c4  0100              LSLS     r0,r0,#4              ;287
0000c6  0900              LSRS     r0,r0,#4              ;287
0000c8  0723              LSLS     r3,r4,#28             ;287
0000ca  0f1b              LSRS     r3,r3,#28             ;287
0000cc  071b              LSLS     r3,r3,#28             ;287
0000ce  4318              ORRS     r0,r0,r3              ;287
0000d0  4b39              LDR      r3,|L25.440|
0000d2  6058              STR      r0,[r3,#4]            ;287
0000d4  e00b              B        |L25.238|
                  |L25.214|
0000d6  4838              LDR      r0,|L25.440|
0000d8  6840              LDR      r0,[r0,#4]            ;289
0000da  230f              MOVS     r3,#0xf               ;289
0000dc  061b              LSLS     r3,r3,#24             ;289
0000de  4398              BICS     r0,r0,r3              ;289
0000e0  0623              LSLS     r3,r4,#24             ;289
0000e2  250f              MOVS     r5,#0xf               ;289
0000e4  062d              LSLS     r5,r5,#24             ;289
0000e6  402b              ANDS     r3,r3,r5              ;289
0000e8  4318              ORRS     r0,r0,r3              ;289
0000ea  4b33              LDR      r3,|L25.440|
0000ec  6058              STR      r0,[r3,#4]            ;289
                  |L25.238|
0000ee  e05e              B        |L25.430|
0000f0  2a00              CMP      r2,#0                 ;293
0000f2  d00a              BEQ      |L25.266|
0000f4  4830              LDR      r0,|L25.440|
0000f6  6880              LDR      r0,[r0,#8]            ;294
0000f8  23f0              MOVS     r3,#0xf0              ;294
0000fa  4398              BICS     r0,r0,r3              ;294
0000fc  0123              LSLS     r3,r4,#4              ;294
0000fe  25f0              MOVS     r5,#0xf0              ;294
000100  402b              ANDS     r3,r3,r5              ;294
000102  4318              ORRS     r0,r0,r3              ;294
000104  4b2c              LDR      r3,|L25.440|
000106  6098              STR      r0,[r3,#8]            ;294
000108  e008              B        |L25.284|
                  |L25.266|
00010a  482b              LDR      r0,|L25.440|
00010c  6880              LDR      r0,[r0,#8]            ;296
00010e  0900              LSRS     r0,r0,#4              ;296
000110  0100              LSLS     r0,r0,#4              ;296
000112  0723              LSLS     r3,r4,#28             ;296
000114  0f1b              LSRS     r3,r3,#28             ;296
000116  4318              ORRS     r0,r0,r3              ;296
000118  4b27              LDR      r3,|L25.440|
00011a  6098              STR      r0,[r3,#8]            ;296
                  |L25.284|
00011c  e047              B        |L25.430|
00011e  2a00              CMP      r2,#0                 ;299
000120  d00c              BEQ      |L25.316|
000122  4825              LDR      r0,|L25.440|
000124  6880              LDR      r0,[r0,#8]            ;300
000126  230f              MOVS     r3,#0xf               ;300
000128  031b              LSLS     r3,r3,#12             ;300
00012a  4398              BICS     r0,r0,r3              ;300
00012c  0323              LSLS     r3,r4,#12             ;300
00012e  250f              MOVS     r5,#0xf               ;300
000130  032d              LSLS     r5,r5,#12             ;300
000132  402b              ANDS     r3,r3,r5              ;300
000134  4318              ORRS     r0,r0,r3              ;300
000136  4b20              LDR      r3,|L25.440|
000138  6098              STR      r0,[r3,#8]            ;300
00013a  e00b              B        |L25.340|
                  |L25.316|
00013c  481e              LDR      r0,|L25.440|
00013e  6880              LDR      r0,[r0,#8]            ;302
000140  230f              MOVS     r3,#0xf               ;302
000142  021b              LSLS     r3,r3,#8              ;302
000144  4398              BICS     r0,r0,r3              ;302
000146  0223              LSLS     r3,r4,#8              ;302
000148  250f              MOVS     r5,#0xf               ;302
00014a  022d              LSLS     r5,r5,#8              ;302
00014c  402b              ANDS     r3,r3,r5              ;302
00014e  4318              ORRS     r0,r0,r3              ;302
000150  4b19              LDR      r3,|L25.440|
000152  6098              STR      r0,[r3,#8]            ;302
                  |L25.340|
000154  e02b              B        |L25.430|
000156  2a00              CMP      r2,#0                 ;305
000158  d002              BEQ      |L25.352|
00015a  4816              LDR      r0,|L25.436|
00015c  1e40              SUBS     r0,r0,#1              ;306
00015e  e754              B        |L25.10|
                  |L25.352|
000160  4815              LDR      r0,|L25.440|
000162  6880              LDR      r0,[r0,#8]            ;308
000164  230f              MOVS     r3,#0xf               ;308
000166  061b              LSLS     r3,r3,#24             ;308
000168  4398              BICS     r0,r0,r3              ;308
00016a  0623              LSLS     r3,r4,#24             ;308
00016c  250f              MOVS     r5,#0xf               ;308
00016e  062d              LSLS     r5,r5,#24             ;308
000170  402b              ANDS     r3,r3,r5              ;308
000172  4318              ORRS     r0,r0,r3              ;308
000174  4b10              LDR      r3,|L25.440|
000176  6098              STR      r0,[r3,#8]            ;308
000178  e019              B        |L25.430|
00017a  2a00              CMP      r2,#0                 ;311
00017c  d00a              BEQ      |L25.404|
00017e  480e              LDR      r0,|L25.440|
000180  6900              LDR      r0,[r0,#0x10]         ;312
000182  23f0              MOVS     r3,#0xf0              ;312
000184  4398              BICS     r0,r0,r3              ;312
000186  0123              LSLS     r3,r4,#4              ;312
000188  25f0              MOVS     r5,#0xf0              ;312
00018a  402b              ANDS     r3,r3,r5              ;312
00018c  4318              ORRS     r0,r0,r3              ;312
00018e  4b0a              LDR      r3,|L25.440|
000190  6118              STR      r0,[r3,#0x10]         ;312
000192  e008              B        |L25.422|
                  |L25.404|
000194  4808              LDR      r0,|L25.440|
000196  6900              LDR      r0,[r0,#0x10]         ;314
000198  0900              LSRS     r0,r0,#4              ;314
00019a  0100              LSLS     r0,r0,#4              ;314
00019c  0723              LSLS     r3,r4,#28             ;314
00019e  0f1b              LSRS     r3,r3,#28             ;314
0001a0  4318              ORRS     r0,r0,r3              ;314
0001a2  4b05              LDR      r3,|L25.440|
0001a4  6118              STR      r0,[r3,#0x10]         ;314
                  |L25.422|
0001a6  e002              B        |L25.430|
0001a8  4802              LDR      r0,|L25.436|
0001aa  1e40              SUBS     r0,r0,#1              ;317
0001ac  e72d              B        |L25.10|
                  |L25.430|
0001ae  bf00              NOP                            ;269
0001b0  2000              MOVS     r0,#0                 ;320
0001b2  e72a              B        |L25.10|
;;;322    
                          ENDP

                  |L25.436|
                          DCD      0xffff9082
                  |L25.440|
                          DCD      0x50008f00

                          AREA ||i.DrvPDMA_SetDestAddress||, CODE, READONLY, ALIGN=2

                  DrvPDMA_SetDestAddress PROC
;;;819    /*---------------------------------------------------------------------------------------------------------*/
;;;820    int32_t	DrvPDMA_SetDestAddress(E_DRVPDMA_CHANNEL_INDEX eChannel,uint32_t u32DestAddr)
000000  b510              PUSH     {r4,lr}
;;;821    {
000002  4602              MOV      r2,r0
;;;822    	PDMA_T * tPDMA;
;;;823    	    
;;;824        if (eChannel > MAX_CHANNEL_NUM  )	    						   /* Check Channel is valid */
000004  2a09              CMP      r2,#9
000006  dd01              BLE      |L26.12|
;;;825            return E_DRVPDMA_ERR_PORT_INVALID;    
000008  4803              LDR      r0,|L26.24|
                  |L26.10|
;;;826        
;;;827    	tPDMA = (PDMA_T *)((uint32_t)PDMA0 + eChannel * CHANNEL_OFFSET); 
;;;828    																			
;;;829    	tPDMA->DAR = u32DestAddr;	        						/* Set PDMA Channelx Destination Address */
;;;830    
;;;831        return E_SUCCESS;     													
;;;832    }
00000a  bd10              POP      {r4,pc}
                  |L26.12|
00000c  0210              LSLS     r0,r2,#8              ;827
00000e  4c03              LDR      r4,|L26.28|
000010  1903              ADDS     r3,r0,r4              ;827
000012  6099              STR      r1,[r3,#8]            ;829
000014  2000              MOVS     r0,#0                 ;831
000016  e7f8              B        |L26.10|
;;;833    
                          ENDP

                  |L26.24|
                          DCD      0xffff9082
                  |L26.28|
                          DCD      0x50008000

                          AREA ||i.DrvPDMA_SetSourceAddress||, CODE, READONLY, ALIGN=2

                  DrvPDMA_SetSourceAddress PROC
;;;770    /*---------------------------------------------------------------------------------------------------------*/
;;;771    int32_t	DrvPDMA_SetSourceAddress(E_DRVPDMA_CHANNEL_INDEX eChannel,uint32_t u32SourceAddr)
000000  b510              PUSH     {r4,lr}
;;;772    {
000002  4602              MOV      r2,r0
;;;773    	PDMA_T * tPDMA;
;;;774    	    
;;;775        if (eChannel > MAX_CHANNEL_NUM  )	    						   /* Check Channel is valid */
000004  2a09              CMP      r2,#9
000006  dd01              BLE      |L27.12|
;;;776            return E_DRVPDMA_ERR_PORT_INVALID;    
000008  4803              LDR      r0,|L27.24|
                  |L27.10|
;;;777        
;;;778    	tPDMA = (PDMA_T *)((uint32_t)PDMA0 + eChannel * CHANNEL_OFFSET); 
;;;779    																			
;;;780    	tPDMA->SAR = u32SourceAddr;	        						/* Set PDMA Channelx Source Address */
;;;781    
;;;782        return E_SUCCESS;     													
;;;783    }
00000a  bd10              POP      {r4,pc}
                  |L27.12|
00000c  0210              LSLS     r0,r2,#8              ;778
00000e  4c03              LDR      r4,|L27.28|
000010  1903              ADDS     r3,r0,r4              ;778
000012  6059              STR      r1,[r3,#4]            ;780
000014  2000              MOVS     r0,#0                 ;782
000016  e7f8              B        |L27.10|
;;;784    
                          ENDP

                  |L27.24|
                          DCD      0xffff9082
                  |L27.28|
                          DCD      0x50008000

                          AREA ||i.PDMA_IRQHandler||, CODE, READONLY, ALIGN=2

                  PDMA_IRQHandler PROC
;;;640    /*---------------------------------------------------------------------------------------------------------*/
;;;641    void PDMA_IRQHandler(void)
000000  b570              PUSH     {r4-r6,lr}
;;;642    {
;;;643        volatile uint32_t u32IntStatus;
;;;644    	volatile uint32_t u32SFR;
;;;645        volatile int32_t  i32Channel= 0 ;
000002  2400              MOVS     r4,#0
;;;646    	volatile uint32_t u32ISR;
;;;647    	PDMA_T * tPDMA;
;;;648    		
;;;649    	u32SFR = inpw(&PDMA_GCR->GCRISR);
000004  481d              LDR      r0,|L28.124|
000006  68c6              LDR      r6,[r0,#0xc]
;;;650    
;;;651    	for(i32Channel=0;i32Channel<MAX_CHANNEL_NUM;i32Channel++)  
000008  bf00              NOP      
00000a  e034              B        |L28.118|
                  |L28.12|
;;;652    	{
;;;653    		tPDMA = (PDMA_T *)((uint32_t)PDMA0 + i32Channel * CHANNEL_OFFSET); 
00000c  0220              LSLS     r0,r4,#8
00000e  491c              LDR      r1,|L28.128|
000010  1845              ADDS     r5,r0,r1
;;;654    
;;;655    		if(u32SFR & (1<<i32Channel))  										 		/* Check INT Channel */	
000012  2001              MOVS     r0,#1
000014  40a0              LSLS     r0,r0,r4
000016  4230              TST      r0,r6
000018  d02c              BEQ      |L28.116|
;;;656    		{
;;;657    			if(tPDMA->ISR.TABORT_IF==1)	 											/* Check Target Abort INT and clear */
00001a  6a68              LDR      r0,[r5,#0x24]
00001c  07c0              LSLS     r0,r0,#31
00001e  0fc0              LSRS     r0,r0,#31
000020  d011              BEQ      |L28.70|
;;;658    			{
;;;659    			  tPDMA->ISR.TABORT_IF=1;
000022  6a68              LDR      r0,[r5,#0x24]
000024  0840              LSRS     r0,r0,#1
000026  0040              LSLS     r0,r0,#1
000028  1c40              ADDS     r0,r0,#1
00002a  6268              STR      r0,[r5,#0x24]
;;;660    			   if (g_pfnPDMACallback[i32Channel][0] != 0)    		
00002c  200c              MOVS     r0,#0xc
00002e  4360              MULS     r0,r4,r0
000030  4914              LDR      r1,|L28.132|
000032  5808              LDR      r0,[r1,r0]
000034  2800              CMP      r0,#0
000036  d01d              BEQ      |L28.116|
;;;661    		    		(*g_pfnPDMACallback[i32Channel][0])(0);							/* Target Abort callback funtion */
000038  200c              MOVS     r0,#0xc
00003a  4360              MULS     r0,r4,r0
00003c  460a              MOV      r2,r1
00003e  5811              LDR      r1,[r2,r0]
000040  2000              MOVS     r0,#0
000042  4788              BLX      r1
000044  e016              B        |L28.116|
                  |L28.70|
;;;662    			}
;;;663    			else if(tPDMA->ISR.BLKD_IF==1)		
000046  6a68              LDR      r0,[r5,#0x24]
000048  0780              LSLS     r0,r0,#30
00004a  0fc0              LSRS     r0,r0,#31
00004c  d012              BEQ      |L28.116|
;;;664    			{																		/* Transfer Done INT and clear */
;;;665    			  tPDMA->ISR.BLKD_IF=1;
00004e  6a68              LDR      r0,[r5,#0x24]
000050  2102              MOVS     r1,#2
000052  4388              BICS     r0,r0,r1
000054  1c80              ADDS     r0,r0,#2
000056  6268              STR      r0,[r5,#0x24]
;;;666    			   if (g_pfnPDMACallback[i32Channel][1] != 0)    		
000058  200c              MOVS     r0,#0xc
00005a  4360              MULS     r0,r4,r0
00005c  4909              LDR      r1,|L28.132|
00005e  1840              ADDS     r0,r0,r1
000060  6840              LDR      r0,[r0,#4]
000062  2800              CMP      r0,#0
000064  d006              BEQ      |L28.116|
;;;667    		    		(*g_pfnPDMACallback[i32Channel][1])(0);							
000066  200c              MOVS     r0,#0xc
000068  4360              MULS     r0,r4,r0
00006a  460a              MOV      r2,r1
00006c  1880              ADDS     r0,r0,r2
00006e  6841              LDR      r1,[r0,#4]
000070  2000              MOVS     r0,#0
000072  4788              BLX      r1
                  |L28.116|
000074  1c64              ADDS     r4,r4,#1              ;651
                  |L28.118|
000076  2c09              CMP      r4,#9                 ;651
000078  dbc8              BLT      |L28.12|
;;;668    			}
;;;669    		}
;;;670    	}
;;;671    }
00007a  bd70              POP      {r4-r6,pc}
;;;672    
                          ENDP

                  |L28.124|
                          DCD      0x50008f00
                  |L28.128|
                          DCD      0x50008000
                  |L28.132|
                          DCD      g_pfnPDMACallback

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  g_pfnPDMACallback
                          %        108

                          AREA ||i.__ARM_common_switch8||, COMGROUP=__ARM_common_switch8, CODE, READONLY, ALIGN=1

                  __ARM_common_switch8 PROC
000000  b430              PUSH     {r4,r5}
000002  4674              MOV      r4,lr
000004  1e64              SUBS     r4,r4,#1
000006  7825              LDRB     r5,[r4,#0]
000008  1c64              ADDS     r4,r4,#1
00000a  42ab              CMP      r3,r5
00000c  d304              BCC      |L177.24|
                  |L177.14|
00000e  5d63              LDRB     r3,[r4,r5]
000010  005b              LSLS     r3,r3,#1
000012  18e3              ADDS     r3,r4,r3
000014  bc30              POP      {r4,r5}
000016  4718              BX       r3
                  |L177.24|
000018  461d              MOV      r5,r3
00001a  e7f8              B        |L177.14|
                          ENDP

