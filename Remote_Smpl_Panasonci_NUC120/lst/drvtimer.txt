; generated by ARM C/C++ Compiler, 5.02 [Build 28]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\drvtimer.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\drvtimer.d --cpu=Cortex-M0 --apcs=interwork -O0 -Otime -I.\ -I..\..\..\..\CMSIS\CM0\CoreSupport -I..\..\..\..\CMSIS\CM0\DeviceSupport\Nuvoton\NUC1xx -I..\..\..\Include -I..\..\..\Include\Driver -Id:\Keil\ARM\RV31\INC -Id:\Keil\ARM\CMSIS\Include -Id:\Keil\ARM\Inc\Nuvoton\NUC1xx -DUSE_STDPERIPH_DRIVER --omf_browse=.\obj\drvtimer.crf ..\..\..\Src\Driver\DrvTIMER.c]
                          THUMB

                          AREA ||i.CalTimerInitValue||, CODE, READONLY, ALIGN=1

                  CalTimerInitValue PROC
;;;127    /*---------------------------------------------------------------------------------------------------------*/
;;;128    static uint32_t CalTimerInitValue(uint32_t u32ClockValue, uint32_t u32TicksPerSec)
000000  b5f8              PUSH     {r3-r7,lr}
;;;129    {
000002  4607              MOV      r7,r0
000004  460e              MOV      r6,r1
;;;130        uint32_t u32PreScale;
;;;131        uint32_t u32TCMPRValue;
;;;132    
;;;133        if ((u32ClockValue < 2) || (u32TicksPerSec == 0))
000006  2f02              CMP      r7,#2
000008  d301              BCC      |L1.14|
00000a  2e00              CMP      r6,#0
00000c  d102              BNE      |L1.20|
                  |L1.14|
;;;134            return (uint32_t)-1;
00000e  2000              MOVS     r0,#0
000010  43c0              MVNS     r0,r0
                  |L1.18|
;;;135    
;;;136        for (u32PreScale=1; u32PreScale<256; u32PreScale++)
;;;137        {
;;;138            u32TCMPRValue = u32ClockValue / (u32TicksPerSec * u32PreScale);
;;;139    
;;;140            /* The TCMPR value must > 1 */
;;;141            if ((u32TCMPRValue > 1) && (u32TCMPRValue < 0x1000000))
;;;142                return (((u32PreScale-1) << 24) | u32TCMPRValue);
;;;143        }
;;;144        
;;;145        return (uint32_t)-1;
;;;146    }
000012  bdf8              POP      {r3-r7,pc}
                  |L1.20|
000014  2401              MOVS     r4,#1                 ;136
000016  e011              B        |L1.60|
                  |L1.24|
000018  4630              MOV      r0,r6                 ;138
00001a  4360              MULS     r0,r4,r0              ;138
00001c  4601              MOV      r1,r0                 ;138
00001e  4638              MOV      r0,r7                 ;138
000020  f7fffffe          BL       __aeabi_uidivmod
000024  4605              MOV      r5,r0                 ;138
000026  2d01              CMP      r5,#1                 ;141
000028  d907              BLS      |L1.58|
00002a  2001              MOVS     r0,#1                 ;141
00002c  0600              LSLS     r0,r0,#24             ;141
00002e  4285              CMP      r5,r0                 ;141
000030  d203              BCS      |L1.58|
000032  1e60              SUBS     r0,r4,#1              ;142
000034  0600              LSLS     r0,r0,#24             ;142
000036  4328              ORRS     r0,r0,r5              ;142
000038  e7eb              B        |L1.18|
                  |L1.58|
00003a  1c64              ADDS     r4,r4,#1              ;136
                  |L1.60|
00003c  2cff              CMP      r4,#0xff              ;136
00003e  d9eb              BLS      |L1.24|
000040  2000              MOVS     r0,#0                 ;145
000042  43c0              MVNS     r0,r0                 ;145
000044  e7e5              B        |L1.18|
;;;147    
                          ENDP


                          AREA ||i.DrvTIMER_ClearCaptureIntFlag||, CODE, READONLY, ALIGN=2

                  DrvTIMER_ClearCaptureIntFlag PROC
;;;1627   /*---------------------------------------------------------------------------------------------------------*/
;;;1628   int32_t DrvTIMER_ClearCaptureIntFlag(E_TIMER_CHANNEL ch)
000000  4601              MOV      r1,r0
;;;1629   {
;;;1630   	TIMER_T * tTMR;
;;;1631   
;;;1632      	switch (ch)
000002  2900              CMP      r1,#0
000004  d006              BEQ      |L2.20|
000006  2901              CMP      r1,#1
000008  d005              BEQ      |L2.22|
00000a  2902              CMP      r1,#2
00000c  d004              BEQ      |L2.24|
00000e  2903              CMP      r1,#3
000010  d10f              BNE      |L2.50|
000012  e002              B        |L2.26|
                  |L2.20|
;;;1633       {
;;;1634           case E_TMR0:
;;;1635           case E_TMR1:
000014  bf00              NOP      
                  |L2.22|
;;;1636           case E_TMR2:
000016  bf00              NOP      
                  |L2.24|
;;;1637   		case E_TMR3:
000018  bf00              NOP      
                  |L2.26|
;;;1638           {
;;;1639           	tTMR = (TIMER_T *)((uint32_t)TIMER0 + CH_OFFSET[ch]);         
00001a  0088              LSLS     r0,r1,#2
00001c  4b06              LDR      r3,|L2.56|
00001e  5818              LDR      r0,[r3,r0]
000020  4b06              LDR      r3,|L2.60|
000022  18c2              ADDS     r2,r0,r3
;;;1640               tTMR->TEXISR.TEXIF = 1;
000024  6990              LDR      r0,[r2,#0x18]
000026  0840              LSRS     r0,r0,#1
000028  0040              LSLS     r0,r0,#1
00002a  1c40              ADDS     r0,r0,#1
00002c  6190              STR      r0,[r2,#0x18]
;;;1641               return E_SUCCESS;
00002e  2000              MOVS     r0,#0
                  |L2.48|
;;;1642           }
;;;1643   
;;;1644           default:
;;;1645           {
;;;1646               return E_DRVTIMER_CHANNEL ; 
;;;1647           }
;;;1648       }
;;;1649   }
000030  4770              BX       lr
                  |L2.50|
000032  4803              LDR      r0,|L2.64|
000034  e7fc              B        |L2.48|
;;;1650   
                          ENDP

000036  0000              DCW      0x0000
                  |L2.56|
                          DCD      CH_OFFSET
                  |L2.60|
                          DCD      0x40010000
                  |L2.64|
                          DCD      0xffff9701

                          AREA ||i.DrvTIMER_ClearIntFlag||, CODE, READONLY, ALIGN=2

                  DrvTIMER_ClearIntFlag PROC
;;;837    /*---------------------------------------------------------------------------------------------------------*/
;;;838    int32_t DrvTIMER_ClearIntFlag(E_TIMER_CHANNEL ch)
000000  4601              MOV      r1,r0
;;;839    {
;;;840        if (ch == E_TMR0 )
000002  2900              CMP      r1,#0
000004  d107              BNE      |L3.22|
;;;841            TIMER0->TISR.TIF = 1;
000006  4814              LDR      r0,|L3.88|
000008  6880              LDR      r0,[r0,#8]
00000a  0840              LSRS     r0,r0,#1
00000c  0040              LSLS     r0,r0,#1
00000e  1c40              ADDS     r0,r0,#1
000010  4a11              LDR      r2,|L3.88|
000012  6090              STR      r0,[r2,#8]
000014  e01e              B        |L3.84|
                  |L3.22|
;;;842        else if(ch == E_TMR1 )                                   
000016  2901              CMP      r1,#1
000018  d106              BNE      |L3.40|
;;;843            TIMER1->TISR.TIF = 1;
00001a  480f              LDR      r0,|L3.88|
00001c  6a80              LDR      r0,[r0,#0x28]
00001e  4388              BICS     r0,r0,r1
000020  1c40              ADDS     r0,r0,#1
000022  4a0d              LDR      r2,|L3.88|
000024  6290              STR      r0,[r2,#0x28]
000026  e015              B        |L3.84|
                  |L3.40|
;;;844        else if(ch == E_TMR2 )
000028  2902              CMP      r1,#2
00002a  d107              BNE      |L3.60|
;;;845            TIMER2->TISR.TIF = 1;
00002c  480b              LDR      r0,|L3.92|
00002e  6880              LDR      r0,[r0,#8]
000030  0840              LSRS     r0,r0,#1
000032  0040              LSLS     r0,r0,#1
000034  1c40              ADDS     r0,r0,#1
000036  4a09              LDR      r2,|L3.92|
000038  6090              STR      r0,[r2,#8]
00003a  e00b              B        |L3.84|
                  |L3.60|
;;;846        else if(ch == E_TMR3 )
00003c  2903              CMP      r1,#3
00003e  d107              BNE      |L3.80|
;;;847            TIMER3->TISR.TIF = 1;
000040  4806              LDR      r0,|L3.92|
000042  6a80              LDR      r0,[r0,#0x28]
000044  0840              LSRS     r0,r0,#1
000046  0040              LSLS     r0,r0,#1
000048  1c40              ADDS     r0,r0,#1
00004a  4a04              LDR      r2,|L3.92|
00004c  6290              STR      r0,[r2,#0x28]
00004e  e001              B        |L3.84|
                  |L3.80|
;;;848        else 
;;;849            return E_DRVTIMER_CHANNEL;
000050  4803              LDR      r0,|L3.96|
                  |L3.82|
;;;850    
;;;851        return E_SUCCESS;
;;;852    }
000052  4770              BX       lr
                  |L3.84|
000054  2000              MOVS     r0,#0                 ;851
000056  e7fc              B        |L3.82|
;;;853    
                          ENDP

                  |L3.88|
                          DCD      0x40010000
                  |L3.92|
                          DCD      0x40110000
                  |L3.96|
                          DCD      0xffff9701

                          AREA ||i.DrvTIMER_ClearTimerEvent||, CODE, READONLY, ALIGN=2

                  DrvTIMER_ClearTimerEvent PROC
;;;671    /*---------------------------------------------------------------------------------------------------------*/
;;;672    void DrvTIMER_ClearTimerEvent(E_TIMER_CHANNEL ch, uint32_t uTimerEventNo)
000000  b510              PUSH     {r4,lr}
;;;673    {
;;;674        switch (ch)
000002  2800              CMP      r0,#0
000004  d006              BEQ      |L4.20|
000006  2801              CMP      r0,#1
000008  d015              BEQ      |L4.54|
00000a  2802              CMP      r0,#2
00000c  d024              BEQ      |L4.88|
00000e  2803              CMP      r0,#3
000010  d144              BNE      |L4.156|
000012  e032              B        |L4.122|
                  |L4.20|
;;;675        {
;;;676            case E_TMR0:
;;;677            {
;;;678                tTime0Event[uTimerEventNo].active = FALSE;
000014  2300              MOVS     r3,#0
000016  2214              MOVS     r2,#0x14
000018  434a              MULS     r2,r1,r2
00001a  4c22              LDR      r4,|L4.164|
00001c  50a3              STR      r3,[r4,r2]
;;;679                uTime0EventCount--;
00001e  4a22              LDR      r2,|L4.168|
000020  6812              LDR      r2,[r2,#0]  ; uTime0EventCount
000022  1e52              SUBS     r2,r2,#1
000024  4b20              LDR      r3,|L4.168|
000026  601a              STR      r2,[r3,#0]  ; uTime0EventCount
;;;680                if (uTime0EventCount == 0)
000028  461a              MOV      r2,r3
00002a  6812              LDR      r2,[r2,#0]  ; uTime0EventCount
00002c  2a00              CMP      r2,#0
00002e  d101              BNE      |L4.52|
;;;681                {
;;;682                    bIsSetTime0Event = FALSE;
000030  4b1e              LDR      r3,|L4.172|
000032  601a              STR      r2,[r3,#0]  ; bIsSetTime0Event
                  |L4.52|
;;;683                }
;;;684                break;
000034  e033              B        |L4.158|
                  |L4.54|
;;;685            }
;;;686    
;;;687            case E_TMR1:
;;;688            {
;;;689                tTime1Event[uTimerEventNo].active = FALSE;
000036  2300              MOVS     r3,#0
000038  2214              MOVS     r2,#0x14
00003a  434a              MULS     r2,r1,r2
00003c  4c1c              LDR      r4,|L4.176|
00003e  50a3              STR      r3,[r4,r2]
;;;690                uTime1EventCount--;
000040  4a1c              LDR      r2,|L4.180|
000042  6812              LDR      r2,[r2,#0]  ; uTime1EventCount
000044  1e52              SUBS     r2,r2,#1
000046  4b1b              LDR      r3,|L4.180|
000048  601a              STR      r2,[r3,#0]  ; uTime1EventCount
;;;691                if (uTime1EventCount == 0)
00004a  461a              MOV      r2,r3
00004c  6812              LDR      r2,[r2,#0]  ; uTime1EventCount
00004e  2a00              CMP      r2,#0
000050  d101              BNE      |L4.86|
;;;692                {
;;;693                    bIsSetTime1Event = FALSE;
000052  4b19              LDR      r3,|L4.184|
000054  601a              STR      r2,[r3,#0]  ; bIsSetTime1Event
                  |L4.86|
;;;694                }
;;;695                break;
000056  e022              B        |L4.158|
                  |L4.88|
;;;696            }
;;;697    
;;;698            case E_TMR2:
;;;699            {
;;;700                tTime2Event[uTimerEventNo].active = FALSE;
000058  2300              MOVS     r3,#0
00005a  2214              MOVS     r2,#0x14
00005c  434a              MULS     r2,r1,r2
00005e  4c17              LDR      r4,|L4.188|
000060  50a3              STR      r3,[r4,r2]
;;;701                uTime2EventCount--;
000062  4a17              LDR      r2,|L4.192|
000064  6812              LDR      r2,[r2,#0]  ; uTime2EventCount
000066  1e52              SUBS     r2,r2,#1
000068  4b15              LDR      r3,|L4.192|
00006a  601a              STR      r2,[r3,#0]  ; uTime2EventCount
;;;702                if (uTime2EventCount == 0)
00006c  461a              MOV      r2,r3
00006e  6812              LDR      r2,[r2,#0]  ; uTime2EventCount
000070  2a00              CMP      r2,#0
000072  d101              BNE      |L4.120|
;;;703                {
;;;704                    bIsSetTime2Event = FALSE;
000074  4b13              LDR      r3,|L4.196|
000076  601a              STR      r2,[r3,#0]  ; bIsSetTime2Event
                  |L4.120|
;;;705                }
;;;706                break;
000078  e011              B        |L4.158|
                  |L4.122|
;;;707            }
;;;708    
;;;709            case E_TMR3:
;;;710            {
;;;711                tTime3Event[uTimerEventNo].active = FALSE;
00007a  2300              MOVS     r3,#0
00007c  2214              MOVS     r2,#0x14
00007e  434a              MULS     r2,r1,r2
000080  4c11              LDR      r4,|L4.200|
000082  50a3              STR      r3,[r4,r2]
;;;712                uTime3EventCount--;
000084  4a11              LDR      r2,|L4.204|
000086  6812              LDR      r2,[r2,#0]  ; uTime3EventCount
000088  1e52              SUBS     r2,r2,#1
00008a  4b10              LDR      r3,|L4.204|
00008c  601a              STR      r2,[r3,#0]  ; uTime3EventCount
;;;713                if (uTime3EventCount == 0)
00008e  461a              MOV      r2,r3
000090  6812              LDR      r2,[r2,#0]  ; uTime3EventCount
000092  2a00              CMP      r2,#0
000094  d101              BNE      |L4.154|
;;;714                {
;;;715                    bIsSetTime3Event = FALSE;
000096  4b0e              LDR      r3,|L4.208|
000098  601a              STR      r2,[r3,#0]  ; bIsSetTime3Event
                  |L4.154|
;;;716                }
;;;717                break;
00009a  e000              B        |L4.158|
                  |L4.156|
;;;718            }
;;;719    
;;;720            default:
;;;721            {
;;;722                break;
00009c  bf00              NOP      
                  |L4.158|
00009e  bf00              NOP                            ;684
;;;723            }
;;;724        }
;;;725    }
0000a0  bd10              POP      {r4,pc}
;;;726    
                          ENDP

0000a2  0000              DCW      0x0000
                  |L4.164|
                          DCD      tTime0Event
                  |L4.168|
                          DCD      uTime0EventCount
                  |L4.172|
                          DCD      bIsSetTime0Event
                  |L4.176|
                          DCD      tTime1Event
                  |L4.180|
                          DCD      uTime1EventCount
                  |L4.184|
                          DCD      bIsSetTime1Event
                  |L4.188|
                          DCD      tTime2Event
                  |L4.192|
                          DCD      uTime2EventCount
                  |L4.196|
                          DCD      bIsSetTime2Event
                  |L4.200|
                          DCD      tTime3Event
                  |L4.204|
                          DCD      uTime3EventCount
                  |L4.208|
                          DCD      bIsSetTime3Event

                          AREA ||i.DrvTIMER_Close||, CODE, READONLY, ALIGN=2

                  DrvTIMER_Close PROC
;;;481    /*---------------------------------------------------------------------------------------------------------*/
;;;482    int32_t DrvTIMER_Close(E_TIMER_CHANNEL ch)
000000  b510              PUSH     {r4,lr}
;;;483    {
000002  4604              MOV      r4,r0
;;;484        switch (ch)
000004  2c00              CMP      r4,#0
000006  d006              BEQ      |L5.22|
000008  2c01              CMP      r4,#1
00000a  d015              BEQ      |L5.56|
00000c  2c02              CMP      r4,#2
00000e  d024              BEQ      |L5.90|
000010  2c03              CMP      r4,#3
000012  d144              BNE      |L5.158|
000014  e032              B        |L5.124|
                  |L5.22|
;;;485        {
;;;486            case E_TMR0:
;;;487            {
;;;488                DrvTIMER_DisableInt(E_TMR0);
000016  2000              MOVS     r0,#0
000018  f7fffffe          BL       DrvTIMER_DisableInt
;;;489                TIMER0->TCSR.CRST   = 1;
00001c  4822              LDR      r0,|L5.168|
00001e  6800              LDR      r0,[r0,#0]
000020  2101              MOVS     r1,#1
000022  0689              LSLS     r1,r1,#26
000024  4388              BICS     r0,r0,r1
000026  1840              ADDS     r0,r0,r1
000028  491f              LDR      r1,|L5.168|
00002a  6008              STR      r0,[r1,#0]
;;;490                bIsTimer0Used       = FALSE;
00002c  2000              MOVS     r0,#0
00002e  491f              LDR      r1,|L5.172|
000030  6008              STR      r0,[r1,#0]  ; bIsTimer0Used
;;;491                bIsSetTime0Event    = FALSE;
000032  491f              LDR      r1,|L5.176|
000034  6008              STR      r0,[r1,#0]  ; bIsSetTime0Event
;;;492                break;
000036  e034              B        |L5.162|
                  |L5.56|
;;;493            }
;;;494    
;;;495            case E_TMR1:
;;;496            {
;;;497                DrvTIMER_DisableInt(E_TMR1);
000038  2001              MOVS     r0,#1
00003a  f7fffffe          BL       DrvTIMER_DisableInt
;;;498                TIMER1->TCSR.CRST   = 1;
00003e  481a              LDR      r0,|L5.168|
000040  6a00              LDR      r0,[r0,#0x20]
000042  2101              MOVS     r1,#1
000044  0689              LSLS     r1,r1,#26
000046  4388              BICS     r0,r0,r1
000048  1840              ADDS     r0,r0,r1
00004a  4917              LDR      r1,|L5.168|
00004c  6208              STR      r0,[r1,#0x20]
;;;499                bIsTimer1Used       = FALSE;
00004e  2000              MOVS     r0,#0
000050  4918              LDR      r1,|L5.180|
000052  6008              STR      r0,[r1,#0]  ; bIsTimer1Used
;;;500                bIsSetTime1Event    = FALSE;
000054  4918              LDR      r1,|L5.184|
000056  6008              STR      r0,[r1,#0]  ; bIsSetTime1Event
;;;501                break;
000058  e023              B        |L5.162|
                  |L5.90|
;;;502            }
;;;503    
;;;504            case E_TMR2:
;;;505            {
;;;506                DrvTIMER_DisableInt(E_TMR2);
00005a  2002              MOVS     r0,#2
00005c  f7fffffe          BL       DrvTIMER_DisableInt
;;;507                TIMER2->TCSR.CRST   = 1;
000060  4816              LDR      r0,|L5.188|
000062  6800              LDR      r0,[r0,#0]
000064  2101              MOVS     r1,#1
000066  0689              LSLS     r1,r1,#26
000068  4388              BICS     r0,r0,r1
00006a  1840              ADDS     r0,r0,r1
00006c  4913              LDR      r1,|L5.188|
00006e  6008              STR      r0,[r1,#0]
;;;508                bIsTimer2Used       = FALSE;
000070  2000              MOVS     r0,#0
000072  4913              LDR      r1,|L5.192|
000074  6008              STR      r0,[r1,#0]  ; bIsTimer2Used
;;;509                bIsSetTime2Event    = FALSE;
000076  4913              LDR      r1,|L5.196|
000078  6008              STR      r0,[r1,#0]  ; bIsSetTime2Event
;;;510                break;
00007a  e012              B        |L5.162|
                  |L5.124|
;;;511            }
;;;512    
;;;513            case E_TMR3:
;;;514            {
;;;515                DrvTIMER_DisableInt(E_TMR3);
00007c  2003              MOVS     r0,#3
00007e  f7fffffe          BL       DrvTIMER_DisableInt
;;;516                TIMER3->TCSR.CRST   = 1;
000082  480e              LDR      r0,|L5.188|
000084  6a00              LDR      r0,[r0,#0x20]
000086  2101              MOVS     r1,#1
000088  0689              LSLS     r1,r1,#26
00008a  4388              BICS     r0,r0,r1
00008c  1840              ADDS     r0,r0,r1
00008e  490b              LDR      r1,|L5.188|
000090  6208              STR      r0,[r1,#0x20]
;;;517                bIsTimer3Used       = FALSE;
000092  2000              MOVS     r0,#0
000094  490c              LDR      r1,|L5.200|
000096  6008              STR      r0,[r1,#0]  ; bIsTimer3Used
;;;518                bIsSetTime3Event    = FALSE;
000098  490c              LDR      r1,|L5.204|
00009a  6008              STR      r0,[r1,#0]  ; bIsSetTime3Event
;;;519                break;
00009c  e001              B        |L5.162|
                  |L5.158|
;;;520            }
;;;521    
;;;522            default:
;;;523            {
;;;524                return E_DRVTIMER_CHANNEL ;
00009e  480c              LDR      r0,|L5.208|
                  |L5.160|
;;;525            }
;;;526        }
;;;527    
;;;528        return E_SUCCESS;
;;;529    }
0000a0  bd10              POP      {r4,pc}
                  |L5.162|
0000a2  bf00              NOP                            ;492
0000a4  2000              MOVS     r0,#0                 ;528
0000a6  e7fb              B        |L5.160|
;;;530    
                          ENDP

                  |L5.168|
                          DCD      0x40010000
                  |L5.172|
                          DCD      bIsTimer0Used
                  |L5.176|
                          DCD      bIsSetTime0Event
                  |L5.180|
                          DCD      bIsTimer1Used
                  |L5.184|
                          DCD      bIsSetTime1Event
                  |L5.188|
                          DCD      0x40110000
                  |L5.192|
                          DCD      bIsTimer2Used
                  |L5.196|
                          DCD      bIsSetTime2Event
                  |L5.200|
                          DCD      bIsTimer3Used
                  |L5.204|
                          DCD      bIsSetTime3Event
                  |L5.208|
                          DCD      0xffff9701

                          AREA ||i.DrvTIMER_CloseCapture||, CODE, READONLY, ALIGN=2

                  DrvTIMER_CloseCapture PROC
;;;1293   /*---------------------------------------------------------------------------------------------------------*/
;;;1294   int32_t DrvTIMER_CloseCapture(E_TIMER_CHANNEL ch)
000000  4601              MOV      r1,r0
;;;1295   {
;;;1296   	TIMER_T * tTMR;
;;;1297   
;;;1298      	switch (ch)
000002  2900              CMP      r1,#0
000004  d006              BEQ      |L6.20|
000006  2901              CMP      r1,#1
000008  d005              BEQ      |L6.22|
00000a  2902              CMP      r1,#2
00000c  d004              BEQ      |L6.24|
00000e  2903              CMP      r1,#3
000010  d10b              BNE      |L6.42|
000012  e002              B        |L6.26|
                  |L6.20|
;;;1299       {
;;;1300           case E_TMR0:
;;;1301           case E_TMR1:
000014  bf00              NOP      
                  |L6.22|
;;;1302           case E_TMR2:
000016  bf00              NOP      
                  |L6.24|
;;;1303   		case E_TMR3:
000018  bf00              NOP      
                  |L6.26|
;;;1304           {
;;;1305           	tTMR = (TIMER_T *)((uint32_t)TIMER0 + CH_OFFSET[ch]);         
00001a  0088              LSLS     r0,r1,#2
00001c  4b04              LDR      r3,|L6.48|
00001e  5818              LDR      r0,[r3,r0]
000020  4b04              LDR      r3,|L6.52|
000022  18c2              ADDS     r2,r0,r3
;;;1306   			outpw((uint32_t)&tTMR->TEXCON ,0 );	
000024  2000              MOVS     r0,#0
000026  6150              STR      r0,[r2,#0x14]
                  |L6.40|
;;;1307               return E_SUCCESS;
;;;1308           }
;;;1309   
;;;1310           default:
;;;1311           {
;;;1312               return E_DRVTIMER_CHANNEL ; 
;;;1313           }
;;;1314       }
;;;1315   }
000028  4770              BX       lr
                  |L6.42|
00002a  4803              LDR      r0,|L6.56|
00002c  e7fc              B        |L6.40|
;;;1316   
                          ENDP

00002e  0000              DCW      0x0000
                  |L6.48|
                          DCD      CH_OFFSET
                  |L6.52|
                          DCD      0x40010000
                  |L6.56|
                          DCD      0xffff9701

                          AREA ||i.DrvTIMER_Delay||, CODE, READONLY, ALIGN=1

                  DrvTIMER_Delay PROC
;;;996    /*---------------------------------------------------------------------------------------------------------*/
;;;997    void DrvTIMER_Delay(E_TIMER_CHANNEL ch, uint32_t uIntTicks)
000000  b510              PUSH     {r4,lr}
;;;998    {
000002  4603              MOV      r3,r0
000004  460a              MOV      r2,r1
;;;999        uint32_t volatile btime;
;;;1000   
;;;1001       btime = DrvTIMER_GetIntTicks(ch);
000006  4618              MOV      r0,r3
000008  f7fffffe          BL       DrvTIMER_GetIntTicks
00000c  4604              MOV      r4,r0
;;;1002       
;;;1003       while (1)
00000e  e006              B        |L7.30|
                  |L7.16|
;;;1004       {
;;;1005           if ((DrvTIMER_GetIntTicks(ch) - btime) > uIntTicks)
000010  4618              MOV      r0,r3
000012  f7fffffe          BL       DrvTIMER_GetIntTicks
000016  1b00              SUBS     r0,r0,r4
000018  4290              CMP      r0,r2
00001a  d900              BLS      |L7.30|
;;;1006           {
;;;1007               break;
00001c  e000              B        |L7.32|
                  |L7.30|
00001e  e7f7              B        |L7.16|
                  |L7.32|
000020  bf00              NOP      
;;;1008           }
;;;1009       }
;;;1010   }
000022  bd10              POP      {r4,pc}
;;;1011   
                          ENDP


                          AREA ||i.DrvTIMER_DisableCapture||, CODE, READONLY, ALIGN=2

                  DrvTIMER_DisableCapture PROC
;;;1520   /*---------------------------------------------------------------------------------------------------------*/
;;;1521   int32_t DrvTIMER_DisableCapture(E_TIMER_CHANNEL ch)
000000  4601              MOV      r1,r0
;;;1522   {
;;;1523   	TIMER_T * tTMR;
;;;1524   
;;;1525      	switch (ch)
000002  2900              CMP      r1,#0
000004  d006              BEQ      |L8.20|
000006  2901              CMP      r1,#1
000008  d005              BEQ      |L8.22|
00000a  2902              CMP      r1,#2
00000c  d004              BEQ      |L8.24|
00000e  2903              CMP      r1,#3
000010  d10e              BNE      |L8.48|
000012  e002              B        |L8.26|
                  |L8.20|
;;;1526       {
;;;1527           case E_TMR0:
;;;1528           case E_TMR1:
000014  bf00              NOP      
                  |L8.22|
;;;1529           case E_TMR2:
000016  bf00              NOP      
                  |L8.24|
;;;1530   		case E_TMR3:
000018  bf00              NOP      
                  |L8.26|
;;;1531           {
;;;1532           	tTMR = (TIMER_T *)((uint32_t)TIMER0 + CH_OFFSET[ch]);         
00001a  0088              LSLS     r0,r1,#2
00001c  4b05              LDR      r3,|L8.52|
00001e  5818              LDR      r0,[r3,r0]
000020  4b05              LDR      r3,|L8.56|
000022  18c2              ADDS     r2,r0,r3
;;;1533               tTMR->TEXCON.TEXEN = 0;
000024  6950              LDR      r0,[r2,#0x14]
000026  2308              MOVS     r3,#8
000028  4398              BICS     r0,r0,r3
00002a  6150              STR      r0,[r2,#0x14]
;;;1534               return E_SUCCESS;
00002c  2000              MOVS     r0,#0
                  |L8.46|
;;;1535           }
;;;1536   
;;;1537           default:
;;;1538           {
;;;1539               return E_DRVTIMER_CHANNEL ; 
;;;1540           }
;;;1541       }
;;;1542   }
00002e  4770              BX       lr
                  |L8.48|
000030  4802              LDR      r0,|L8.60|
000032  e7fc              B        |L8.46|
;;;1543   
                          ENDP

                  |L8.52|
                          DCD      CH_OFFSET
                  |L8.56|
                          DCD      0x40010000
                  |L8.60|
                          DCD      0xffff9701

                          AREA ||i.DrvTIMER_DisableCaptureDebounce||, CODE, READONLY, ALIGN=2

                  DrvTIMER_DisableCaptureDebounce PROC
;;;1699   /*---------------------------------------------------------------------------------------------------------*/
;;;1700   int32_t DrvTIMER_DisableCaptureDebounce(E_TIMER_CHANNEL ch)
000000  4601              MOV      r1,r0
;;;1701   {
;;;1702   	TIMER_T * tTMR;
;;;1703   
;;;1704      	switch (ch)
000002  2900              CMP      r1,#0
000004  d006              BEQ      |L9.20|
000006  2901              CMP      r1,#1
000008  d005              BEQ      |L9.22|
00000a  2902              CMP      r1,#2
00000c  d004              BEQ      |L9.24|
00000e  2903              CMP      r1,#3
000010  d10e              BNE      |L9.48|
000012  e002              B        |L9.26|
                  |L9.20|
;;;1705       {
;;;1706           case E_TMR0:
;;;1707           case E_TMR1:
000014  bf00              NOP      
                  |L9.22|
;;;1708           case E_TMR2:
000016  bf00              NOP      
                  |L9.24|
;;;1709   		case E_TMR3:
000018  bf00              NOP      
                  |L9.26|
;;;1710           {
;;;1711           	tTMR = (TIMER_T *)((uint32_t)TIMER0 + CH_OFFSET[ch]);         
00001a  0088              LSLS     r0,r1,#2
00001c  4b05              LDR      r3,|L9.52|
00001e  5818              LDR      r0,[r3,r0]
000020  4b05              LDR      r3,|L9.56|
000022  18c2              ADDS     r2,r0,r3
;;;1712               tTMR->TEXCON.TEXDB = 0;
000024  6950              LDR      r0,[r2,#0x14]
000026  2340              MOVS     r3,#0x40
000028  4398              BICS     r0,r0,r3
00002a  6150              STR      r0,[r2,#0x14]
;;;1713               return E_SUCCESS;
00002c  2000              MOVS     r0,#0
                  |L9.46|
;;;1714           }
;;;1715   
;;;1716           default:
;;;1717           {
;;;1718               return E_DRVTIMER_CHANNEL ; 
;;;1719           }
;;;1720       }
;;;1721   }
00002e  4770              BX       lr
                  |L9.48|
000030  4802              LDR      r0,|L9.60|
000032  e7fc              B        |L9.46|
;;;1722   
                          ENDP

                  |L9.52|
                          DCD      CH_OFFSET
                  |L9.56|
                          DCD      0x40010000
                  |L9.60|
                          DCD      0xffff9701

                          AREA ||i.DrvTIMER_DisableCaptureInt||, CODE, READONLY, ALIGN=2

                  DrvTIMER_DisableCaptureInt PROC
;;;1448   /*---------------------------------------------------------------------------------------------------------*/
;;;1449   int32_t DrvTIMER_DisableCaptureInt(E_TIMER_CHANNEL ch)
000000  4601              MOV      r1,r0
;;;1450   {
;;;1451   	TIMER_T * tTMR;
;;;1452   
;;;1453      	switch (ch)
000002  2900              CMP      r1,#0
000004  d006              BEQ      |L10.20|
000006  2901              CMP      r1,#1
000008  d005              BEQ      |L10.22|
00000a  2902              CMP      r1,#2
00000c  d004              BEQ      |L10.24|
00000e  2903              CMP      r1,#3
000010  d10e              BNE      |L10.48|
000012  e002              B        |L10.26|
                  |L10.20|
;;;1454       {
;;;1455           case E_TMR0:
;;;1456           case E_TMR1:
000014  bf00              NOP      
                  |L10.22|
;;;1457           case E_TMR2:
000016  bf00              NOP      
                  |L10.24|
;;;1458   		case E_TMR3:
000018  bf00              NOP      
                  |L10.26|
;;;1459           {
;;;1460           	tTMR = (TIMER_T *)((uint32_t)TIMER0 + CH_OFFSET[ch]);         
00001a  0088              LSLS     r0,r1,#2
00001c  4b05              LDR      r3,|L10.52|
00001e  5818              LDR      r0,[r3,r0]
000020  4b05              LDR      r3,|L10.56|
000022  18c2              ADDS     r2,r0,r3
;;;1461               tTMR->TEXCON.TEXIEN = 0;
000024  6950              LDR      r0,[r2,#0x14]
000026  2320              MOVS     r3,#0x20
000028  4398              BICS     r0,r0,r3
00002a  6150              STR      r0,[r2,#0x14]
;;;1462               return E_SUCCESS;
00002c  2000              MOVS     r0,#0
                  |L10.46|
;;;1463           }
;;;1464   
;;;1465           default:
;;;1466           {
;;;1467               return E_DRVTIMER_CHANNEL ; 
;;;1468           }
;;;1469       }
;;;1470   }
00002e  4770              BX       lr
                  |L10.48|
000030  4802              LDR      r0,|L10.60|
000032  e7fc              B        |L10.46|
;;;1471   
                          ENDP

                  |L10.52|
                          DCD      CH_OFFSET
                  |L10.56|
                          DCD      0x40010000
                  |L10.60|
                          DCD      0xffff9701

                          AREA ||i.DrvTIMER_DisableCounterDebounce||, CODE, READONLY, ALIGN=2

                  DrvTIMER_DisableCounterDebounce PROC
;;;1771   /*---------------------------------------------------------------------------------------------------------*/
;;;1772   int32_t DrvTIMER_DisableCounterDebounce(E_TIMER_CHANNEL ch)
000000  4601              MOV      r1,r0
;;;1773   {
;;;1774   	TIMER_T * tTMR;
;;;1775   
;;;1776      	switch (ch)
000002  2900              CMP      r1,#0
000004  d006              BEQ      |L11.20|
000006  2901              CMP      r1,#1
000008  d005              BEQ      |L11.22|
00000a  2902              CMP      r1,#2
00000c  d004              BEQ      |L11.24|
00000e  2903              CMP      r1,#3
000010  d10e              BNE      |L11.48|
000012  e002              B        |L11.26|
                  |L11.20|
;;;1777       {
;;;1778           case E_TMR0:
;;;1779           case E_TMR1:
000014  bf00              NOP      
                  |L11.22|
;;;1780           case E_TMR2:
000016  bf00              NOP      
                  |L11.24|
;;;1781   		case E_TMR3:
000018  bf00              NOP      
                  |L11.26|
;;;1782           {
;;;1783           	tTMR = (TIMER_T *)((uint32_t)TIMER0 + CH_OFFSET[ch]);         
00001a  0088              LSLS     r0,r1,#2
00001c  4b05              LDR      r3,|L11.52|
00001e  5818              LDR      r0,[r3,r0]
000020  4b05              LDR      r3,|L11.56|
000022  18c2              ADDS     r2,r0,r3
;;;1784               tTMR->TEXCON.TCDB = 0;
000024  6950              LDR      r0,[r2,#0x14]
000026  2380              MOVS     r3,#0x80
000028  4398              BICS     r0,r0,r3
00002a  6150              STR      r0,[r2,#0x14]
;;;1785               return E_SUCCESS;
00002c  2000              MOVS     r0,#0
                  |L11.46|
;;;1786           }
;;;1787   
;;;1788           default:
;;;1789           {
;;;1790               return E_DRVTIMER_CHANNEL ; 
;;;1791           }
;;;1792       }
;;;1793   }
00002e  4770              BX       lr
                  |L11.48|
000030  4802              LDR      r0,|L11.60|
000032  e7fc              B        |L11.46|
;;;1794   
                          ENDP

                  |L11.52|
                          DCD      CH_OFFSET
                  |L11.56|
                          DCD      0x40010000
                  |L11.60|
                          DCD      0xffff9701

                          AREA ||i.DrvTIMER_DisableInt||, CODE, READONLY, ALIGN=2

                  DrvTIMER_DisableInt PROC
;;;775    /*---------------------------------------------------------------------------------------------------------*/
;;;776    int32_t DrvTIMER_DisableInt(E_TIMER_CHANNEL ch)
000000  b570              PUSH     {r4-r6,lr}
;;;777    {
000002  4604              MOV      r4,r0
;;;778    	TIMER_T * tTMR;
;;;779    
;;;780       	switch (ch)
000004  2c00              CMP      r4,#0
000006  d006              BEQ      |L12.22|
000008  2c01              CMP      r4,#1
00000a  d005              BEQ      |L12.24|
00000c  2c02              CMP      r4,#2
00000e  d004              BEQ      |L12.26|
000010  2c03              CMP      r4,#3
000012  d113              BNE      |L12.60|
000014  e002              B        |L12.28|
                  |L12.22|
;;;781        {
;;;782            case E_TMR0:
;;;783            case E_TMR1:
000016  bf00              NOP      
                  |L12.24|
;;;784            case E_TMR2:
000018  bf00              NOP      
                  |L12.26|
;;;785    		case E_TMR3:
00001a  bf00              NOP      
                  |L12.28|
;;;786            {
;;;787            	tTMR = (TIMER_T *)((uint32_t)TIMER0 + CH_OFFSET[ch]);         
00001c  00a0              LSLS     r0,r4,#2
00001e  4908              LDR      r1,|L12.64|
000020  5808              LDR      r0,[r1,r0]
000022  4908              LDR      r1,|L12.68|
000024  1845              ADDS     r5,r0,r1
;;;788                tTMR->TCSR.IE = 0;
000026  6828              LDR      r0,[r5,#0]
000028  0349              LSLS     r1,r1,#13
00002a  4388              BICS     r0,r0,r1
00002c  6028              STR      r0,[r5,#0]
;;;789    			NVIC_DisableIRQ((IRQn_Type)((uint32_t)TMR0_IRQn + (uint32_t)ch)); 
00002e  4621              MOV      r1,r4
000030  3108              ADDS     r1,r1,#8
000032  b248              SXTB     r0,r1
000034  f7fffffe          BL       NVIC_DisableIRQ
;;;790                return E_SUCCESS ;
000038  2000              MOVS     r0,#0
                  |L12.58|
;;;791            }
;;;792    
;;;793            default:
;;;794            {
;;;795                return E_DRVTIMER_CHANNEL ; 
;;;796            }
;;;797        }
;;;798    }
00003a  bd70              POP      {r4-r6,pc}
                  |L12.60|
00003c  4802              LDR      r0,|L12.72|
00003e  e7fc              B        |L12.58|
;;;799    
                          ENDP

                  |L12.64|
                          DCD      CH_OFFSET
                  |L12.68|
                          DCD      0x40010000
                  |L12.72|
                          DCD      0xffff9701

                          AREA ||i.DrvTIMER_EnableCapture||, CODE, READONLY, ALIGN=2

                  DrvTIMER_EnableCapture PROC
;;;1484   /*---------------------------------------------------------------------------------------------------------*/
;;;1485   int32_t DrvTIMER_EnableCapture(E_TIMER_CHANNEL ch)
000000  4601              MOV      r1,r0
;;;1486   {
;;;1487   	TIMER_T * tTMR;
;;;1488   
;;;1489      	switch (ch)
000002  2900              CMP      r1,#0
000004  d006              BEQ      |L13.20|
000006  2901              CMP      r1,#1
000008  d005              BEQ      |L13.22|
00000a  2902              CMP      r1,#2
00000c  d004              BEQ      |L13.24|
00000e  2903              CMP      r1,#3
000010  d10f              BNE      |L13.50|
000012  e002              B        |L13.26|
                  |L13.20|
;;;1490       {
;;;1491           case E_TMR0:
;;;1492           case E_TMR1:
000014  bf00              NOP      
                  |L13.22|
;;;1493           case E_TMR2:
000016  bf00              NOP      
                  |L13.24|
;;;1494   		case E_TMR3:
000018  bf00              NOP      
                  |L13.26|
;;;1495           {
;;;1496           	tTMR = (TIMER_T *)((uint32_t)TIMER0 + CH_OFFSET[ch]);         
00001a  0088              LSLS     r0,r1,#2
00001c  4b06              LDR      r3,|L13.56|
00001e  5818              LDR      r0,[r3,r0]
000020  4b06              LDR      r3,|L13.60|
000022  18c2              ADDS     r2,r0,r3
;;;1497               tTMR->TEXCON.TEXEN = 1;
000024  6950              LDR      r0,[r2,#0x14]
000026  2308              MOVS     r3,#8
000028  4398              BICS     r0,r0,r3
00002a  3008              ADDS     r0,r0,#8
00002c  6150              STR      r0,[r2,#0x14]
;;;1498               return E_SUCCESS;
00002e  2000              MOVS     r0,#0
                  |L13.48|
;;;1499           }
;;;1500   
;;;1501           default:
;;;1502           {
;;;1503               return E_DRVTIMER_CHANNEL ; 
;;;1504           }
;;;1505       }
;;;1506   }
000030  4770              BX       lr
                  |L13.50|
000032  4803              LDR      r0,|L13.64|
000034  e7fc              B        |L13.48|
;;;1507   
                          ENDP

000036  0000              DCW      0x0000
                  |L13.56|
                          DCD      CH_OFFSET
                  |L13.60|
                          DCD      0x40010000
                  |L13.64|
                          DCD      0xffff9701

                          AREA ||i.DrvTIMER_EnableCaptureDebounce||, CODE, READONLY, ALIGN=2

                  DrvTIMER_EnableCaptureDebounce PROC
;;;1663   /*---------------------------------------------------------------------------------------------------------*/
;;;1664   int32_t DrvTIMER_EnableCaptureDebounce(E_TIMER_CHANNEL ch)
000000  4601              MOV      r1,r0
;;;1665   {
;;;1666   	TIMER_T * tTMR;
;;;1667   
;;;1668      	switch (ch)
000002  2900              CMP      r1,#0
000004  d006              BEQ      |L14.20|
000006  2901              CMP      r1,#1
000008  d005              BEQ      |L14.22|
00000a  2902              CMP      r1,#2
00000c  d004              BEQ      |L14.24|
00000e  2903              CMP      r1,#3
000010  d10f              BNE      |L14.50|
000012  e002              B        |L14.26|
                  |L14.20|
;;;1669       {
;;;1670           case E_TMR0:
;;;1671           case E_TMR1:
000014  bf00              NOP      
                  |L14.22|
;;;1672           case E_TMR2:
000016  bf00              NOP      
                  |L14.24|
;;;1673   		case E_TMR3:
000018  bf00              NOP      
                  |L14.26|
;;;1674           {
;;;1675           	tTMR = (TIMER_T *)((uint32_t)TIMER0 + CH_OFFSET[ch]);         
00001a  0088              LSLS     r0,r1,#2
00001c  4b06              LDR      r3,|L14.56|
00001e  5818              LDR      r0,[r3,r0]
000020  4b06              LDR      r3,|L14.60|
000022  18c2              ADDS     r2,r0,r3
;;;1676               tTMR->TEXCON.TEXDB = 1;
000024  6950              LDR      r0,[r2,#0x14]
000026  2340              MOVS     r3,#0x40
000028  4398              BICS     r0,r0,r3
00002a  3040              ADDS     r0,r0,#0x40
00002c  6150              STR      r0,[r2,#0x14]
;;;1677               return E_SUCCESS;
00002e  2000              MOVS     r0,#0
                  |L14.48|
;;;1678           }
;;;1679   
;;;1680           default:
;;;1681           {
;;;1682               return E_DRVTIMER_CHANNEL ; 
;;;1683           }
;;;1684       }
;;;1685   }
000030  4770              BX       lr
                  |L14.50|
000032  4803              LDR      r0,|L14.64|
000034  e7fc              B        |L14.48|
;;;1686   
                          ENDP

000036  0000              DCW      0x0000
                  |L14.56|
                          DCD      CH_OFFSET
                  |L14.60|
                          DCD      0x40010000
                  |L14.64|
                          DCD      0xffff9701

                          AREA ||i.DrvTIMER_EnableCaptureInt||, CODE, READONLY, ALIGN=2

                  DrvTIMER_EnableCaptureInt PROC
;;;1412   /*---------------------------------------------------------------------------------------------------------*/
;;;1413   int32_t DrvTIMER_EnableCaptureInt(E_TIMER_CHANNEL ch)
000000  4601              MOV      r1,r0
;;;1414   {
;;;1415   	TIMER_T * tTMR;
;;;1416   
;;;1417      	switch (ch)
000002  2900              CMP      r1,#0
000004  d006              BEQ      |L15.20|
000006  2901              CMP      r1,#1
000008  d005              BEQ      |L15.22|
00000a  2902              CMP      r1,#2
00000c  d004              BEQ      |L15.24|
00000e  2903              CMP      r1,#3
000010  d10f              BNE      |L15.50|
000012  e002              B        |L15.26|
                  |L15.20|
;;;1418       {
;;;1419           case E_TMR0:
;;;1420           case E_TMR1:
000014  bf00              NOP      
                  |L15.22|
;;;1421           case E_TMR2:
000016  bf00              NOP      
                  |L15.24|
;;;1422   		case E_TMR3:
000018  bf00              NOP      
                  |L15.26|
;;;1423           {
;;;1424           	tTMR = (TIMER_T *)((uint32_t)TIMER0 + CH_OFFSET[ch]);         
00001a  0088              LSLS     r0,r1,#2
00001c  4b06              LDR      r3,|L15.56|
00001e  5818              LDR      r0,[r3,r0]
000020  4b06              LDR      r3,|L15.60|
000022  18c2              ADDS     r2,r0,r3
;;;1425               tTMR->TEXCON.TEXIEN = 1;
000024  6950              LDR      r0,[r2,#0x14]
000026  2320              MOVS     r3,#0x20
000028  4398              BICS     r0,r0,r3
00002a  3020              ADDS     r0,r0,#0x20
00002c  6150              STR      r0,[r2,#0x14]
;;;1426               return E_SUCCESS;
00002e  2000              MOVS     r0,#0
                  |L15.48|
;;;1427           }
;;;1428   
;;;1429           default:
;;;1430           {
;;;1431               return E_DRVTIMER_CHANNEL ; 
;;;1432           }
;;;1433       }
;;;1434   }
000030  4770              BX       lr
                  |L15.50|
000032  4803              LDR      r0,|L15.64|
000034  e7fc              B        |L15.48|
;;;1435   
                          ENDP

000036  0000              DCW      0x0000
                  |L15.56|
                          DCD      CH_OFFSET
                  |L15.60|
                          DCD      0x40010000
                  |L15.64|
                          DCD      0xffff9701

                          AREA ||i.DrvTIMER_EnableCounterDebounce||, CODE, READONLY, ALIGN=2

                  DrvTIMER_EnableCounterDebounce PROC
;;;1735   /*---------------------------------------------------------------------------------------------------------*/
;;;1736   int32_t DrvTIMER_EnableCounterDebounce(E_TIMER_CHANNEL ch)
000000  4601              MOV      r1,r0
;;;1737   {
;;;1738   	TIMER_T * tTMR;
;;;1739   
;;;1740      	switch (ch)
000002  2900              CMP      r1,#0
000004  d006              BEQ      |L16.20|
000006  2901              CMP      r1,#1
000008  d005              BEQ      |L16.22|
00000a  2902              CMP      r1,#2
00000c  d004              BEQ      |L16.24|
00000e  2903              CMP      r1,#3
000010  d10f              BNE      |L16.50|
000012  e002              B        |L16.26|
                  |L16.20|
;;;1741       {
;;;1742           case E_TMR0:
;;;1743           case E_TMR1:
000014  bf00              NOP      
                  |L16.22|
;;;1744           case E_TMR2:
000016  bf00              NOP      
                  |L16.24|
;;;1745   		case E_TMR3:
000018  bf00              NOP      
                  |L16.26|
;;;1746           {
;;;1747           	tTMR = (TIMER_T *)((uint32_t)TIMER0 + CH_OFFSET[ch]);         
00001a  0088              LSLS     r0,r1,#2
00001c  4b06              LDR      r3,|L16.56|
00001e  5818              LDR      r0,[r3,r0]
000020  4b06              LDR      r3,|L16.60|
000022  18c2              ADDS     r2,r0,r3
;;;1748               tTMR->TEXCON.TCDB = 1;
000024  6950              LDR      r0,[r2,#0x14]
000026  2380              MOVS     r3,#0x80
000028  4398              BICS     r0,r0,r3
00002a  3080              ADDS     r0,r0,#0x80
00002c  6150              STR      r0,[r2,#0x14]
;;;1749               return E_SUCCESS;
00002e  2000              MOVS     r0,#0
                  |L16.48|
;;;1750           }
;;;1751   
;;;1752           default:
;;;1753           {
;;;1754               return E_DRVTIMER_CHANNEL ; 
;;;1755           }
;;;1756       }
;;;1757   }
000030  4770              BX       lr
                  |L16.50|
000032  4803              LDR      r0,|L16.64|
000034  e7fc              B        |L16.48|
;;;1758   
                          ENDP

000036  0000              DCW      0x0000
                  |L16.56|
                          DCD      CH_OFFSET
                  |L16.60|
                          DCD      0x40010000
                  |L16.64|
                          DCD      0xffff9701

                          AREA ||i.DrvTIMER_EnableInt||, CODE, READONLY, ALIGN=2

                  DrvTIMER_EnableInt PROC
;;;738    /*---------------------------------------------------------------------------------------------------------*/
;;;739    int32_t DrvTIMER_EnableInt(E_TIMER_CHANNEL ch)
000000  b570              PUSH     {r4-r6,lr}
;;;740    {
000002  4604              MOV      r4,r0
;;;741    	TIMER_T * tTMR;
;;;742    
;;;743       	switch (ch)
000004  2c00              CMP      r4,#0
000006  d006              BEQ      |L17.22|
000008  2c01              CMP      r4,#1
00000a  d005              BEQ      |L17.24|
00000c  2c02              CMP      r4,#2
00000e  d004              BEQ      |L17.26|
000010  2c03              CMP      r4,#3
000012  d11a              BNE      |L17.74|
000014  e002              B        |L17.28|
                  |L17.22|
;;;744        {
;;;745            case E_TMR0:
;;;746            case E_TMR1:
000016  bf00              NOP      
                  |L17.24|
;;;747            case E_TMR2:
000018  bf00              NOP      
                  |L17.26|
;;;748    		case E_TMR3:
00001a  bf00              NOP      
                  |L17.28|
;;;749            {
;;;750            	tTMR = (TIMER_T *)((uint32_t)TIMER0 + CH_OFFSET[ch]);         
00001c  00a0              LSLS     r0,r4,#2
00001e  490c              LDR      r1,|L17.80|
000020  5808              LDR      r0,[r1,r0]
000022  490c              LDR      r1,|L17.84|
000024  1845              ADDS     r5,r0,r1
;;;751                tTMR->TCSR.IE = 1;
000026  6828              LDR      r0,[r5,#0]
000028  0349              LSLS     r1,r1,#13
00002a  4388              BICS     r0,r0,r1
00002c  1840              ADDS     r0,r0,r1
00002e  6028              STR      r0,[r5,#0]
;;;752                NVIC_SetPriority((IRQn_Type)((uint32_t)TMR0_IRQn + (uint32_t)ch), (1<<__NVIC_PRIO_BITS) - 2);
000030  4621              MOV      r1,r4
000032  3108              ADDS     r1,r1,#8
000034  b248              SXTB     r0,r1
000036  2102              MOVS     r1,#2
000038  f7fffffe          BL       NVIC_SetPriority
;;;753    			NVIC_EnableIRQ((IRQn_Type)((uint32_t)TMR0_IRQn + (uint32_t)ch)); 
00003c  4621              MOV      r1,r4
00003e  3108              ADDS     r1,r1,#8
000040  b248              SXTB     r0,r1
000042  f7fffffe          BL       NVIC_EnableIRQ
;;;754                return E_SUCCESS ;
000046  2000              MOVS     r0,#0
                  |L17.72|
;;;755            }
;;;756    
;;;757            default:
;;;758            {
;;;759                return E_DRVTIMER_CHANNEL ; 
;;;760            }
;;;761        }
;;;762    }
000048  bd70              POP      {r4-r6,pc}
                  |L17.74|
00004a  4803              LDR      r0,|L17.88|
00004c  e7fc              B        |L17.72|
;;;763    
                          ENDP

00004e  0000              DCW      0x0000
                  |L17.80|
                          DCD      CH_OFFSET
                  |L17.84|
                          DCD      0x40010000
                  |L17.88|
                          DCD      0xffff9701

                          AREA ||i.DrvTIMER_GetCaptureData||, CODE, READONLY, ALIGN=2

                  DrvTIMER_GetCaptureData PROC
;;;1557   /*---------------------------------------------------------------------------------------------------------*/
;;;1558   uint32_t DrvTIMER_GetCaptureData(E_TIMER_CHANNEL ch)
000000  4601              MOV      r1,r0
;;;1559   {
;;;1560   	TIMER_T * tTMR;
;;;1561   
;;;1562      	switch (ch)
000002  2900              CMP      r1,#0
000004  d006              BEQ      |L18.20|
000006  2901              CMP      r1,#1
000008  d005              BEQ      |L18.22|
00000a  2902              CMP      r1,#2
00000c  d004              BEQ      |L18.24|
00000e  2903              CMP      r1,#3
000010  d10a              BNE      |L18.40|
000012  e002              B        |L18.26|
                  |L18.20|
;;;1563       {
;;;1564           case E_TMR0:
;;;1565           case E_TMR1:
000014  bf00              NOP      
                  |L18.22|
;;;1566           case E_TMR2:
000016  bf00              NOP      
                  |L18.24|
;;;1567   		case E_TMR3:
000018  bf00              NOP      
                  |L18.26|
;;;1568           {
;;;1569           	tTMR = (TIMER_T *)((uint32_t)TIMER0 + CH_OFFSET[ch]);         
00001a  0088              LSLS     r0,r1,#2
00001c  4b03              LDR      r3,|L18.44|
00001e  5818              LDR      r0,[r3,r0]
000020  4b03              LDR      r3,|L18.48|
000022  18c2              ADDS     r2,r0,r3
;;;1570               return tTMR->TCAP;
000024  6910              LDR      r0,[r2,#0x10]
                  |L18.38|
;;;1571           }
;;;1572   
;;;1573           default:
;;;1574           {
;;;1575               return E_DRVTIMER_CHANNEL ; 
;;;1576           }
;;;1577       }
;;;1578   }
000026  4770              BX       lr
                  |L18.40|
000028  4802              LDR      r0,|L18.52|
00002a  e7fc              B        |L18.38|
;;;1579   
                          ENDP

                  |L18.44|
                          DCD      CH_OFFSET
                  |L18.48|
                          DCD      0x40010000
                  |L18.52|
                          DCD      0xffff9701

                          AREA ||i.DrvTIMER_GetCaptureIntFlag||, CODE, READONLY, ALIGN=2

                  DrvTIMER_GetCaptureIntFlag PROC
;;;1592   /*---------------------------------------------------------------------------------------------------------*/
;;;1593   int32_t DrvTIMER_GetCaptureIntFlag(E_TIMER_CHANNEL ch)
000000  4601              MOV      r1,r0
;;;1594   {
;;;1595   	TIMER_T * tTMR;
;;;1596   
;;;1597      	switch (ch)
000002  2900              CMP      r1,#0
000004  d006              BEQ      |L19.20|
000006  2901              CMP      r1,#1
000008  d005              BEQ      |L19.22|
00000a  2902              CMP      r1,#2
00000c  d004              BEQ      |L19.24|
00000e  2903              CMP      r1,#3
000010  d10c              BNE      |L19.44|
000012  e002              B        |L19.26|
                  |L19.20|
;;;1598       {
;;;1599           case E_TMR0:
;;;1600           case E_TMR1:
000014  bf00              NOP      
                  |L19.22|
;;;1601           case E_TMR2:
000016  bf00              NOP      
                  |L19.24|
;;;1602   		case E_TMR3:
000018  bf00              NOP      
                  |L19.26|
;;;1603           {
;;;1604           	tTMR = (TIMER_T *)((uint32_t)TIMER0 + CH_OFFSET[ch]);         
00001a  0088              LSLS     r0,r1,#2
00001c  4b04              LDR      r3,|L19.48|
00001e  5818              LDR      r0,[r3,r0]
000020  4b04              LDR      r3,|L19.52|
000022  18c2              ADDS     r2,r0,r3
;;;1605               return tTMR->TEXISR.TEXIF;
000024  6990              LDR      r0,[r2,#0x18]
000026  07c0              LSLS     r0,r0,#31
000028  0fc0              LSRS     r0,r0,#31
                  |L19.42|
;;;1606           }
;;;1607   
;;;1608           default:
;;;1609           {
;;;1610               return E_DRVTIMER_CHANNEL ; 
;;;1611           }
;;;1612       }
;;;1613   }
00002a  4770              BX       lr
                  |L19.44|
00002c  4802              LDR      r0,|L19.56|
00002e  e7fc              B        |L19.42|
;;;1614   
                          ENDP

                  |L19.48|
                          DCD      CH_OFFSET
                  |L19.52|
                          DCD      0x40010000
                  |L19.56|
                          DCD      0xffff9701

                          AREA ||i.DrvTIMER_GetCounters||, CODE, READONLY, ALIGN=2

                  DrvTIMER_GetCounters PROC
;;;1212   /*---------------------------------------------------------------------------------------------------------*/
;;;1213   uint32_t DrvTIMER_GetCounters(E_TIMER_CHANNEL ch)
000000  4601              MOV      r1,r0
;;;1214   {
;;;1215   	TIMER_T * tTMR;
;;;1216   
;;;1217      	switch (ch)
000002  2900              CMP      r1,#0
000004  d006              BEQ      |L20.20|
000006  2901              CMP      r1,#1
000008  d005              BEQ      |L20.22|
00000a  2902              CMP      r1,#2
00000c  d004              BEQ      |L20.24|
00000e  2903              CMP      r1,#3
000010  d10a              BNE      |L20.40|
000012  e002              B        |L20.26|
                  |L20.20|
;;;1218       {
;;;1219           case E_TMR0:
;;;1220           case E_TMR1:
000014  bf00              NOP      
                  |L20.22|
;;;1221           case E_TMR2:
000016  bf00              NOP      
                  |L20.24|
;;;1222   		case E_TMR3:
000018  bf00              NOP      
                  |L20.26|
;;;1223           {
;;;1224           	tTMR = (TIMER_T *)((uint32_t)TIMER0 + CH_OFFSET[ch]);         
00001a  0088              LSLS     r0,r1,#2
00001c  4b03              LDR      r3,|L20.44|
00001e  5818              LDR      r0,[r3,r0]
000020  4b03              LDR      r3,|L20.48|
000022  18c2              ADDS     r2,r0,r3
;;;1225               return tTMR->TDR;
000024  68d0              LDR      r0,[r2,#0xc]
                  |L20.38|
;;;1226           }
;;;1227   
;;;1228           default:
;;;1229           {
;;;1230               return E_DRVTIMER_CHANNEL ; 
;;;1231           }
;;;1232       }
;;;1233   }
000026  4770              BX       lr
                  |L20.40|
000028  4802              LDR      r0,|L20.52|
00002a  e7fc              B        |L20.38|
;;;1234   
                          ENDP

                  |L20.44|
                          DCD      CH_OFFSET
                  |L20.48|
                          DCD      0x40010000
                  |L20.52|
                          DCD      0xffff9701

                          AREA ||i.DrvTIMER_GetIntFlag||, CODE, READONLY, ALIGN=2

                  DrvTIMER_GetIntFlag PROC
;;;811    /*---------------------------------------------------------------------------------------------------------*/
;;;812    int32_t DrvTIMER_GetIntFlag(E_TIMER_CHANNEL ch)
000000  4601              MOV      r1,r0
;;;813    {
;;;814    	if (ch == E_TMR0 )
000002  2900              CMP      r1,#0
000004  d104              BNE      |L21.16|
;;;815    		return TIMER0->TISR.TIF;
000006  480d              LDR      r0,|L21.60|
000008  6880              LDR      r0,[r0,#8]
00000a  07c0              LSLS     r0,r0,#31
00000c  0fc0              LSRS     r0,r0,#31
                  |L21.14|
;;;816    	else if(ch == E_TMR1 )									 
;;;817    		return TIMER1->TISR.TIF;
;;;818    	else if(ch == E_TMR2 )
;;;819    		return TIMER2->TISR.TIF;
;;;820    	else if(ch == E_TMR3 )
;;;821    		return TIMER3->TISR.TIF;
;;;822    	else 
;;;823        	return E_DRVTIMER_CHANNEL;
;;;824    }
00000e  4770              BX       lr
                  |L21.16|
000010  2901              CMP      r1,#1                 ;816
000012  d103              BNE      |L21.28|
000014  4809              LDR      r0,|L21.60|
000016  6a80              LDR      r0,[r0,#0x28]         ;817
000018  4008              ANDS     r0,r0,r1              ;817
00001a  e7f8              B        |L21.14|
                  |L21.28|
00001c  2902              CMP      r1,#2                 ;818
00001e  d104              BNE      |L21.42|
000020  4807              LDR      r0,|L21.64|
000022  6880              LDR      r0,[r0,#8]            ;819
000024  07c0              LSLS     r0,r0,#31             ;819
000026  0fc0              LSRS     r0,r0,#31             ;819
000028  e7f1              B        |L21.14|
                  |L21.42|
00002a  2903              CMP      r1,#3                 ;820
00002c  d104              BNE      |L21.56|
00002e  4804              LDR      r0,|L21.64|
000030  6a80              LDR      r0,[r0,#0x28]         ;821
000032  07c0              LSLS     r0,r0,#31             ;821
000034  0fc0              LSRS     r0,r0,#31             ;821
000036  e7ea              B        |L21.14|
                  |L21.56|
000038  4802              LDR      r0,|L21.68|
00003a  e7e8              B        |L21.14|
;;;825    
                          ENDP

                  |L21.60|
                          DCD      0x40010000
                  |L21.64|
                          DCD      0x40110000
                  |L21.68|
                          DCD      0xffff9701

                          AREA ||i.DrvTIMER_GetIntTicks||, CODE, READONLY, ALIGN=2

                  DrvTIMER_GetIntTicks PROC
;;;902    /*---------------------------------------------------------------------------------------------------------*/
;;;903    uint32_t DrvTIMER_GetIntTicks(E_TIMER_CHANNEL ch)
000000  4601              MOV      r1,r0
;;;904    {
;;;905        switch (ch)
000002  2900              CMP      r1,#0
000004  d006              BEQ      |L22.20|
000006  2901              CMP      r1,#1
000008  d007              BEQ      |L22.26|
00000a  2902              CMP      r1,#2
00000c  d008              BEQ      |L22.32|
00000e  2903              CMP      r1,#3
000010  d10c              BNE      |L22.44|
000012  e008              B        |L22.38|
                  |L22.20|
;;;906        {
;;;907            case E_TMR0:
;;;908            {
;;;909                return uTimer0Tick;  
000014  4806              LDR      r0,|L22.48|
000016  6800              LDR      r0,[r0,#0]  ; uTimer0Tick
                  |L22.24|
;;;910            }
;;;911    
;;;912            case E_TMR1:
;;;913            {
;;;914                return uTimer1Tick;
;;;915            }   
;;;916    
;;;917            case E_TMR2:
;;;918            {
;;;919                return uTimer2Tick;
;;;920            }
;;;921    
;;;922            case E_TMR3:
;;;923            {
;;;924                return uTimer3Tick;
;;;925            }
;;;926    
;;;927            default:
;;;928            {
;;;929                return E_DRVTIMER_CHANNEL;
;;;930            }
;;;931        }
;;;932    }
000018  4770              BX       lr
                  |L22.26|
00001a  4806              LDR      r0,|L22.52|
00001c  6800              LDR      r0,[r0,#0]            ;914  ; uTimer1Tick
00001e  e7fb              B        |L22.24|
                  |L22.32|
000020  4805              LDR      r0,|L22.56|
000022  6800              LDR      r0,[r0,#0]            ;919  ; uTimer2Tick
000024  e7f8              B        |L22.24|
                  |L22.38|
000026  4805              LDR      r0,|L22.60|
000028  6800              LDR      r0,[r0,#0]            ;924  ; uTimer3Tick
00002a  e7f5              B        |L22.24|
                  |L22.44|
00002c  4804              LDR      r0,|L22.64|
00002e  e7f3              B        |L22.24|
;;;933    
                          ENDP

                  |L22.48|
                          DCD      uTimer0Tick
                  |L22.52|
                          DCD      uTimer1Tick
                  |L22.56|
                          DCD      uTimer2Tick
                  |L22.60|
                          DCD      uTimer3Tick
                  |L22.64|
                          DCD      0xffff9701

                          AREA ||i.DrvTIMER_GetVersion||, CODE, READONLY, ALIGN=2

                  DrvTIMER_GetVersion PROC
;;;1844   /*---------------------------------------------------------------------------------------------------------*/
;;;1845   uint32_t DrvTIMER_GetVersion(void)
000000  4800              LDR      r0,|L23.4|
;;;1846   {
;;;1847       return DRVTIMER_VERSION_NUM;
;;;1848   }
000002  4770              BX       lr
;;;1849   
                          ENDP

                  |L23.4|
                          DCD      0x00010405

                          AREA ||i.DrvTIMER_Init||, CODE, READONLY, ALIGN=2

                  DrvTIMER_Init PROC
;;;281    /*---------------------------------------------------------------------------------------------------------*/
;;;282    void DrvTIMER_Init(void)
000000  2001              MOVS     r0,#1
;;;283    {
;;;284        bIsTimer0Initial    = TRUE;
000002  4904              LDR      r1,|L24.20|
000004  6008              STR      r0,[r1,#0]  ; bIsTimer0Initial
;;;285        bIsTimer1Initial    = TRUE;
000006  4904              LDR      r1,|L24.24|
000008  6008              STR      r0,[r1,#0]  ; bIsTimer1Initial
;;;286        bIsTimer2Initial    = TRUE;
00000a  4904              LDR      r1,|L24.28|
00000c  6008              STR      r0,[r1,#0]  ; bIsTimer2Initial
;;;287        bIsTimer3Initial    = TRUE;
00000e  4904              LDR      r1,|L24.32|
000010  6008              STR      r0,[r1,#0]  ; bIsTimer3Initial
;;;288    }
000012  4770              BX       lr
;;;289    
                          ENDP

                  |L24.20|
                          DCD      bIsTimer0Initial
                  |L24.24|
                          DCD      bIsTimer1Initial
                  |L24.28|
                          DCD      bIsTimer2Initial
                  |L24.32|
                          DCD      bIsTimer3Initial

                          AREA ||i.DrvTIMER_Open||, CODE, READONLY, ALIGN=2

                  DrvTIMER_Open PROC
;;;306    /*---------------------------------------------------------------------------------------------------------*/
;;;307    int32_t DrvTIMER_Open(E_TIMER_CHANNEL ch, uint32_t uTicksPerSecond, E_TIMER_OPMODE op_mode)
000000  b5f7              PUSH     {r0-r2,r4-r7,lr}
;;;308    {
000002  b082              SUB      sp,sp,#8
000004  460f              MOV      r7,r1
000006  4616              MOV      r6,r2
;;;309        uint32_t i;
;;;310        uint32_t uRegTcmpr, uRegTcr = 0x0;
000008  2000              MOVS     r0,#0
00000a  9001              STR      r0,[sp,#4]
;;;311    
;;;312        switch (ch)
00000c  9802              LDR      r0,[sp,#8]
00000e  2800              CMP      r0,#0
000010  d006              BEQ      |L25.32|
000012  2801              CMP      r0,#1
000014  d04a              BEQ      |L25.172|
000016  2802              CMP      r0,#2
000018  d07e              BEQ      |L25.280|
00001a  2803              CMP      r0,#3
00001c  d17d              BNE      |L25.282|
00001e  e0d2              B        |L25.454|
                  |L25.32|
;;;313        {
;;;314            case E_TMR0:
;;;315            {
;;;316                if ((bIsTimer0Initial != TRUE) || (bIsTimer0Used != FALSE))
000020  489a              LDR      r0,|L25.652|
000022  6800              LDR      r0,[r0,#0]  ; bIsTimer0Initial
000024  2801              CMP      r0,#1
000026  d103              BNE      |L25.48|
000028  4899              LDR      r0,|L25.656|
00002a  6800              LDR      r0,[r0,#0]  ; bIsTimer0Used
00002c  2800              CMP      r0,#0
00002e  d002              BEQ      |L25.54|
                  |L25.48|
;;;317                    return E_DRVTIMER_EIO;
000030  4898              LDR      r0,|L25.660|
                  |L25.50|
;;;318                
;;;319                bIsTimer0Used = TRUE;
;;;320               
;;;321                SYSCLK->APBCLK.TMR0_EN = 1;
;;;322                                                                  
;;;323                outpw((uint32_t)&TIMER0->TCSR, 0);                  /* disable timer */
;;;324               
;;;325                TIMER0->TISR.TIF = 1;                               /* write 1 to clear for safty */
;;;326                                   
;;;327                for (i=0; i<TIMER_EVENT_COUNT; i++)
;;;328                {
;;;329                    tTime0Event[i].active = FALSE;
;;;330                }
;;;331    
;;;332                uTimer0Tick = 0;            
;;;333                _sys_uTimer0TickPerSecond = uTicksPerSecond;
;;;334                        
;;;335                uRegTcmpr = CalTimerInitValue(GetTimerClock(E_TMR0), uTicksPerSecond); 
;;;336                if (uRegTcmpr == (uint32_t)-1)      
;;;337                {
;;;338                    return E_DRVTIMER_CLOCK_RATE;           
;;;339                }
;;;340    
;;;341                TIMER0->TCMPR = (uRegTcmpr << 8) >> 8;
;;;342                outpw((uint32_t)&TIMER0->TCSR,  (uRegTcr|(uRegTcmpr>>24))|(op_mode<<27));               
;;;343                break;
;;;344            }
;;;345    
;;;346            case E_TMR1:
;;;347            {
;;;348                if ((bIsTimer1Initial != TRUE) || (bIsTimer1Used != FALSE))
;;;349                    return E_DRVTIMER_EIO;
;;;350    
;;;351                bIsTimer1Used = TRUE;
;;;352    
;;;353                SYSCLK->APBCLK.TMR1_EN = 1;
;;;354                
;;;355                outpw((uint32_t)&TIMER1->TCSR, 0);                  /* disable timer */
;;;356                
;;;357                TIMER1->TISR.TIF = 1;                               /* write 1 to clear for safty */
;;;358    
;;;359                for (i=0; i<TIMER_EVENT_COUNT; i++)
;;;360                {
;;;361                    tTime1Event[i].active = FALSE;
;;;362                }
;;;363    
;;;364                uTimer1Tick = 0;
;;;365                _sys_uTimer1TickPerSecond = uTicksPerSecond;
;;;366    
;;;367                uRegTcmpr = CalTimerInitValue(GetTimerClock(E_TMR1), uTicksPerSecond); 
;;;368                if(uRegTcmpr == (uint32_t)-1)       
;;;369                {
;;;370                    return E_DRVTIMER_CLOCK_RATE;           
;;;371                }
;;;372    
;;;373                TIMER1->TCMPR = (uRegTcmpr << 8) >> 8;
;;;374                outpw((uint32_t)&TIMER1->TCSR,  (uRegTcr|(uRegTcmpr>>24))|(op_mode<<27));   
;;;375                break;
;;;376            }
;;;377    
;;;378            case E_TMR2:
;;;379            {
;;;380                if ((bIsTimer2Initial != TRUE) || (bIsTimer2Used != FALSE))
;;;381                    return E_DRVTIMER_EIO;    
;;;382    
;;;383                bIsTimer2Used = TRUE;
;;;384    
;;;385                SYSCLK->APBCLK.TMR2_EN =1;
;;;386                
;;;387                outpw((uint32_t)&TIMER2->TCSR, 0);                  /* disable timer */
;;;388    
;;;389                TIMER2->TISR.TIF = 1;                               /* write 1 to clear for safty */
;;;390    
;;;391                for (i=0; i<TIMER_EVENT_COUNT; i++)
;;;392                {
;;;393                    tTime2Event[i].active = FALSE;
;;;394                }
;;;395    
;;;396                uTimer2Tick = 0;
;;;397                _sys_uTimer2TickPerSecond = uTicksPerSecond;
;;;398    
;;;399                uRegTcmpr = CalTimerInitValue(GetTimerClock(E_TMR2), uTicksPerSecond); 
;;;400                if(uRegTcmpr == (uint32_t)-1)       
;;;401                {
;;;402                    return E_DRVTIMER_CLOCK_RATE;           
;;;403                }
;;;404    
;;;405                TIMER2->TCMPR = (uRegTcmpr << 8) >> 8;  
;;;406                outpw((uint32_t)&TIMER2->TCSR,  (uRegTcr|(uRegTcmpr>>24))|(op_mode<<27));   
;;;407                break;
;;;408            }
;;;409    
;;;410            case E_TMR3:
;;;411            {
;;;412                if ((bIsTimer3Initial != TRUE) || (bIsTimer3Used != FALSE))
;;;413                    return E_DRVTIMER_EIO;
;;;414    
;;;415                bIsTimer3Used = TRUE;
;;;416    
;;;417                SYSCLK->APBCLK.TMR3_EN = 1;
;;;418    
;;;419                outpw((uint32_t)&TIMER3->TCSR, 0);                  /* disable timer */
;;;420    
;;;421                TIMER3->TISR.TIF = 1;                               /* write 1 to clear for safty */
;;;422    
;;;423                for (i=0; i<TIMER_EVENT_COUNT; i++)
;;;424                {
;;;425                    tTime3Event[i].active = FALSE;
;;;426                }
;;;427    
;;;428                uTimer3Tick = 0;
;;;429                _sys_uTimer3TickPerSecond = uTicksPerSecond;
;;;430                
;;;431                uRegTcmpr = CalTimerInitValue(GetTimerClock(E_TMR3), uTicksPerSecond); 
;;;432                if(uRegTcmpr == (uint32_t)-1)       
;;;433                {
;;;434                    return E_DRVTIMER_CLOCK_RATE;           
;;;435                }
;;;436    
;;;437                TIMER3->TCMPR = (uRegTcmpr << 8) >> 8;
;;;438                outpw((uint32_t)&TIMER3->TCSR,  (uRegTcr|(uRegTcmpr>>24))|(op_mode<<27));    
;;;439                break;
;;;440            }
;;;441    
;;;442            default:
;;;443            {
;;;444                return E_DRVTIMER_CHANNEL ;
;;;445            }
;;;446        }
;;;447    
;;;448       	if (op_mode == E_TOGGLE_MODE)
;;;449        {
;;;450            switch (ch)
;;;451            {
;;;452                case E_TMR0:
;;;453                case E_TMR1:
;;;454                case E_TMR2:
;;;455        		case E_TMR3:
;;;456                {
;;;457    		    	DrvGPIO_InitFunction((E_DRVGPIO_FUNC)((uint32_t)E_FUNC_TMR0 + (uint32_t)ch));	
;;;458                }
;;;459        
;;;460                default:
;;;461                {
;;;462                    return E_DRVTIMER_CHANNEL ; 
;;;463                }
;;;464            }
;;;465        }
;;;466    
;;;467        return E_SUCCESS;
;;;468    }
000032  b005              ADD      sp,sp,#0x14
000034  bdf0              POP      {r4-r7,pc}
                  |L25.54|
000036  2001              MOVS     r0,#1                 ;319
000038  4995              LDR      r1,|L25.656|
00003a  6008              STR      r0,[r1,#0]            ;319  ; bIsTimer0Used
00003c  4896              LDR      r0,|L25.664|
00003e  6880              LDR      r0,[r0,#8]            ;321
000040  2104              MOVS     r1,#4                 ;321
000042  4388              BICS     r0,r0,r1              ;321
000044  1d00              ADDS     r0,r0,#4              ;321
000046  4994              LDR      r1,|L25.664|
000048  6088              STR      r0,[r1,#8]            ;321
00004a  2000              MOVS     r0,#0                 ;323
00004c  4993              LDR      r1,|L25.668|
00004e  6008              STR      r0,[r1,#0]            ;323
000050  4608              MOV      r0,r1                 ;325
000052  6880              LDR      r0,[r0,#8]            ;325
000054  0840              LSRS     r0,r0,#1              ;325
000056  0040              LSLS     r0,r0,#1              ;325
000058  1c40              ADDS     r0,r0,#1              ;325
00005a  6088              STR      r0,[r1,#8]            ;325
00005c  2500              MOVS     r5,#0                 ;327
00005e  e005              B        |L25.108|
                  |L25.96|
000060  2100              MOVS     r1,#0                 ;329
000062  2014              MOVS     r0,#0x14              ;329
000064  4368              MULS     r0,r5,r0              ;329
000066  4a8e              LDR      r2,|L25.672|
000068  5011              STR      r1,[r2,r0]            ;329
00006a  1c6d              ADDS     r5,r5,#1              ;327
                  |L25.108|
00006c  2d00              CMP      r5,#0                 ;327
00006e  d0f7              BEQ      |L25.96|
000070  2000              MOVS     r0,#0                 ;332
000072  498c              LDR      r1,|L25.676|
000074  6008              STR      r0,[r1,#0]            ;332  ; uTimer0Tick
000076  488c              LDR      r0,|L25.680|
000078  6007              STR      r7,[r0,#0]            ;333  ; _sys_uTimer0TickPerSecond
00007a  2000              MOVS     r0,#0                 ;335
00007c  f7fffffe          BL       GetTimerClock
000080  4639              MOV      r1,r7                 ;335
000082  9000              STR      r0,[sp,#0]            ;335
000084  f7fffffe          BL       CalTimerInitValue
000088  4604              MOV      r4,r0                 ;335
00008a  1c60              ADDS     r0,r4,#1              ;336
00008c  d102              BNE      |L25.148|
00008e  4881              LDR      r0,|L25.660|
000090  1e40              SUBS     r0,r0,#1              ;338
000092  e7ce              B        |L25.50|
                  |L25.148|
000094  0220              LSLS     r0,r4,#8              ;341
000096  0a00              LSRS     r0,r0,#8              ;341
000098  4980              LDR      r1,|L25.668|
00009a  6048              STR      r0,[r1,#4]            ;341
00009c  0e20              LSRS     r0,r4,#24             ;342
00009e  9901              LDR      r1,[sp,#4]            ;342
0000a0  4308              ORRS     r0,r0,r1              ;342
0000a2  06f1              LSLS     r1,r6,#27             ;342
0000a4  4308              ORRS     r0,r0,r1              ;342
0000a6  497d              LDR      r1,|L25.668|
0000a8  6008              STR      r0,[r1,#0]            ;342
0000aa  e0d4              B        |L25.598|
                  |L25.172|
0000ac  487f              LDR      r0,|L25.684|
0000ae  6800              LDR      r0,[r0,#0]            ;348  ; bIsTimer1Initial
0000b0  2801              CMP      r0,#1                 ;348
0000b2  d103              BNE      |L25.188|
0000b4  487e              LDR      r0,|L25.688|
0000b6  6800              LDR      r0,[r0,#0]            ;348  ; bIsTimer1Used
0000b8  2800              CMP      r0,#0                 ;348
0000ba  d001              BEQ      |L25.192|
                  |L25.188|
0000bc  4875              LDR      r0,|L25.660|
0000be  e7b8              B        |L25.50|
                  |L25.192|
0000c0  2001              MOVS     r0,#1                 ;351
0000c2  497b              LDR      r1,|L25.688|
0000c4  6008              STR      r0,[r1,#0]            ;351  ; bIsTimer1Used
0000c6  4874              LDR      r0,|L25.664|
0000c8  6880              LDR      r0,[r0,#8]            ;353
0000ca  2108              MOVS     r1,#8                 ;353
0000cc  4388              BICS     r0,r0,r1              ;353
0000ce  3008              ADDS     r0,r0,#8              ;353
0000d0  4971              LDR      r1,|L25.664|
0000d2  6088              STR      r0,[r1,#8]            ;353
0000d4  2000              MOVS     r0,#0                 ;355
0000d6  4971              LDR      r1,|L25.668|
0000d8  6208              STR      r0,[r1,#0x20]         ;355
0000da  4608              MOV      r0,r1                 ;357
0000dc  6a80              LDR      r0,[r0,#0x28]         ;357
0000de  0840              LSRS     r0,r0,#1              ;357
0000e0  0040              LSLS     r0,r0,#1              ;357
0000e2  1c40              ADDS     r0,r0,#1              ;357
0000e4  6288              STR      r0,[r1,#0x28]         ;357
0000e6  2500              MOVS     r5,#0                 ;359
0000e8  e005              B        |L25.246|
                  |L25.234|
0000ea  2100              MOVS     r1,#0                 ;361
0000ec  2014              MOVS     r0,#0x14              ;361
0000ee  4368              MULS     r0,r5,r0              ;361
0000f0  4a70              LDR      r2,|L25.692|
0000f2  5011              STR      r1,[r2,r0]            ;361
0000f4  1c6d              ADDS     r5,r5,#1              ;359
                  |L25.246|
0000f6  2d00              CMP      r5,#0                 ;359
0000f8  d0f7              BEQ      |L25.234|
0000fa  2000              MOVS     r0,#0                 ;364
0000fc  496e              LDR      r1,|L25.696|
0000fe  6008              STR      r0,[r1,#0]            ;364  ; uTimer1Tick
000100  486e              LDR      r0,|L25.700|
000102  6007              STR      r7,[r0,#0]            ;365  ; _sys_uTimer1TickPerSecond
000104  2001              MOVS     r0,#1                 ;367
000106  f7fffffe          BL       GetTimerClock
00010a  4639              MOV      r1,r7                 ;367
00010c  9000              STR      r0,[sp,#0]            ;367
00010e  f7fffffe          BL       CalTimerInitValue
000112  4604              MOV      r4,r0                 ;367
000114  1c60              ADDS     r0,r4,#1              ;368
000116  e001              B        |L25.284|
                  |L25.280|
000118  e010              B        |L25.316|
                  |L25.282|
00011a  e099              B        |L25.592|
                  |L25.284|
00011c  d102              BNE      |L25.292|
00011e  485d              LDR      r0,|L25.660|
000120  1e40              SUBS     r0,r0,#1              ;370
000122  e786              B        |L25.50|
                  |L25.292|
000124  0220              LSLS     r0,r4,#8              ;373
000126  0a00              LSRS     r0,r0,#8              ;373
000128  495c              LDR      r1,|L25.668|
00012a  6248              STR      r0,[r1,#0x24]         ;373
00012c  0e20              LSRS     r0,r4,#24             ;374
00012e  9901              LDR      r1,[sp,#4]            ;374
000130  4308              ORRS     r0,r0,r1              ;374
000132  06f1              LSLS     r1,r6,#27             ;374
000134  4308              ORRS     r0,r0,r1              ;374
000136  4959              LDR      r1,|L25.668|
000138  6208              STR      r0,[r1,#0x20]         ;374
00013a  e08c              B        |L25.598|
                  |L25.316|
00013c  4860              LDR      r0,|L25.704|
00013e  6800              LDR      r0,[r0,#0]            ;380  ; bIsTimer2Initial
000140  2801              CMP      r0,#1                 ;380
000142  d103              BNE      |L25.332|
000144  485f              LDR      r0,|L25.708|
000146  6800              LDR      r0,[r0,#0]            ;380  ; bIsTimer2Used
000148  2800              CMP      r0,#0                 ;380
00014a  d001              BEQ      |L25.336|
                  |L25.332|
00014c  4851              LDR      r0,|L25.660|
00014e  e770              B        |L25.50|
                  |L25.336|
000150  2001              MOVS     r0,#1                 ;383
000152  495c              LDR      r1,|L25.708|
000154  6008              STR      r0,[r1,#0]            ;383  ; bIsTimer2Used
000156  4850              LDR      r0,|L25.664|
000158  6880              LDR      r0,[r0,#8]            ;385
00015a  2110              MOVS     r1,#0x10              ;385
00015c  4388              BICS     r0,r0,r1              ;385
00015e  3010              ADDS     r0,r0,#0x10           ;385
000160  494d              LDR      r1,|L25.664|
000162  6088              STR      r0,[r1,#8]            ;385
000164  2000              MOVS     r0,#0                 ;387
000166  4958              LDR      r1,|L25.712|
000168  6008              STR      r0,[r1,#0]            ;387
00016a  4608              MOV      r0,r1                 ;389
00016c  6880              LDR      r0,[r0,#8]            ;389
00016e  0840              LSRS     r0,r0,#1              ;389
000170  0040              LSLS     r0,r0,#1              ;389
000172  1c40              ADDS     r0,r0,#1              ;389
000174  6088              STR      r0,[r1,#8]            ;389
000176  2500              MOVS     r5,#0                 ;391
000178  e005              B        |L25.390|
                  |L25.378|
00017a  2100              MOVS     r1,#0                 ;393
00017c  2014              MOVS     r0,#0x14              ;393
00017e  4368              MULS     r0,r5,r0              ;393
000180  4a52              LDR      r2,|L25.716|
000182  5011              STR      r1,[r2,r0]            ;393
000184  1c6d              ADDS     r5,r5,#1              ;391
                  |L25.390|
000186  2d00              CMP      r5,#0                 ;391
000188  d0f7              BEQ      |L25.378|
00018a  2000              MOVS     r0,#0                 ;396
00018c  4950              LDR      r1,|L25.720|
00018e  6008              STR      r0,[r1,#0]            ;396  ; uTimer2Tick
000190  4850              LDR      r0,|L25.724|
000192  6007              STR      r7,[r0,#0]            ;397  ; _sys_uTimer2TickPerSecond
000194  2002              MOVS     r0,#2                 ;399
000196  f7fffffe          BL       GetTimerClock
00019a  4639              MOV      r1,r7                 ;399
00019c  9000              STR      r0,[sp,#0]            ;399
00019e  f7fffffe          BL       CalTimerInitValue
0001a2  4604              MOV      r4,r0                 ;399
0001a4  1c60              ADDS     r0,r4,#1              ;400
0001a6  d102              BNE      |L25.430|
0001a8  483a              LDR      r0,|L25.660|
0001aa  1e40              SUBS     r0,r0,#1              ;402
0001ac  e741              B        |L25.50|
                  |L25.430|
0001ae  0220              LSLS     r0,r4,#8              ;405
0001b0  0a00              LSRS     r0,r0,#8              ;405
0001b2  4945              LDR      r1,|L25.712|
0001b4  6048              STR      r0,[r1,#4]            ;405
0001b6  0e20              LSRS     r0,r4,#24             ;406
0001b8  9901              LDR      r1,[sp,#4]            ;406
0001ba  4308              ORRS     r0,r0,r1              ;406
0001bc  06f1              LSLS     r1,r6,#27             ;406
0001be  4308              ORRS     r0,r0,r1              ;406
0001c0  4941              LDR      r1,|L25.712|
0001c2  6008              STR      r0,[r1,#0]            ;406
0001c4  e047              B        |L25.598|
                  |L25.454|
0001c6  4844              LDR      r0,|L25.728|
0001c8  6800              LDR      r0,[r0,#0]            ;412  ; bIsTimer3Initial
0001ca  2801              CMP      r0,#1                 ;412
0001cc  d103              BNE      |L25.470|
0001ce  4843              LDR      r0,|L25.732|
0001d0  6800              LDR      r0,[r0,#0]            ;412  ; bIsTimer3Used
0001d2  2800              CMP      r0,#0                 ;412
0001d4  d001              BEQ      |L25.474|
                  |L25.470|
0001d6  482f              LDR      r0,|L25.660|
0001d8  e72b              B        |L25.50|
                  |L25.474|
0001da  2001              MOVS     r0,#1                 ;415
0001dc  493f              LDR      r1,|L25.732|
0001de  6008              STR      r0,[r1,#0]            ;415  ; bIsTimer3Used
0001e0  482d              LDR      r0,|L25.664|
0001e2  6880              LDR      r0,[r0,#8]            ;417
0001e4  2120              MOVS     r1,#0x20              ;417
0001e6  4388              BICS     r0,r0,r1              ;417
0001e8  3020              ADDS     r0,r0,#0x20           ;417
0001ea  492b              LDR      r1,|L25.664|
0001ec  6088              STR      r0,[r1,#8]            ;417
0001ee  2000              MOVS     r0,#0                 ;419
0001f0  4935              LDR      r1,|L25.712|
0001f2  6208              STR      r0,[r1,#0x20]         ;419
0001f4  4608              MOV      r0,r1                 ;421
0001f6  6a80              LDR      r0,[r0,#0x28]         ;421
0001f8  0840              LSRS     r0,r0,#1              ;421
0001fa  0040              LSLS     r0,r0,#1              ;421
0001fc  1c40              ADDS     r0,r0,#1              ;421
0001fe  6288              STR      r0,[r1,#0x28]         ;421
000200  2500              MOVS     r5,#0                 ;423
000202  e005              B        |L25.528|
                  |L25.516|
000204  2100              MOVS     r1,#0                 ;425
000206  2014              MOVS     r0,#0x14              ;425
000208  4368              MULS     r0,r5,r0              ;425
00020a  4a35              LDR      r2,|L25.736|
00020c  5011              STR      r1,[r2,r0]            ;425
00020e  1c6d              ADDS     r5,r5,#1              ;423
                  |L25.528|
000210  2d00              CMP      r5,#0                 ;423
000212  d0f7              BEQ      |L25.516|
000214  2000              MOVS     r0,#0                 ;428
000216  4933              LDR      r1,|L25.740|
000218  6008              STR      r0,[r1,#0]            ;428  ; uTimer3Tick
00021a  4833              LDR      r0,|L25.744|
00021c  6007              STR      r7,[r0,#0]            ;429  ; _sys_uTimer3TickPerSecond
00021e  2003              MOVS     r0,#3                 ;431
000220  f7fffffe          BL       GetTimerClock
000224  4639              MOV      r1,r7                 ;431
000226  9000              STR      r0,[sp,#0]            ;431
000228  f7fffffe          BL       CalTimerInitValue
00022c  4604              MOV      r4,r0                 ;431
00022e  1c60              ADDS     r0,r4,#1              ;432
000230  d102              BNE      |L25.568|
000232  4818              LDR      r0,|L25.660|
000234  1e40              SUBS     r0,r0,#1              ;434
000236  e6fc              B        |L25.50|
                  |L25.568|
000238  0220              LSLS     r0,r4,#8              ;437
00023a  0a00              LSRS     r0,r0,#8              ;437
00023c  4922              LDR      r1,|L25.712|
00023e  6248              STR      r0,[r1,#0x24]         ;437
000240  0e20              LSRS     r0,r4,#24             ;438
000242  9901              LDR      r1,[sp,#4]            ;438
000244  4308              ORRS     r0,r0,r1              ;438
000246  06f1              LSLS     r1,r6,#27             ;438
000248  4308              ORRS     r0,r0,r1              ;438
00024a  491f              LDR      r1,|L25.712|
00024c  6208              STR      r0,[r1,#0x20]         ;438
00024e  e002              B        |L25.598|
                  |L25.592|
000250  4810              LDR      r0,|L25.660|
000252  1e80              SUBS     r0,r0,#2              ;444
000254  e6ed              B        |L25.50|
                  |L25.598|
000256  bf00              NOP                            ;343
000258  2e02              CMP      r6,#2                 ;448
00025a  d115              BNE      |L25.648|
00025c  9802              LDR      r0,[sp,#8]            ;450
00025e  2800              CMP      r0,#0                 ;450
000260  d006              BEQ      |L25.624|
000262  2801              CMP      r0,#1                 ;450
000264  d005              BEQ      |L25.626|
000266  2802              CMP      r0,#2                 ;450
000268  d004              BEQ      |L25.628|
00026a  2803              CMP      r0,#3                 ;450
00026c  d109              BNE      |L25.642|
00026e  e002              B        |L25.630|
                  |L25.624|
000270  bf00              NOP                            ;453
                  |L25.626|
000272  bf00              NOP                            ;454
                  |L25.628|
000274  bf00              NOP                            ;455
                  |L25.630|
000276  9902              LDR      r1,[sp,#8]            ;457
000278  3121              ADDS     r1,r1,#0x21           ;457
00027a  b2c8              UXTB     r0,r1                 ;457
00027c  f7fffffe          BL       DrvGPIO_InitFunction
000280  bf00              NOP                            ;460
                  |L25.642|
000282  4804              LDR      r0,|L25.660|
000284  1e80              SUBS     r0,r0,#2              ;462
000286  e6d4              B        |L25.50|
                  |L25.648|
000288  2000              MOVS     r0,#0                 ;467
00028a  e6d2              B        |L25.50|
;;;469    
                          ENDP

                  |L25.652|
                          DCD      bIsTimer0Initial
                  |L25.656|
                          DCD      bIsTimer0Used
                  |L25.660|
                          DCD      0xffff9703
                  |L25.664|
                          DCD      0x50000200
                  |L25.668|
                          DCD      0x40010000
                  |L25.672|
                          DCD      tTime0Event
                  |L25.676|
                          DCD      uTimer0Tick
                  |L25.680|
                          DCD      _sys_uTimer0TickPerSecond
                  |L25.684|
                          DCD      bIsTimer1Initial
                  |L25.688|
                          DCD      bIsTimer1Used
                  |L25.692|
                          DCD      tTime1Event
                  |L25.696|
                          DCD      uTimer1Tick
                  |L25.700|
                          DCD      _sys_uTimer1TickPerSecond
                  |L25.704|
                          DCD      bIsTimer2Initial
                  |L25.708|
                          DCD      bIsTimer2Used
                  |L25.712|
                          DCD      0x40110000
                  |L25.716|
                          DCD      tTime2Event
                  |L25.720|
                          DCD      uTimer2Tick
                  |L25.724|
                          DCD      _sys_uTimer2TickPerSecond
                  |L25.728|
                          DCD      bIsTimer3Initial
                  |L25.732|
                          DCD      bIsTimer3Used
                  |L25.736|
                          DCD      tTime3Event
                  |L25.740|
                          DCD      uTimer3Tick
                  |L25.744|
                          DCD      _sys_uTimer3TickPerSecond

                          AREA ||i.DrvTIMER_OpenCapture||, CODE, READONLY, ALIGN=2

                  DrvTIMER_OpenCapture PROC
;;;1253   /*---------------------------------------------------------------------------------------------------------*/
;;;1254   int32_t DrvTIMER_OpenCapture(E_TIMER_CHANNEL ch, E_TIMER_RSTCAP_MODE mode)
000000  b570              PUSH     {r4-r6,lr}
;;;1255   {
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
;;;1256   	TIMER_T * tTMR;
;;;1257   
;;;1258      	switch (ch)
000006  2c00              CMP      r4,#0
000008  d006              BEQ      |L26.24|
00000a  2c01              CMP      r4,#1
00000c  d005              BEQ      |L26.26|
00000e  2c02              CMP      r4,#2
000010  d004              BEQ      |L26.28|
000012  2c03              CMP      r4,#3
000014  d11c              BNE      |L26.80|
000016  e002              B        |L26.30|
                  |L26.24|
;;;1259       {
;;;1260           case E_TMR0:
;;;1261           case E_TMR1:
000018  bf00              NOP      
                  |L26.26|
;;;1262           case E_TMR2:
00001a  bf00              NOP      
                  |L26.28|
;;;1263   		case E_TMR3:
00001c  bf00              NOP      
                  |L26.30|
;;;1264           {
;;;1265               /* TIMER clock source should be set as HCLK */
;;;1266               DrvSYS_SelectIPClockSource((E_SYS_IP_CLKSRC)((uint32_t)E_SYS_TMR0_CLKSRC+(uint32_t)ch), 2);  
00001e  1ca1              ADDS     r1,r4,#2
000020  b2c8              UXTB     r0,r1
000022  2102              MOVS     r1,#2
000024  f7fffffe          BL       DrvSYS_SelectIPClockSource
;;;1267   
;;;1268               DrvGPIO_InitFunction((E_DRVGPIO_FUNC)((uint32_t)E_FUNC_T0EX + (uint32_t)ch));
000028  4621              MOV      r1,r4
00002a  3125              ADDS     r1,r1,#0x25
00002c  b2c8              UXTB     r0,r1
00002e  f7fffffe          BL       DrvGPIO_InitFunction
;;;1269           	tTMR = (TIMER_T *)((uint32_t)TIMER0 + CH_OFFSET[ch]);         
000032  00a0              LSLS     r0,r4,#2
000034  4907              LDR      r1,|L26.84|
000036  5808              LDR      r0,[r1,r0]
000038  4907              LDR      r1,|L26.88|
00003a  1845              ADDS     r5,r0,r1
;;;1270               tTMR->TEXCON.RSTCAPSEL = mode;
00003c  6968              LDR      r0,[r5,#0x14]
00003e  2110              MOVS     r1,#0x10
000040  4388              BICS     r0,r0,r1
000042  0131              LSLS     r1,r6,#4
000044  2210              MOVS     r2,#0x10
000046  4011              ANDS     r1,r1,r2
000048  4308              ORRS     r0,r0,r1
00004a  6168              STR      r0,[r5,#0x14]
;;;1271               return E_SUCCESS;
00004c  2000              MOVS     r0,#0
                  |L26.78|
;;;1272           }
;;;1273   
;;;1274           default:
;;;1275           {
;;;1276               return E_DRVTIMER_CHANNEL ; 
;;;1277           }
;;;1278       }
;;;1279   }
00004e  bd70              POP      {r4-r6,pc}
                  |L26.80|
000050  4802              LDR      r0,|L26.92|
000052  e7fc              B        |L26.78|
;;;1280   
                          ENDP

                  |L26.84|
                          DCD      CH_OFFSET
                  |L26.88|
                          DCD      0x40010000
                  |L26.92|
                          DCD      0xffff9701

                          AREA ||i.DrvTIMER_OpenCounter||, CODE, READONLY, ALIGN=2

                  DrvTIMER_OpenCounter PROC
;;;1033   /*---------------------------------------------------------------------------------------------------------*/
;;;1034   int32_t DrvTIMER_OpenCounter(E_TIMER_CHANNEL ch, uint32_t uCounterBoundary, E_TIMER_OPMODE op_mode)
000000  b5f7              PUSH     {r0-r2,r4-r7,lr}
;;;1035   {
000002  4606              MOV      r6,r0
000004  4617              MOV      r7,r2
;;;1036       uint32_t i;
;;;1037   	TIMER_T * tTMR;
;;;1038   
;;;1039       if ((bIsTimer0Initial == FALSE) || (bIsTimer1Initial == FALSE) || 
000006  4876              LDR      r0,|L27.480|
000008  6800              LDR      r0,[r0,#0]  ; bIsTimer0Initial
00000a  2800              CMP      r0,#0
00000c  d00b              BEQ      |L27.38|
00000e  4875              LDR      r0,|L27.484|
000010  6800              LDR      r0,[r0,#0]  ; bIsTimer1Initial
000012  2800              CMP      r0,#0
000014  d007              BEQ      |L27.38|
;;;1040           (bIsTimer2Initial == FALSE) || (bIsTimer3Initial == FALSE))
000016  4874              LDR      r0,|L27.488|
000018  6800              LDR      r0,[r0,#0]  ; bIsTimer2Initial
00001a  2800              CMP      r0,#0
00001c  d003              BEQ      |L27.38|
00001e  4873              LDR      r0,|L27.492|
000020  6800              LDR      r0,[r0,#0]  ; bIsTimer3Initial
000022  2800              CMP      r0,#0
000024  d101              BNE      |L27.42|
                  |L27.38|
;;;1041       {
;;;1042           return E_DRVTIMER_EIO;
000026  4872              LDR      r0,|L27.496|
                  |L27.40|
;;;1043       }
;;;1044   
;;;1045   	if (op_mode == E_TOGGLE_MODE)
;;;1046           return E_DRVTIMER_CHANNEL;
;;;1047   				    	
;;;1048      	switch (ch)
;;;1049       {
;;;1050           case E_TMR0:
;;;1051           {
;;;1052               if (bIsTimer0Used != FALSE)
;;;1053                   return E_DRVTIMER_EIO;
;;;1054               
;;;1055               bIsTimer0Used = TRUE;
;;;1056              
;;;1057    		   	SYSCLK->APBCLK.TMR0_EN = 1;
;;;1058   
;;;1059   			outpw((uint32_t)&TIMER0->TCSR ,0 );	/* Disable timer */
;;;1060   			
;;;1061              	for (i=0; i<TIMER_EVENT_COUNT; i++)
;;;1062               {
;;;1063                   tTime0Event[i].active = FALSE;
;;;1064               }
;;;1065               uTimer0Tick = 0;
;;;1066               break;
;;;1067           }
;;;1068   
;;;1069           case E_TMR1:
;;;1070           {
;;;1071               if (bIsTimer1Used != FALSE)
;;;1072                   return E_DRVTIMER_EIO;
;;;1073               				           
;;;1074               bIsTimer1Used = TRUE;
;;;1075              
;;;1076    		   	SYSCLK->APBCLK.TMR1_EN = 1;
;;;1077   
;;;1078   			outpw((uint32_t)&TIMER1->TCSR ,0 );	/* Disable timer */
;;;1079   
;;;1080              	for (i=0; i<TIMER_EVENT_COUNT; i++)
;;;1081               {
;;;1082                   tTime1Event[i].active = FALSE;
;;;1083               }
;;;1084               uTimer1Tick = 0;
;;;1085               break;
;;;1086           }
;;;1087   
;;;1088           case E_TMR2:
;;;1089           {
;;;1090               if (bIsTimer2Used != FALSE)
;;;1091                   return E_DRVTIMER_EIO;
;;;1092               					           
;;;1093               bIsTimer2Used = TRUE;
;;;1094              
;;;1095    		   	SYSCLK->APBCLK.TMR2_EN = 1;
;;;1096   
;;;1097   			outpw((uint32_t)&TIMER2->TCSR ,0 );	/* Disable timer */
;;;1098   
;;;1099              	for (i=0; i<TIMER_EVENT_COUNT; i++)
;;;1100               {
;;;1101                   tTime2Event[i].active = FALSE;
;;;1102               }
;;;1103               uTimer2Tick = 0;
;;;1104               break;
;;;1105           }
;;;1106   
;;;1107   		case E_TMR3:
;;;1108           {
;;;1109               if (bIsTimer3Used != FALSE)
;;;1110                   return E_DRVTIMER_EIO;
;;;1111               						           
;;;1112               bIsTimer3Used = TRUE;
;;;1113              
;;;1114    		   	SYSCLK->APBCLK.TMR3_EN = 1;
;;;1115   
;;;1116   			outpw((uint32_t)&TIMER3->TCSR ,0 );	/* Disable timer */
;;;1117   
;;;1118              	for (i=0; i<TIMER_EVENT_COUNT; i++)
;;;1119               {
;;;1120                   tTime3Event[i].active = FALSE;
;;;1121               }
;;;1122         		uTimer3Tick = 0;
;;;1123               break;
;;;1124           }
;;;1125   
;;;1126           default:
;;;1127           {
;;;1128               return E_DRVTIMER_CHANNEL ; 
;;;1129           }
;;;1130       }
;;;1131   
;;;1132      	switch (ch)
;;;1133       {
;;;1134           case E_TMR0:
;;;1135           case E_TMR1:
;;;1136           case E_TMR2:
;;;1137           case E_TMR3:
;;;1138           {
;;;1139               /* TIMER clock source should be set as HCLK */
;;;1140               DrvSYS_SelectIPClockSource((E_SYS_IP_CLKSRC)((uint32_t)E_SYS_TMR0_CLKSRC+(uint32_t)ch), 2);  
;;;1141   
;;;1142   			DrvGPIO_InitFunction((E_DRVGPIO_FUNC)((uint32_t)E_FUNC_TMR0 + (uint32_t)ch));	/* Open external Timer Counter source */
;;;1143   
;;;1144           	tTMR = (TIMER_T *)((uint32_t)TIMER0 + CH_OFFSET[ch]);   
;;;1145   			tTMR->TISR.TIF      = 1;        /* Write 1 to clear for safty */			
;;;1146    			tTMR->TCSR.MODE     = op_mode;	/* Set operation mode */
;;;1147   			tTMR->TCMPR         = uCounterBoundary;
;;;1148   			tTMR->TCSR.PRESCALE = 0;
;;;1149   			tTMR->TCSR.TDR_EN 	= 1;	
;;;1150   			tTMR->TCSR.IE       = 0;	
;;;1151   			tTMR->TCSR.CTB      = 1;
;;;1152               break;			 
;;;1153           }
;;;1154       }
;;;1155   
;;;1156       return E_SUCCESS;
;;;1157   }
000028  bdfe              POP      {r1-r7,pc}
                  |L27.42|
00002a  2f02              CMP      r7,#2                 ;1045
00002c  d102              BNE      |L27.52|
00002e  4870              LDR      r0,|L27.496|
000030  1e80              SUBS     r0,r0,#2              ;1046
000032  e7f9              B        |L27.40|
                  |L27.52|
000034  2e00              CMP      r6,#0                 ;1048
000036  d006              BEQ      |L27.70|
000038  2e01              CMP      r6,#1                 ;1048
00003a  d025              BEQ      |L27.136|
00003c  2e02              CMP      r6,#2                 ;1048
00003e  d044              BEQ      |L27.202|
000040  2e03              CMP      r6,#3                 ;1048
000042  d178              BNE      |L27.310|
000044  e062              B        |L27.268|
                  |L27.70|
000046  486b              LDR      r0,|L27.500|
000048  6800              LDR      r0,[r0,#0]            ;1052  ; bIsTimer0Used
00004a  2800              CMP      r0,#0                 ;1052
00004c  d001              BEQ      |L27.82|
00004e  4868              LDR      r0,|L27.496|
000050  e7ea              B        |L27.40|
                  |L27.82|
000052  2001              MOVS     r0,#1                 ;1055
000054  4967              LDR      r1,|L27.500|
000056  6008              STR      r0,[r1,#0]            ;1055  ; bIsTimer0Used
000058  4867              LDR      r0,|L27.504|
00005a  6880              LDR      r0,[r0,#8]            ;1057
00005c  2104              MOVS     r1,#4                 ;1057
00005e  4388              BICS     r0,r0,r1              ;1057
000060  1d00              ADDS     r0,r0,#4              ;1057
000062  4965              LDR      r1,|L27.504|
000064  6088              STR      r0,[r1,#8]            ;1057
000066  2000              MOVS     r0,#0                 ;1059
000068  4964              LDR      r1,|L27.508|
00006a  6008              STR      r0,[r1,#0]            ;1059
00006c  2400              MOVS     r4,#0                 ;1061
00006e  e005              B        |L27.124|
                  |L27.112|
000070  2100              MOVS     r1,#0                 ;1063
000072  2014              MOVS     r0,#0x14              ;1063
000074  4360              MULS     r0,r4,r0              ;1063
000076  4a62              LDR      r2,|L27.512|
000078  5011              STR      r1,[r2,r0]            ;1063
00007a  1c64              ADDS     r4,r4,#1              ;1061
                  |L27.124|
00007c  2c00              CMP      r4,#0                 ;1061
00007e  d0f7              BEQ      |L27.112|
000080  2000              MOVS     r0,#0                 ;1065
000082  4960              LDR      r1,|L27.516|
000084  6008              STR      r0,[r1,#0]            ;1065  ; uTimer0Tick
000086  e066              B        |L27.342|
                  |L27.136|
000088  485f              LDR      r0,|L27.520|
00008a  6800              LDR      r0,[r0,#0]            ;1071  ; bIsTimer1Used
00008c  2800              CMP      r0,#0                 ;1071
00008e  d001              BEQ      |L27.148|
000090  4857              LDR      r0,|L27.496|
000092  e7c9              B        |L27.40|
                  |L27.148|
000094  2001              MOVS     r0,#1                 ;1074
000096  495c              LDR      r1,|L27.520|
000098  6008              STR      r0,[r1,#0]            ;1074  ; bIsTimer1Used
00009a  4857              LDR      r0,|L27.504|
00009c  6880              LDR      r0,[r0,#8]            ;1076
00009e  2108              MOVS     r1,#8                 ;1076
0000a0  4388              BICS     r0,r0,r1              ;1076
0000a2  3008              ADDS     r0,r0,#8              ;1076
0000a4  4954              LDR      r1,|L27.504|
0000a6  6088              STR      r0,[r1,#8]            ;1076
0000a8  2000              MOVS     r0,#0                 ;1078
0000aa  4954              LDR      r1,|L27.508|
0000ac  6208              STR      r0,[r1,#0x20]         ;1078
0000ae  2400              MOVS     r4,#0                 ;1080
0000b0  e005              B        |L27.190|
                  |L27.178|
0000b2  2100              MOVS     r1,#0                 ;1082
0000b4  2014              MOVS     r0,#0x14              ;1082
0000b6  4360              MULS     r0,r4,r0              ;1082
0000b8  4a54              LDR      r2,|L27.524|
0000ba  5011              STR      r1,[r2,r0]            ;1082
0000bc  1c64              ADDS     r4,r4,#1              ;1080
                  |L27.190|
0000be  2c00              CMP      r4,#0                 ;1080
0000c0  d0f7              BEQ      |L27.178|
0000c2  2000              MOVS     r0,#0                 ;1084
0000c4  4952              LDR      r1,|L27.528|
0000c6  6008              STR      r0,[r1,#0]            ;1084  ; uTimer1Tick
0000c8  e045              B        |L27.342|
                  |L27.202|
0000ca  4852              LDR      r0,|L27.532|
0000cc  6800              LDR      r0,[r0,#0]            ;1090  ; bIsTimer2Used
0000ce  2800              CMP      r0,#0                 ;1090
0000d0  d001              BEQ      |L27.214|
0000d2  4847              LDR      r0,|L27.496|
0000d4  e7a8              B        |L27.40|
                  |L27.214|
0000d6  2001              MOVS     r0,#1                 ;1093
0000d8  494e              LDR      r1,|L27.532|
0000da  6008              STR      r0,[r1,#0]            ;1093  ; bIsTimer2Used
0000dc  4846              LDR      r0,|L27.504|
0000de  6880              LDR      r0,[r0,#8]            ;1095
0000e0  2110              MOVS     r1,#0x10              ;1095
0000e2  4388              BICS     r0,r0,r1              ;1095
0000e4  3010              ADDS     r0,r0,#0x10           ;1095
0000e6  4944              LDR      r1,|L27.504|
0000e8  6088              STR      r0,[r1,#8]            ;1095
0000ea  2000              MOVS     r0,#0                 ;1097
0000ec  494a              LDR      r1,|L27.536|
0000ee  6008              STR      r0,[r1,#0]            ;1097
0000f0  2400              MOVS     r4,#0                 ;1099
0000f2  e005              B        |L27.256|
                  |L27.244|
0000f4  2100              MOVS     r1,#0                 ;1101
0000f6  2014              MOVS     r0,#0x14              ;1101
0000f8  4360              MULS     r0,r4,r0              ;1101
0000fa  4a48              LDR      r2,|L27.540|
0000fc  5011              STR      r1,[r2,r0]            ;1101
0000fe  1c64              ADDS     r4,r4,#1              ;1099
                  |L27.256|
000100  2c00              CMP      r4,#0                 ;1099
000102  d0f7              BEQ      |L27.244|
000104  2000              MOVS     r0,#0                 ;1103
000106  4946              LDR      r1,|L27.544|
000108  6008              STR      r0,[r1,#0]            ;1103  ; uTimer2Tick
00010a  e024              B        |L27.342|
                  |L27.268|
00010c  4845              LDR      r0,|L27.548|
00010e  6800              LDR      r0,[r0,#0]            ;1109  ; bIsTimer3Used
000110  2800              CMP      r0,#0                 ;1109
000112  d001              BEQ      |L27.280|
000114  4836              LDR      r0,|L27.496|
000116  e787              B        |L27.40|
                  |L27.280|
000118  2001              MOVS     r0,#1                 ;1112
00011a  4942              LDR      r1,|L27.548|
00011c  6008              STR      r0,[r1,#0]            ;1112  ; bIsTimer3Used
00011e  4836              LDR      r0,|L27.504|
000120  6880              LDR      r0,[r0,#8]            ;1114
000122  2120              MOVS     r1,#0x20              ;1114
000124  4388              BICS     r0,r0,r1              ;1114
000126  3020              ADDS     r0,r0,#0x20           ;1114
000128  4933              LDR      r1,|L27.504|
00012a  6088              STR      r0,[r1,#8]            ;1114
00012c  2000              MOVS     r0,#0                 ;1116
00012e  493a              LDR      r1,|L27.536|
000130  6208              STR      r0,[r1,#0x20]         ;1116
000132  2400              MOVS     r4,#0                 ;1118
000134  e006              B        |L27.324|
                  |L27.310|
000136  e00b              B        |L27.336|
                  |L27.312|
000138  2100              MOVS     r1,#0                 ;1120
00013a  2014              MOVS     r0,#0x14              ;1120
00013c  4360              MULS     r0,r4,r0              ;1120
00013e  4a3a              LDR      r2,|L27.552|
000140  5011              STR      r1,[r2,r0]            ;1120
000142  1c64              ADDS     r4,r4,#1              ;1118
                  |L27.324|
000144  2c00              CMP      r4,#0                 ;1118
000146  d0f7              BEQ      |L27.312|
000148  2000              MOVS     r0,#0                 ;1122
00014a  4938              LDR      r1,|L27.556|
00014c  6008              STR      r0,[r1,#0]            ;1122  ; uTimer3Tick
00014e  e002              B        |L27.342|
                  |L27.336|
000150  4827              LDR      r0,|L27.496|
000152  1e80              SUBS     r0,r0,#2              ;1128
000154  e768              B        |L27.40|
                  |L27.342|
000156  bf00              NOP                            ;1066
000158  2e00              CMP      r6,#0                 ;1132
00015a  d006              BEQ      |L27.362|
00015c  2e01              CMP      r6,#1                 ;1132
00015e  d005              BEQ      |L27.364|
000160  2e02              CMP      r6,#2                 ;1132
000162  d004              BEQ      |L27.366|
000164  2e03              CMP      r6,#3                 ;1132
000166  d137              BNE      |L27.472|
000168  e002              B        |L27.368|
                  |L27.362|
00016a  bf00              NOP                            ;1135
                  |L27.364|
00016c  bf00              NOP                            ;1136
                  |L27.366|
00016e  bf00              NOP                            ;1137
                  |L27.368|
000170  1cb1              ADDS     r1,r6,#2              ;1140
000172  b2c8              UXTB     r0,r1                 ;1140
000174  2102              MOVS     r1,#2                 ;1140
000176  f7fffffe          BL       DrvSYS_SelectIPClockSource
00017a  4631              MOV      r1,r6                 ;1142
00017c  3121              ADDS     r1,r1,#0x21           ;1142
00017e  b2c8              UXTB     r0,r1                 ;1142
000180  f7fffffe          BL       DrvGPIO_InitFunction
000184  00b0              LSLS     r0,r6,#2              ;1144
000186  492a              LDR      r1,|L27.560|
000188  5808              LDR      r0,[r1,r0]            ;1144
00018a  491c              LDR      r1,|L27.508|
00018c  1845              ADDS     r5,r0,r1              ;1144
00018e  68a8              LDR      r0,[r5,#8]            ;1145
000190  0840              LSRS     r0,r0,#1              ;1145
000192  0040              LSLS     r0,r0,#1              ;1145
000194  1c40              ADDS     r0,r0,#1              ;1145
000196  60a8              STR      r0,[r5,#8]            ;1145
000198  6828              LDR      r0,[r5,#0]            ;1146
00019a  2103              MOVS     r1,#3                 ;1146
00019c  06c9              LSLS     r1,r1,#27             ;1146
00019e  4388              BICS     r0,r0,r1              ;1146
0001a0  06f9              LSLS     r1,r7,#27             ;1146
0001a2  2203              MOVS     r2,#3                 ;1146
0001a4  06d2              LSLS     r2,r2,#27             ;1146
0001a6  4011              ANDS     r1,r1,r2              ;1146
0001a8  4308              ORRS     r0,r0,r1              ;1146
0001aa  6028              STR      r0,[r5,#0]            ;1146
0001ac  9801              LDR      r0,[sp,#4]            ;1147
0001ae  6068              STR      r0,[r5,#4]            ;1147
0001b0  6828              LDR      r0,[r5,#0]            ;1148
0001b2  0a00              LSRS     r0,r0,#8              ;1148
0001b4  0200              LSLS     r0,r0,#8              ;1148
0001b6  6028              STR      r0,[r5,#0]            ;1148
0001b8  6828              LDR      r0,[r5,#0]            ;1149
0001ba  2101              MOVS     r1,#1                 ;1149
0001bc  0409              LSLS     r1,r1,#16             ;1149
0001be  4388              BICS     r0,r0,r1              ;1149
0001c0  1840              ADDS     r0,r0,r1              ;1149
0001c2  6028              STR      r0,[r5,#0]            ;1149
0001c4  6828              LDR      r0,[r5,#0]            ;1150
0001c6  0349              LSLS     r1,r1,#13             ;1150
0001c8  4388              BICS     r0,r0,r1              ;1150
0001ca  6028              STR      r0,[r5,#0]            ;1150
0001cc  6828              LDR      r0,[r5,#0]            ;1151
0001ce  1149              ASRS     r1,r1,#5              ;1151
0001d0  4388              BICS     r0,r0,r1              ;1151
0001d2  1840              ADDS     r0,r0,r1              ;1151
0001d4  6028              STR      r0,[r5,#0]            ;1151
0001d6  bf00              NOP                            ;1152
                  |L27.472|
0001d8  bf00              NOP                            ;1152
0001da  2000              MOVS     r0,#0                 ;1156
0001dc  e724              B        |L27.40|
;;;1158   
                          ENDP

0001de  0000              DCW      0x0000
                  |L27.480|
                          DCD      bIsTimer0Initial
                  |L27.484|
                          DCD      bIsTimer1Initial
                  |L27.488|
                          DCD      bIsTimer2Initial
                  |L27.492|
                          DCD      bIsTimer3Initial
                  |L27.496|
                          DCD      0xffff9703
                  |L27.500|
                          DCD      bIsTimer0Used
                  |L27.504|
                          DCD      0x50000200
                  |L27.508|
                          DCD      0x40010000
                  |L27.512|
                          DCD      tTime0Event
                  |L27.516|
                          DCD      uTimer0Tick
                  |L27.520|
                          DCD      bIsTimer1Used
                  |L27.524|
                          DCD      tTime1Event
                  |L27.528|
                          DCD      uTimer1Tick
                  |L27.532|
                          DCD      bIsTimer2Used
                  |L27.536|
                          DCD      0x40110000
                  |L27.540|
                          DCD      tTime2Event
                  |L27.544|
                          DCD      uTimer2Tick
                  |L27.548|
                          DCD      bIsTimer3Used
                  |L27.552|
                          DCD      tTime3Event
                  |L27.556|
                          DCD      uTimer3Tick
                  |L27.560|
                          DCD      CH_OFFSET

                          AREA ||i.DrvTIMER_ResetIntTicks||, CODE, READONLY, ALIGN=2

                  DrvTIMER_ResetIntTicks PROC
;;;945    /*---------------------------------------------------------------------------------------------------------*/
;;;946    int32_t DrvTIMER_ResetIntTicks(E_TIMER_CHANNEL ch)
000000  4601              MOV      r1,r0
;;;947    {
;;;948        switch (ch)
000002  2900              CMP      r1,#0
000004  d006              BEQ      |L28.20|
000006  2901              CMP      r1,#1
000008  d008              BEQ      |L28.28|
00000a  2902              CMP      r1,#2
00000c  d00a              BEQ      |L28.36|
00000e  2903              CMP      r1,#3
000010  d110              BNE      |L28.52|
000012  e00b              B        |L28.44|
                  |L28.20|
;;;949        {
;;;950            case E_TMR0:
;;;951            {
;;;952                uTimer0Tick = 0;
000014  2000              MOVS     r0,#0
000016  4a0a              LDR      r2,|L28.64|
000018  6010              STR      r0,[r2,#0]  ; uTimer0Tick
;;;953                break;
00001a  e00d              B        |L28.56|
                  |L28.28|
;;;954            }
;;;955    
;;;956            case E_TMR1:
;;;957            {
;;;958                uTimer1Tick = 0;
00001c  2000              MOVS     r0,#0
00001e  4a09              LDR      r2,|L28.68|
000020  6010              STR      r0,[r2,#0]  ; uTimer1Tick
;;;959                break;
000022  e009              B        |L28.56|
                  |L28.36|
;;;960            }
;;;961    
;;;962            case E_TMR2:
;;;963            {
;;;964                uTimer2Tick = 0;
000024  2000              MOVS     r0,#0
000026  4a08              LDR      r2,|L28.72|
000028  6010              STR      r0,[r2,#0]  ; uTimer2Tick
;;;965                break;
00002a  e005              B        |L28.56|
                  |L28.44|
;;;966            }
;;;967    
;;;968            case E_TMR3:
;;;969            {
;;;970                uTimer3Tick = 0;
00002c  2000              MOVS     r0,#0
00002e  4a07              LDR      r2,|L28.76|
000030  6010              STR      r0,[r2,#0]  ; uTimer3Tick
;;;971                break;
000032  e001              B        |L28.56|
                  |L28.52|
;;;972            }
;;;973    
;;;974            default:
;;;975            {
;;;976                return E_DRVTIMER_CHANNEL;
000034  4806              LDR      r0,|L28.80|
                  |L28.54|
;;;977            }
;;;978        }
;;;979    
;;;980        return E_SUCCESS;
;;;981    }
000036  4770              BX       lr
                  |L28.56|
000038  bf00              NOP                            ;953
00003a  2000              MOVS     r0,#0                 ;980
00003c  e7fb              B        |L28.54|
;;;982    
                          ENDP

00003e  0000              DCW      0x0000
                  |L28.64|
                          DCD      uTimer0Tick
                  |L28.68|
                          DCD      uTimer1Tick
                  |L28.72|
                          DCD      uTimer2Tick
                  |L28.76|
                          DCD      uTimer3Tick
                  |L28.80|
                          DCD      0xffff9701

                          AREA ||i.DrvTIMER_SelectCaptureEdge||, CODE, READONLY, ALIGN=2

                  DrvTIMER_SelectCaptureEdge PROC
;;;1374   /*---------------------------------------------------------------------------------------------------------*/
;;;1375   int32_t DrvTIMER_SelectCaptureEdge(E_TIMER_CHANNEL ch, E_TIMER_TEX_EDGE edge)
000000  b530              PUSH     {r4,r5,lr}
;;;1376   {
000002  4602              MOV      r2,r0
000004  460b              MOV      r3,r1
;;;1377   	TIMER_T * tTMR;
;;;1378   
;;;1379      	switch (ch)
000006  2a00              CMP      r2,#0
000008  d006              BEQ      |L29.24|
00000a  2a01              CMP      r2,#1
00000c  d005              BEQ      |L29.26|
00000e  2a02              CMP      r2,#2
000010  d004              BEQ      |L29.28|
000012  2a03              CMP      r2,#3
000014  d112              BNE      |L29.60|
000016  e002              B        |L29.30|
                  |L29.24|
;;;1380       {
;;;1381           case E_TMR0:
;;;1382           case E_TMR1:
000018  bf00              NOP      
                  |L29.26|
;;;1383           case E_TMR2:
00001a  bf00              NOP      
                  |L29.28|
;;;1384   		case E_TMR3:
00001c  bf00              NOP      
                  |L29.30|
;;;1385           {
;;;1386           	tTMR = (TIMER_T *)((uint32_t)TIMER0 + CH_OFFSET[ch]);         
00001e  0090              LSLS     r0,r2,#2
000020  4c07              LDR      r4,|L29.64|
000022  5820              LDR      r0,[r4,r0]
000024  4c07              LDR      r4,|L29.68|
000026  1901              ADDS     r1,r0,r4
;;;1387               tTMR->TEXCON.TEX_EDGE = edge;
000028  6948              LDR      r0,[r1,#0x14]
00002a  2406              MOVS     r4,#6
00002c  43a0              BICS     r0,r0,r4
00002e  005c              LSLS     r4,r3,#1
000030  2506              MOVS     r5,#6
000032  402c              ANDS     r4,r4,r5
000034  4320              ORRS     r0,r0,r4
000036  6148              STR      r0,[r1,#0x14]
;;;1388               return E_SUCCESS;
000038  2000              MOVS     r0,#0
                  |L29.58|
;;;1389           }
;;;1390   
;;;1391           default:
;;;1392           {
;;;1393               return E_DRVTIMER_CHANNEL ; 
;;;1394           }
;;;1395       }
;;;1396   }
00003a  bd30              POP      {r4,r5,pc}
                  |L29.60|
00003c  4802              LDR      r0,|L29.72|
00003e  e7fc              B        |L29.58|
;;;1397   
                          ENDP

                  |L29.64|
                          DCD      CH_OFFSET
                  |L29.68|
                          DCD      0x40010000
                  |L29.72|
                          DCD      0xffff9701

                          AREA ||i.DrvTIMER_SelectCounterDetectPhase||, CODE, READONLY, ALIGN=2

                  DrvTIMER_SelectCounterDetectPhase PROC
;;;1811   /*---------------------------------------------------------------------------------------------------------*/
;;;1812   int32_t DrvTIMER_SelectCounterDetectPhase(E_TIMER_CHANNEL ch, E_TIMER_TX_PHASE phase)
000000  b510              PUSH     {r4,lr}
;;;1813   {
000002  4602              MOV      r2,r0
000004  460b              MOV      r3,r1
;;;1814   	TIMER_T * tTMR;
;;;1815   
;;;1816      	switch (ch)
000006  2a00              CMP      r2,#0
000008  d006              BEQ      |L30.24|
00000a  2a01              CMP      r2,#1
00000c  d005              BEQ      |L30.26|
00000e  2a02              CMP      r2,#2
000010  d004              BEQ      |L30.28|
000012  2a03              CMP      r2,#3
000014  d111              BNE      |L30.58|
000016  e002              B        |L30.30|
                  |L30.24|
;;;1817       {
;;;1818           case E_TMR0:
;;;1819           case E_TMR1:
000018  bf00              NOP      
                  |L30.26|
;;;1820           case E_TMR2:
00001a  bf00              NOP      
                  |L30.28|
;;;1821   		case E_TMR3:
00001c  bf00              NOP      
                  |L30.30|
;;;1822           {
;;;1823           	tTMR = (TIMER_T *)((uint32_t)TIMER0 + CH_OFFSET[ch]);         
00001e  0090              LSLS     r0,r2,#2
000020  4c07              LDR      r4,|L30.64|
000022  5820              LDR      r0,[r4,r0]
000024  4c07              LDR      r4,|L30.68|
000026  1901              ADDS     r1,r0,r4
;;;1824               tTMR->TEXCON.TX_PHASE = phase;
000028  6948              LDR      r0,[r1,#0x14]
00002a  0840              LSRS     r0,r0,#1
00002c  0040              LSLS     r0,r0,#1
00002e  07dc              LSLS     r4,r3,#31
000030  0fe4              LSRS     r4,r4,#31
000032  4320              ORRS     r0,r0,r4
000034  6148              STR      r0,[r1,#0x14]
;;;1825               return E_SUCCESS;
000036  2000              MOVS     r0,#0
                  |L30.56|
;;;1826           }
;;;1827   
;;;1828           default:
;;;1829           {
;;;1830               return E_DRVTIMER_CHANNEL ; 
;;;1831           }
;;;1832       }
;;;1833   }
000038  bd10              POP      {r4,pc}
                  |L30.58|
00003a  4803              LDR      r0,|L30.72|
00003c  e7fc              B        |L30.56|
;;;1834   
                          ENDP

00003e  0000              DCW      0x0000
                  |L30.64|
                          DCD      CH_OFFSET
                  |L30.68|
                          DCD      0x40010000
                  |L30.72|
                          DCD      0xffff9701

                          AREA ||i.DrvTIMER_SelectExternalMode||, CODE, READONLY, ALIGN=2

                  DrvTIMER_SelectExternalMode PROC
;;;1333   /*---------------------------------------------------------------------------------------------------------*/
;;;1334   int32_t DrvTIMER_SelectExternalMode(E_TIMER_CHANNEL ch, E_TIMER_RSTCAP_MODE mode)
000000  b530              PUSH     {r4,r5,lr}
;;;1335   {
000002  4602              MOV      r2,r0
000004  460b              MOV      r3,r1
;;;1336   	TIMER_T * tTMR;
;;;1337   
;;;1338      	switch (ch)
000006  2a00              CMP      r2,#0
000008  d006              BEQ      |L31.24|
00000a  2a01              CMP      r2,#1
00000c  d005              BEQ      |L31.26|
00000e  2a02              CMP      r2,#2
000010  d004              BEQ      |L31.28|
000012  2a03              CMP      r2,#3
000014  d112              BNE      |L31.60|
000016  e002              B        |L31.30|
                  |L31.24|
;;;1339       {
;;;1340           case E_TMR0:
;;;1341           case E_TMR1:
000018  bf00              NOP      
                  |L31.26|
;;;1342           case E_TMR2:
00001a  bf00              NOP      
                  |L31.28|
;;;1343   		case E_TMR3:
00001c  bf00              NOP      
                  |L31.30|
;;;1344           {
;;;1345           	tTMR = (TIMER_T *)((uint32_t)TIMER0 + CH_OFFSET[ch]);         
00001e  0090              LSLS     r0,r2,#2
000020  4c07              LDR      r4,|L31.64|
000022  5820              LDR      r0,[r4,r0]
000024  4c07              LDR      r4,|L31.68|
000026  1901              ADDS     r1,r0,r4
;;;1346               tTMR->TEXCON.RSTCAPSEL = mode;
000028  6948              LDR      r0,[r1,#0x14]
00002a  2410              MOVS     r4,#0x10
00002c  43a0              BICS     r0,r0,r4
00002e  011c              LSLS     r4,r3,#4
000030  2510              MOVS     r5,#0x10
000032  402c              ANDS     r4,r4,r5
000034  4320              ORRS     r0,r0,r4
000036  6148              STR      r0,[r1,#0x14]
;;;1347               return E_SUCCESS;
000038  2000              MOVS     r0,#0
                  |L31.58|
;;;1348           }
;;;1349   
;;;1350           default:
;;;1351           {
;;;1352               return E_DRVTIMER_CHANNEL ; 
;;;1353           }
;;;1354       }
;;;1355   }
00003a  bd30              POP      {r4,r5,pc}
                  |L31.60|
00003c  4802              LDR      r0,|L31.72|
00003e  e7fc              B        |L31.58|
;;;1356   
                          ENDP

                  |L31.64|
                          DCD      CH_OFFSET
                  |L31.68|
                          DCD      0x40010000
                  |L31.72|
                          DCD      0xffff9701

                          AREA ||i.DrvTIMER_SetTimerEvent||, CODE, READONLY, ALIGN=2

                  DrvTIMER_SetTimerEvent PROC
;;;550    /*---------------------------------------------------------------------------------------------------------*/
;;;551    int32_t DrvTIMER_SetTimerEvent(E_TIMER_CHANNEL ch, uint32_t uInterruptTicks, TIMER_CALLBACK pTimerCallback, uint32_t parameter)
000000  b5ff              PUSH     {r0-r7,lr}
;;;552    {
000002  460c              MOV      r4,r1
000004  4615              MOV      r5,r2
;;;553        volatile int32_t i;
;;;554        int32_t uTimerEventNo = 0;
000006  2200              MOVS     r2,#0
;;;555    
;;;556        switch (ch)
000008  9800              LDR      r0,[sp,#0]
00000a  2800              CMP      r0,#0
00000c  d006              BEQ      |L32.28|
00000e  2801              CMP      r0,#1
000010  d038              BEQ      |L32.132|
000012  2802              CMP      r0,#2
000014  d069              BEQ      |L32.234|
000016  2803              CMP      r0,#3
000018  d177              BNE      |L32.266|
00001a  e09a              B        |L32.338|
                  |L32.28|
;;;557        {
;;;558            case E_TMR0:
;;;559            {
;;;560                if (uTime0EventCount >= TIMER_EVENT_COUNT)
00001c  4868              LDR      r0,|L32.448|
00001e  6800              LDR      r0,[r0,#0]  ; uTime0EventCount
000020  2800              CMP      r0,#0
000022  d002              BEQ      |L32.42|
;;;561                    return E_DRVTIMER_EVENT_FULL;
000024  4867              LDR      r0,|L32.452|
                  |L32.38|
;;;562    
;;;563                bIsSetTime0Event = TRUE;
;;;564                uTime0EventCount++;
;;;565                for (i=0; i<TIMER_EVENT_COUNT; i++)
;;;566                {
;;;567                    if (tTime0Event[i].active  == FALSE)
;;;568                    {
;;;569                        tTime0Event[i].active       = TRUE;
;;;570                        tTime0Event[i].initTick     = uInterruptTicks;
;;;571                        tTime0Event[i].curTick      = uInterruptTicks;
;;;572                        tTime0Event[i].funPtr       = (TIMER_CALLBACK)pTimerCallback;
;;;573                        tTime0Event[i].transParam   = parameter;
;;;574                        uTimerEventNo = i;
;;;575                        break;
;;;576                    }
;;;577                }
;;;578                break;
;;;579            }
;;;580    
;;;581            case E_TMR1:
;;;582            {
;;;583                if (uTime1EventCount >= TIMER_EVENT_COUNT)
;;;584                    return E_DRVTIMER_EVENT_FULL;
;;;585    
;;;586                bIsSetTime1Event = TRUE;
;;;587                uTime1EventCount++;
;;;588                for (i=0; i<TIMER_EVENT_COUNT; i++)
;;;589                {
;;;590                    if (tTime1Event[i].active   == FALSE)
;;;591                    {
;;;592                        tTime1Event[i].active       = TRUE;
;;;593                        tTime1Event[i].initTick     = uInterruptTicks;
;;;594                        tTime1Event[i].curTick      = uInterruptTicks;
;;;595                        tTime1Event[i].funPtr       = (TIMER_CALLBACK)pTimerCallback;
;;;596                        tTime1Event[i].transParam   = parameter;
;;;597                        uTimerEventNo = i;
;;;598                        break;
;;;599                    }
;;;600                }
;;;601                break;
;;;602            }
;;;603    
;;;604            case E_TMR2:
;;;605            {
;;;606                if (uTime2EventCount >= TIMER_EVENT_COUNT)
;;;607                    return E_DRVTIMER_EVENT_FULL;
;;;608    
;;;609                bIsSetTime2Event = TRUE;
;;;610                uTime2EventCount++;
;;;611                for (i=0; i<TIMER_EVENT_COUNT; i++)
;;;612                {
;;;613                    if (tTime2Event[i].active   == FALSE)
;;;614                    {
;;;615                        tTime2Event[i].active       = TRUE;
;;;616                        tTime2Event[i].initTick     = uInterruptTicks;
;;;617                        tTime2Event[i].curTick      = uInterruptTicks;
;;;618                        tTime2Event[i].funPtr       = (TIMER_CALLBACK)pTimerCallback;
;;;619                        tTime2Event[i].transParam   = parameter;
;;;620                        uTimerEventNo = i;
;;;621                        break;
;;;622                    }
;;;623                }
;;;624                break;
;;;625            }
;;;626    
;;;627            case E_TMR3:
;;;628            {
;;;629                if (uTime3EventCount >= TIMER_EVENT_COUNT)
;;;630                    return E_DRVTIMER_EVENT_FULL;
;;;631    
;;;632                bIsSetTime3Event = TRUE;
;;;633                uTime3EventCount++;
;;;634                for (i=0; i<TIMER_EVENT_COUNT; i++)
;;;635                {
;;;636                    if (tTime3Event[i].active   == FALSE)
;;;637                    {
;;;638                        tTime3Event[i].active       = TRUE;
;;;639                        tTime3Event[i].initTick     = uInterruptTicks;
;;;640                        tTime3Event[i].curTick      = uInterruptTicks;
;;;641                        tTime3Event[i].funPtr       = (TIMER_CALLBACK)pTimerCallback;
;;;642                        tTime3Event[i].transParam   = parameter;
;;;643                        uTimerEventNo = i;
;;;644                        break;
;;;645                    }
;;;646                }
;;;647                break;
;;;648            }
;;;649    
;;;650            default:
;;;651            {
;;;652                break;
;;;653            }
;;;654        }
;;;655    
;;;656        return uTimerEventNo;
;;;657    }
000026  b004              ADD      sp,sp,#0x10
000028  bdf0              POP      {r4-r7,pc}
                  |L32.42|
00002a  2001              MOVS     r0,#1                 ;563
00002c  4e66              LDR      r6,|L32.456|
00002e  6030              STR      r0,[r6,#0]            ;563  ; bIsSetTime0Event
000030  4863              LDR      r0,|L32.448|
000032  6800              LDR      r0,[r0,#0]            ;564  ; uTime0EventCount
000034  1c40              ADDS     r0,r0,#1              ;564
000036  4e62              LDR      r6,|L32.448|
000038  6030              STR      r0,[r6,#0]            ;564  ; uTime0EventCount
00003a  2100              MOVS     r1,#0                 ;565
00003c  e01e              B        |L32.124|
                  |L32.62|
00003e  2014              MOVS     r0,#0x14              ;567
000040  4348              MULS     r0,r1,r0              ;567
000042  4e62              LDR      r6,|L32.460|
000044  5830              LDR      r0,[r6,r0]            ;567
000046  2800              CMP      r0,#0                 ;567
000048  d117              BNE      |L32.122|
00004a  2601              MOVS     r6,#1                 ;569
00004c  2014              MOVS     r0,#0x14              ;569
00004e  4348              MULS     r0,r1,r0              ;569
000050  4f5e              LDR      r7,|L32.460|
000052  503e              STR      r6,[r7,r0]            ;569
000054  2014              MOVS     r0,#0x14              ;570
000056  4348              MULS     r0,r1,r0              ;570
000058  463e              MOV      r6,r7                 ;570
00005a  1980              ADDS     r0,r0,r6              ;570
00005c  6044              STR      r4,[r0,#4]            ;570
00005e  2014              MOVS     r0,#0x14              ;571
000060  4348              MULS     r0,r1,r0              ;571
000062  1980              ADDS     r0,r0,r6              ;571
000064  6084              STR      r4,[r0,#8]            ;571
000066  2014              MOVS     r0,#0x14              ;572
000068  4348              MULS     r0,r1,r0              ;572
00006a  1980              ADDS     r0,r0,r6              ;572
00006c  60c5              STR      r5,[r0,#0xc]          ;572
00006e  2014              MOVS     r0,#0x14              ;573
000070  4348              MULS     r0,r1,r0              ;573
000072  1980              ADDS     r0,r0,r6              ;573
000074  6103              STR      r3,[r0,#0x10]         ;573
000076  460a              MOV      r2,r1                 ;574
000078  e002              B        |L32.128|
                  |L32.122|
00007a  1c49              ADDS     r1,r1,#1              ;565
                  |L32.124|
00007c  2901              CMP      r1,#1                 ;565
00007e  dbde              BLT      |L32.62|
                  |L32.128|
000080  bf00              NOP                            ;575
000082  e09a              B        |L32.442|
                  |L32.132|
000084  4852              LDR      r0,|L32.464|
000086  6800              LDR      r0,[r0,#0]            ;583  ; uTime1EventCount
000088  2800              CMP      r0,#0                 ;583
00008a  d001              BEQ      |L32.144|
00008c  484d              LDR      r0,|L32.452|
00008e  e7ca              B        |L32.38|
                  |L32.144|
000090  2001              MOVS     r0,#1                 ;586
000092  4e50              LDR      r6,|L32.468|
000094  6030              STR      r0,[r6,#0]            ;586  ; bIsSetTime1Event
000096  484e              LDR      r0,|L32.464|
000098  6800              LDR      r0,[r0,#0]            ;587  ; uTime1EventCount
00009a  1c40              ADDS     r0,r0,#1              ;587
00009c  4e4c              LDR      r6,|L32.464|
00009e  6030              STR      r0,[r6,#0]            ;587  ; uTime1EventCount
0000a0  2100              MOVS     r1,#0                 ;588
0000a2  e01e              B        |L32.226|
                  |L32.164|
0000a4  2014              MOVS     r0,#0x14              ;590
0000a6  4348              MULS     r0,r1,r0              ;590
0000a8  4e4b              LDR      r6,|L32.472|
0000aa  5830              LDR      r0,[r6,r0]            ;590
0000ac  2800              CMP      r0,#0                 ;590
0000ae  d117              BNE      |L32.224|
0000b0  2601              MOVS     r6,#1                 ;592
0000b2  2014              MOVS     r0,#0x14              ;592
0000b4  4348              MULS     r0,r1,r0              ;592
0000b6  4f48              LDR      r7,|L32.472|
0000b8  503e              STR      r6,[r7,r0]            ;592
0000ba  2014              MOVS     r0,#0x14              ;593
0000bc  4348              MULS     r0,r1,r0              ;593
0000be  463e              MOV      r6,r7                 ;593
0000c0  1980              ADDS     r0,r0,r6              ;593
0000c2  6044              STR      r4,[r0,#4]            ;593
0000c4  2014              MOVS     r0,#0x14              ;594
0000c6  4348              MULS     r0,r1,r0              ;594
0000c8  1980              ADDS     r0,r0,r6              ;594
0000ca  6084              STR      r4,[r0,#8]            ;594
0000cc  2014              MOVS     r0,#0x14              ;595
0000ce  4348              MULS     r0,r1,r0              ;595
0000d0  1980              ADDS     r0,r0,r6              ;595
0000d2  60c5              STR      r5,[r0,#0xc]          ;595
0000d4  2014              MOVS     r0,#0x14              ;596
0000d6  4348              MULS     r0,r1,r0              ;596
0000d8  1980              ADDS     r0,r0,r6              ;596
0000da  6103              STR      r3,[r0,#0x10]         ;596
0000dc  460a              MOV      r2,r1                 ;597
0000de  e002              B        |L32.230|
                  |L32.224|
0000e0  1c49              ADDS     r1,r1,#1              ;588
                  |L32.226|
0000e2  2901              CMP      r1,#1                 ;588
0000e4  dbde              BLT      |L32.164|
                  |L32.230|
0000e6  bf00              NOP                            ;598
0000e8  e067              B        |L32.442|
                  |L32.234|
0000ea  483c              LDR      r0,|L32.476|
0000ec  6800              LDR      r0,[r0,#0]            ;606  ; uTime2EventCount
0000ee  2800              CMP      r0,#0                 ;606
0000f0  d001              BEQ      |L32.246|
0000f2  4834              LDR      r0,|L32.452|
0000f4  e797              B        |L32.38|
                  |L32.246|
0000f6  2001              MOVS     r0,#1                 ;609
0000f8  4e39              LDR      r6,|L32.480|
0000fa  6030              STR      r0,[r6,#0]            ;609  ; bIsSetTime2Event
0000fc  4837              LDR      r0,|L32.476|
0000fe  6800              LDR      r0,[r0,#0]            ;610  ; uTime2EventCount
000100  1c40              ADDS     r0,r0,#1              ;610
000102  4e36              LDR      r6,|L32.476|
000104  6030              STR      r0,[r6,#0]            ;610  ; uTime2EventCount
000106  2100              MOVS     r1,#0                 ;611
000108  e01f              B        |L32.330|
                  |L32.266|
00010a  e055              B        |L32.440|
                  |L32.268|
00010c  2014              MOVS     r0,#0x14              ;613
00010e  4348              MULS     r0,r1,r0              ;613
000110  4e34              LDR      r6,|L32.484|
000112  5830              LDR      r0,[r6,r0]            ;613
000114  2800              CMP      r0,#0                 ;613
000116  d117              BNE      |L32.328|
000118  2601              MOVS     r6,#1                 ;615
00011a  2014              MOVS     r0,#0x14              ;615
00011c  4348              MULS     r0,r1,r0              ;615
00011e  4f31              LDR      r7,|L32.484|
000120  503e              STR      r6,[r7,r0]            ;615
000122  2014              MOVS     r0,#0x14              ;616
000124  4348              MULS     r0,r1,r0              ;616
000126  463e              MOV      r6,r7                 ;616
000128  1980              ADDS     r0,r0,r6              ;616
00012a  6044              STR      r4,[r0,#4]            ;616
00012c  2014              MOVS     r0,#0x14              ;617
00012e  4348              MULS     r0,r1,r0              ;617
000130  1980              ADDS     r0,r0,r6              ;617
000132  6084              STR      r4,[r0,#8]            ;617
000134  2014              MOVS     r0,#0x14              ;618
000136  4348              MULS     r0,r1,r0              ;618
000138  1980              ADDS     r0,r0,r6              ;618
00013a  60c5              STR      r5,[r0,#0xc]          ;618
00013c  2014              MOVS     r0,#0x14              ;619
00013e  4348              MULS     r0,r1,r0              ;619
000140  1980              ADDS     r0,r0,r6              ;619
000142  6103              STR      r3,[r0,#0x10]         ;619
000144  460a              MOV      r2,r1                 ;620
000146  e002              B        |L32.334|
                  |L32.328|
000148  1c49              ADDS     r1,r1,#1              ;611
                  |L32.330|
00014a  2901              CMP      r1,#1                 ;611
00014c  dbde              BLT      |L32.268|
                  |L32.334|
00014e  bf00              NOP                            ;621
000150  e033              B        |L32.442|
                  |L32.338|
000152  4825              LDR      r0,|L32.488|
000154  6800              LDR      r0,[r0,#0]            ;629  ; uTime3EventCount
000156  2800              CMP      r0,#0                 ;629
000158  d001              BEQ      |L32.350|
00015a  481a              LDR      r0,|L32.452|
00015c  e763              B        |L32.38|
                  |L32.350|
00015e  2001              MOVS     r0,#1                 ;632
000160  4e22              LDR      r6,|L32.492|
000162  6030              STR      r0,[r6,#0]            ;632  ; bIsSetTime3Event
000164  4820              LDR      r0,|L32.488|
000166  6800              LDR      r0,[r0,#0]            ;633  ; uTime3EventCount
000168  1c40              ADDS     r0,r0,#1              ;633
00016a  4e1f              LDR      r6,|L32.488|
00016c  6030              STR      r0,[r6,#0]            ;633  ; uTime3EventCount
00016e  2100              MOVS     r1,#0                 ;634
000170  e01e              B        |L32.432|
                  |L32.370|
000172  2014              MOVS     r0,#0x14              ;636
000174  4348              MULS     r0,r1,r0              ;636
000176  4e1e              LDR      r6,|L32.496|
000178  5830              LDR      r0,[r6,r0]            ;636
00017a  2800              CMP      r0,#0                 ;636
00017c  d117              BNE      |L32.430|
00017e  2601              MOVS     r6,#1                 ;638
000180  2014              MOVS     r0,#0x14              ;638
000182  4348              MULS     r0,r1,r0              ;638
000184  4f1a              LDR      r7,|L32.496|
000186  503e              STR      r6,[r7,r0]            ;638
000188  2014              MOVS     r0,#0x14              ;639
00018a  4348              MULS     r0,r1,r0              ;639
00018c  463e              MOV      r6,r7                 ;639
00018e  1980              ADDS     r0,r0,r6              ;639
000190  6044              STR      r4,[r0,#4]            ;639
000192  2014              MOVS     r0,#0x14              ;640
000194  4348              MULS     r0,r1,r0              ;640
000196  1980              ADDS     r0,r0,r6              ;640
000198  6084              STR      r4,[r0,#8]            ;640
00019a  2014              MOVS     r0,#0x14              ;641
00019c  4348              MULS     r0,r1,r0              ;641
00019e  1980              ADDS     r0,r0,r6              ;641
0001a0  60c5              STR      r5,[r0,#0xc]          ;641
0001a2  2014              MOVS     r0,#0x14              ;642
0001a4  4348              MULS     r0,r1,r0              ;642
0001a6  1980              ADDS     r0,r0,r6              ;642
0001a8  6103              STR      r3,[r0,#0x10]         ;642
0001aa  460a              MOV      r2,r1                 ;643
0001ac  e002              B        |L32.436|
                  |L32.430|
0001ae  1c49              ADDS     r1,r1,#1              ;634
                  |L32.432|
0001b0  2901              CMP      r1,#1                 ;634
0001b2  dbde              BLT      |L32.370|
                  |L32.436|
0001b4  bf00              NOP                            ;644
0001b6  e000              B        |L32.442|
                  |L32.440|
0001b8  bf00              NOP                            ;652
                  |L32.442|
0001ba  bf00              NOP                            ;578
0001bc  4610              MOV      r0,r2                 ;656
0001be  e732              B        |L32.38|
;;;658    
                          ENDP

                  |L32.448|
                          DCD      uTime0EventCount
                  |L32.452|
                          DCD      0xffff9704
                  |L32.456|
                          DCD      bIsSetTime0Event
                  |L32.460|
                          DCD      tTime0Event
                  |L32.464|
                          DCD      uTime1EventCount
                  |L32.468|
                          DCD      bIsSetTime1Event
                  |L32.472|
                          DCD      tTime1Event
                  |L32.476|
                          DCD      uTime2EventCount
                  |L32.480|
                          DCD      bIsSetTime2Event
                  |L32.484|
                          DCD      tTime2Event
                  |L32.488|
                          DCD      uTime3EventCount
                  |L32.492|
                          DCD      bIsSetTime3Event
                  |L32.496|
                          DCD      tTime3Event

                          AREA ||i.DrvTIMER_Start||, CODE, READONLY, ALIGN=2

                  DrvTIMER_Start PROC
;;;865    /*---------------------------------------------------------------------------------------------------------*/
;;;866    int32_t DrvTIMER_Start(E_TIMER_CHANNEL ch)
000000  4601              MOV      r1,r0
;;;867    {
;;;868    	TIMER_T * tTMR;
;;;869    
;;;870       	switch (ch)
000002  2900              CMP      r1,#0
000004  d006              BEQ      |L33.20|
000006  2901              CMP      r1,#1
000008  d005              BEQ      |L33.22|
00000a  2902              CMP      r1,#2
00000c  d004              BEQ      |L33.24|
00000e  2903              CMP      r1,#3
000010  d10f              BNE      |L33.50|
000012  e002              B        |L33.26|
                  |L33.20|
;;;871        {
;;;872            case E_TMR0:
;;;873            case E_TMR1:
000014  bf00              NOP      
                  |L33.22|
;;;874            case E_TMR2:
000016  bf00              NOP      
                  |L33.24|
;;;875    		case E_TMR3:
000018  bf00              NOP      
                  |L33.26|
;;;876            {
;;;877            	tTMR = (TIMER_T *)((uint32_t)TIMER0 + CH_OFFSET[ch]);         
00001a  0088              LSLS     r0,r1,#2
00001c  4b06              LDR      r3,|L33.56|
00001e  5818              LDR      r0,[r3,r0]
000020  4b06              LDR      r3,|L33.60|
000022  18c2              ADDS     r2,r0,r3
;;;878                tTMR->TCSR.CEN = 1;
000024  6810              LDR      r0,[r2,#0]
000026  039b              LSLS     r3,r3,#14
000028  4398              BICS     r0,r0,r3
00002a  18c0              ADDS     r0,r0,r3
00002c  6010              STR      r0,[r2,#0]
;;;879                return E_SUCCESS ;
00002e  2000              MOVS     r0,#0
                  |L33.48|
;;;880            }
;;;881    
;;;882            default:
;;;883            {
;;;884                return E_DRVTIMER_CHANNEL ; 
;;;885            }
;;;886        }
;;;887    }
000030  4770              BX       lr
                  |L33.50|
000032  4803              LDR      r0,|L33.64|
000034  e7fc              B        |L33.48|
;;;888    
                          ENDP

000036  0000              DCW      0x0000
                  |L33.56|
                          DCD      CH_OFFSET
                  |L33.60|
                          DCD      0x40010000
                  |L33.64|
                          DCD      0xffff9701

                          AREA ||i.DrvTIMER_StartCounter||, CODE, READONLY, ALIGN=2

                  DrvTIMER_StartCounter PROC
;;;1172   /*---------------------------------------------------------------------------------------------------------*/
;;;1173   int32_t DrvTIMER_StartCounter(E_TIMER_CHANNEL ch)
000000  4602              MOV      r2,r0
;;;1174   {
;;;1175   	TIMER_T * tTMR;
;;;1176   
;;;1177      	switch (ch)
000002  2a00              CMP      r2,#0
000004  d006              BEQ      |L34.20|
000006  2a01              CMP      r2,#1
000008  d005              BEQ      |L34.22|
00000a  2a02              CMP      r2,#2
00000c  d004              BEQ      |L34.24|
00000e  2a03              CMP      r2,#3
000010  d11a              BNE      |L34.72|
000012  e002              B        |L34.26|
                  |L34.20|
;;;1178       {
;;;1179           case E_TMR0:
;;;1180           case E_TMR1:
000014  bf00              NOP      
                  |L34.22|
;;;1181           case E_TMR2:
000016  bf00              NOP      
                  |L34.24|
;;;1182   		case E_TMR3:
000018  bf00              NOP      
                  |L34.26|
;;;1183           {
;;;1184           	tTMR = (TIMER_T *)((uint32_t)TIMER0 + CH_OFFSET[ch]);   
00001a  0090              LSLS     r0,r2,#2
00001c  4b0b              LDR      r3,|L34.76|
00001e  5818              LDR      r0,[r3,r0]
000020  4b0b              LDR      r3,|L34.80|
000022  18c1              ADDS     r1,r0,r3
;;;1185               if (tTMR->TCSR.IE == 0)
000024  6808              LDR      r0,[r1,#0]
000026  0080              LSLS     r0,r0,#2
000028  0fc0              LSRS     r0,r0,#31
00002a  d100              BNE      |L34.46|
;;;1186   				tTMR->TCMPR = 0;	// If use Polling Mode, do not configure Timer Compare Register. 
00002c  6048              STR      r0,[r1,#4]
                  |L34.46|
;;;1187   			tTMR->TCSR.CRST 	= 1;					
00002e  6808              LDR      r0,[r1,#0]
000030  2301              MOVS     r3,#1
000032  069b              LSLS     r3,r3,#26
000034  4398              BICS     r0,r0,r3
000036  18c0              ADDS     r0,r0,r3
000038  6008              STR      r0,[r1,#0]
;;;1188   			tTMR->TCSR.CEN 	    = 1;					
00003a  6808              LDR      r0,[r1,#0]
00003c  011b              LSLS     r3,r3,#4
00003e  4398              BICS     r0,r0,r3
000040  18c0              ADDS     r0,r0,r3
000042  6008              STR      r0,[r1,#0]
;;;1189               return E_SUCCESS;
000044  2000              MOVS     r0,#0
                  |L34.70|
;;;1190           }
;;;1191   
;;;1192           default:
;;;1193           {
;;;1194               return E_DRVTIMER_CHANNEL ; 
;;;1195           }
;;;1196       }
;;;1197   }
000046  4770              BX       lr
                  |L34.72|
000048  4802              LDR      r0,|L34.84|
00004a  e7fc              B        |L34.70|
;;;1198   
                          ENDP

                  |L34.76|
                          DCD      CH_OFFSET
                  |L34.80|
                          DCD      0x40010000
                  |L34.84|
                          DCD      0xffff9701

                          AREA ||i.DrvWDT_Close||, CODE, READONLY, ALIGN=2

                  DrvWDT_Close PROC
;;;1924   /*---------------------------------------------------------------------------------------------------------*/
;;;1925   void DrvWDT_Close(void)
000000  b510              PUSH     {r4,lr}
;;;1926   {
;;;1927       DrvWDT_Ioctl(E_WDT_IOC_STOP_TIMER, 0);      /* Stop WDT */
000002  2100              MOVS     r1,#0
000004  2001              MOVS     r0,#1
000006  f7fffffe          BL       DrvWDT_Ioctl
;;;1928       DrvWDT_Ioctl(E_WDT_IOC_DISABLE_INT, 0);     /* Disable WDT Interrupt */
00000a  2100              MOVS     r1,#0
00000c  2003              MOVS     r0,#3
00000e  f7fffffe          BL       DrvWDT_Ioctl
;;;1929       DrvWDT_Ioctl(E_WDT_IOC_DISABLE_WAKEUP, 0);  /* Disable WDT wakeup fuction */              
000012  2100              MOVS     r1,#0
000014  2005              MOVS     r0,#5
000016  f7fffffe          BL       DrvWDT_Ioctl
;;;1930       
;;;1931       /* Add delay loop to make sure the internal WDT status is stable then disable WDT engine clock */ 
;;;1932       if (DrvSYS_GetHCLKFreq() != __IRC10K)
00001a  f7fffffe          BL       DrvSYS_GetHCLKFreq
00001e  4909              LDR      r1,|L35.68|
000020  4288              CMP      r0,r1
000022  d007              BEQ      |L35.52|
;;;1933       {        
;;;1934           volatile uint32_t i=0x2000;
000024  2001              MOVS     r0,#1
000026  0340              LSLS     r0,r0,#13
;;;1935           while (i--);
000028  bf00              NOP      
                  |L35.42|
00002a  4601              MOV      r1,r0
00002c  1e40              SUBS     r0,r0,#1
00002e  2900              CMP      r1,#0
000030  d1fb              BNE      |L35.42|
;;;1936       }
000032  bf00              NOP      
                  |L35.52|
;;;1937   
;;;1938       SYSCLK->APBCLK.WDT_EN = 0;
000034  4804              LDR      r0,|L35.72|
000036  6880              LDR      r0,[r0,#8]
000038  0840              LSRS     r0,r0,#1
00003a  0040              LSLS     r0,r0,#1
00003c  4902              LDR      r1,|L35.72|
00003e  6088              STR      r0,[r1,#8]
;;;1939   }
000040  bd10              POP      {r4,pc}
;;;1940   
                          ENDP

000042  0000              DCW      0x0000
                  |L35.68|
                          DCD      0x00002710
                  |L35.72|
                          DCD      0x50000200

                          AREA ||i.DrvWDT_InstallISR||, CODE, READONLY, ALIGN=2

                  DrvWDT_InstallISR PROC
;;;1953   /*---------------------------------------------------------------------------------------------------------*/
;;;1954   void DrvWDT_InstallISR(WDT_CALLBACK pvWDTISR)
000000  4904              LDR      r1,|L36.20|
;;;1955   {
;;;1956       WDT->WTCR.WTIE = 1;
000002  6809              LDR      r1,[r1,#0]
000004  2240              MOVS     r2,#0x40
000006  4391              BICS     r1,r1,r2
000008  3140              ADDS     r1,r1,#0x40
00000a  4a02              LDR      r2,|L36.20|
00000c  6011              STR      r1,[r2,#0]
;;;1957       fnCallBack_WDT = (WDT_CALLBACK)pvWDTISR;    
00000e  4902              LDR      r1,|L36.24|
000010  6008              STR      r0,[r1,#0]  ; fnCallBack_WDT
;;;1958   }
000012  4770              BX       lr
;;;1959   
                          ENDP

                  |L36.20|
                          DCD      0x40004000
                  |L36.24|
                          DCD      fnCallBack_WDT

                          AREA ||i.DrvWDT_Ioctl||, CODE, READONLY, ALIGN=2

                  DrvWDT_Ioctl PROC
;;;1988   /*---------------------------------------------------------------------------------------------------------*/
;;;1989   int32_t DrvWDT_Ioctl(E_WDT_CMD uWDTCmd, uint32_t uArgument)
000000  b570              PUSH     {r4-r6,lr}
;;;1990   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1991       switch (uWDTCmd)
000006  0023              MOVS     r3,r4
000008  f7fffffe          BL       __ARM_common_switch8
00000c  0a060e15          DCB      0x0a,0x06,0x0e,0x15
000010  242e363d          DCB      0x24,0x2e,0x36,0x3d
000014  454d5461          DCB      0x45,0x4d,0x54,0x61
;;;1992       {
;;;1993           case E_WDT_IOC_START_TIMER  :
;;;1994           {
;;;1995               WDT->WTCR.WTE = 1;
000018  482f              LDR      r0,|L37.216|
00001a  6800              LDR      r0,[r0,#0]
00001c  2180              MOVS     r1,#0x80
00001e  4388              BICS     r0,r0,r1
000020  3080              ADDS     r0,r0,#0x80
000022  492d              LDR      r1,|L37.216|
000024  6008              STR      r0,[r1,#0]
;;;1996               break ;
000026  e054              B        |L37.210|
;;;1997           }
;;;1998   
;;;1999           case E_WDT_IOC_STOP_TIMER :
;;;2000           {
;;;2001               WDT->WTCR.WTE = 0;
000028  482b              LDR      r0,|L37.216|
00002a  6800              LDR      r0,[r0,#0]
00002c  2180              MOVS     r1,#0x80
00002e  4388              BICS     r0,r0,r1
000030  4929              LDR      r1,|L37.216|
000032  6008              STR      r0,[r1,#0]
;;;2002               break ;
000034  e04d              B        |L37.210|
;;;2003           }
;;;2004   
;;;2005           case E_WDT_IOC_ENABLE_INT :
;;;2006           {
;;;2007               WDT->WTCR.WTIE = 1;
000036  4828              LDR      r0,|L37.216|
000038  6800              LDR      r0,[r0,#0]
00003a  2140              MOVS     r1,#0x40
00003c  4388              BICS     r0,r0,r1
00003e  3040              ADDS     r0,r0,#0x40
000040  4925              LDR      r1,|L37.216|
000042  6008              STR      r0,[r1,#0]
;;;2008               NVIC_SetPriority(WDT_IRQn, (1<<__NVIC_PRIO_BITS) - 2);
000044  2102              MOVS     r1,#2
000046  2001              MOVS     r0,#1
000048  f7fffffe          BL       NVIC_SetPriority
;;;2009               NVIC_EnableIRQ(WDT_IRQn); 
00004c  2001              MOVS     r0,#1
00004e  f7fffffe          BL       NVIC_EnableIRQ
;;;2010               break ;
000052  e03e              B        |L37.210|
;;;2011           }
;;;2012   
;;;2013           case E_WDT_IOC_DISABLE_INT :
;;;2014           {
;;;2015               WDT->WTCR.WTIE = 0;
000054  4820              LDR      r0,|L37.216|
000056  6800              LDR      r0,[r0,#0]
000058  2140              MOVS     r1,#0x40
00005a  4388              BICS     r0,r0,r1
00005c  491e              LDR      r1,|L37.216|
00005e  6008              STR      r0,[r1,#0]
;;;2016               NVIC_DisableIRQ(WDT_IRQn); 
000060  2001              MOVS     r0,#1
000062  f7fffffe          BL       NVIC_DisableIRQ
;;;2017               break ;
000066  e034              B        |L37.210|
;;;2018           }
;;;2019   
;;;2020           case E_WDT_IOC_ENABLE_WAKEUP :
;;;2021           {
;;;2022               WDT->WTCR.WTWKE = 1;            
000068  481b              LDR      r0,|L37.216|
00006a  6800              LDR      r0,[r0,#0]
00006c  2110              MOVS     r1,#0x10
00006e  4388              BICS     r0,r0,r1
000070  3010              ADDS     r0,r0,#0x10
000072  4919              LDR      r1,|L37.216|
000074  6008              STR      r0,[r1,#0]
;;;2023               break ;
000076  e02c              B        |L37.210|
;;;2024           }
;;;2025   
;;;2026           case E_WDT_IOC_DISABLE_WAKEUP :
;;;2027           {
;;;2028               WDT->WTCR.WTWKE = 0;            
000078  4817              LDR      r0,|L37.216|
00007a  6800              LDR      r0,[r0,#0]
00007c  2110              MOVS     r1,#0x10
00007e  4388              BICS     r0,r0,r1
000080  4915              LDR      r1,|L37.216|
000082  6008              STR      r0,[r1,#0]
;;;2029               break ;
000084  e025              B        |L37.210|
;;;2030           }
;;;2031   
;;;2032           case E_WDT_IOC_RESET_TIMER:
;;;2033           {
;;;2034               WDT->WTCR.WTR = 1;
000086  4814              LDR      r0,|L37.216|
000088  6800              LDR      r0,[r0,#0]
00008a  0840              LSRS     r0,r0,#1
00008c  0040              LSLS     r0,r0,#1
00008e  1c40              ADDS     r0,r0,#1
000090  4911              LDR      r1,|L37.216|
000092  6008              STR      r0,[r1,#0]
;;;2035               break ;
000094  e01d              B        |L37.210|
;;;2036           }
;;;2037   
;;;2038           case E_WDT_IOC_ENABLE_RESET_FUNC :
;;;2039           {
;;;2040               WDT->WTCR.WTRE = 1;
000096  4810              LDR      r0,|L37.216|
000098  6800              LDR      r0,[r0,#0]
00009a  2102              MOVS     r1,#2
00009c  4388              BICS     r0,r0,r1
00009e  1c80              ADDS     r0,r0,#2
0000a0  490d              LDR      r1,|L37.216|
0000a2  6008              STR      r0,[r1,#0]
;;;2041               break ;
0000a4  e015              B        |L37.210|
;;;2042           }
;;;2043   
;;;2044           case E_WDT_IOC_DISABLE_RESET_FUNC:
;;;2045           {
;;;2046               WDT->WTCR.WTRE = 0;
0000a6  480c              LDR      r0,|L37.216|
0000a8  6800              LDR      r0,[r0,#0]
0000aa  2102              MOVS     r1,#2
0000ac  4388              BICS     r0,r0,r1
0000ae  490a              LDR      r1,|L37.216|
0000b0  6008              STR      r0,[r1,#0]
;;;2047               break ;
0000b2  e00e              B        |L37.210|
;;;2048           }
;;;2049   
;;;2050           case E_WDT_IOC_SET_INTERVAL:
;;;2051           {
;;;2052               WDT->WTCR.WTIS = (E_WDT_INTERVAL)uArgument;
0000b4  4808              LDR      r0,|L37.216|
0000b6  6800              LDR      r0,[r0,#0]
0000b8  2107              MOVS     r1,#7
0000ba  0209              LSLS     r1,r1,#8
0000bc  4388              BICS     r0,r0,r1
0000be  0229              LSLS     r1,r5,#8
0000c0  2207              MOVS     r2,#7
0000c2  0212              LSLS     r2,r2,#8
0000c4  4011              ANDS     r1,r1,r2
0000c6  4308              ORRS     r0,r0,r1
0000c8  4903              LDR      r1,|L37.216|
0000ca  6008              STR      r0,[r1,#0]
;;;2053   
;;;2054               break ;
0000cc  e001              B        |L37.210|
;;;2055           }
;;;2056          
;;;2057           default :
;;;2058           {
;;;2059               return E_DRVWDT_CMD;
0000ce  4803              LDR      r0,|L37.220|
                  |L37.208|
;;;2060           }
;;;2061       }
;;;2062   
;;;2063       return E_SUCCESS;
;;;2064   }
0000d0  bd70              POP      {r4-r6,pc}
                  |L37.210|
0000d2  bf00              NOP                            ;1996
0000d4  2000              MOVS     r0,#0                 ;2063
0000d6  e7fb              B        |L37.208|
;;;2065   
                          ENDP

                  |L37.216|
                          DCD      0x40004000
                  |L37.220|
                          DCD      0xffff9705

                          AREA ||i.DrvWDT_Open||, CODE, READONLY, ALIGN=2

                  DrvWDT_Open PROC
;;;1895   /*---------------------------------------------------------------------------------------------------------*/
;;;1896   int32_t DrvWDT_Open(E_WDT_INTERVAL WDTlevel)
000000  b510              PUSH     {r4,lr}
;;;1897   {
000002  4604              MOV      r4,r0
;;;1898   	if ((SYS->REGWRPROT & 0x01) == 0)
000004  480f              LDR      r0,|L38.68|
000006  6800              LDR      r0,[r0,#0]
000008  07c0              LSLS     r0,r0,#31
00000a  0fc0              LSRS     r0,r0,#31
00000c  d101              BNE      |L38.18|
;;;1899       {
;;;1900           /* The protected Registers are locked */
;;;1901           return E_DRVWDT_OPEN;
00000e  480e              LDR      r0,|L38.72|
                  |L38.16|
;;;1902       }
;;;1903   
;;;1904       SYSCLK->APBCLK.WDT_EN = 1;              /* Enable WatchDog Timer Clock */   
;;;1905        
;;;1906       DrvWDT_Ioctl(E_WDT_IOC_STOP_TIMER, 0);  /* Stop WDT first */
;;;1907   
;;;1908       WDT->WTCR.WTIS = WDTlevel;              /* Select WatchDog Timer Interval */
;;;1909   
;;;1910       return E_SUCCESS;
;;;1911   }
000010  bd10              POP      {r4,pc}
                  |L38.18|
000012  480e              LDR      r0,|L38.76|
000014  6880              LDR      r0,[r0,#8]            ;1904
000016  0840              LSRS     r0,r0,#1              ;1904
000018  0040              LSLS     r0,r0,#1              ;1904
00001a  1c40              ADDS     r0,r0,#1              ;1904
00001c  490b              LDR      r1,|L38.76|
00001e  6088              STR      r0,[r1,#8]            ;1904
000020  2100              MOVS     r1,#0                 ;1906
000022  2001              MOVS     r0,#1                 ;1906
000024  f7fffffe          BL       DrvWDT_Ioctl
000028  4809              LDR      r0,|L38.80|
00002a  6800              LDR      r0,[r0,#0]            ;1908
00002c  2107              MOVS     r1,#7                 ;1908
00002e  0209              LSLS     r1,r1,#8              ;1908
000030  4388              BICS     r0,r0,r1              ;1908
000032  0221              LSLS     r1,r4,#8              ;1908
000034  2207              MOVS     r2,#7                 ;1908
000036  0212              LSLS     r2,r2,#8              ;1908
000038  4011              ANDS     r1,r1,r2              ;1908
00003a  4308              ORRS     r0,r0,r1              ;1908
00003c  4904              LDR      r1,|L38.80|
00003e  6008              STR      r0,[r1,#0]            ;1908
000040  2000              MOVS     r0,#0                 ;1910
000042  e7e5              B        |L38.16|
;;;1912   
                          ENDP

                  |L38.68|
                          DCD      0x50000100
                  |L38.72|
                          DCD      0xffff9706
                  |L38.76|
                          DCD      0x50000200
                  |L38.80|
                          DCD      0x40004000

                          AREA ||i.GetTimerClock||, CODE, READONLY, ALIGN=2

                  GetTimerClock PROC
;;;76     /*---------------------------------------------------------------------------------------------------------*/
;;;77     static uint32_t GetTimerClock(E_TIMER_CHANNEL ch)
000000  b570              PUSH     {r4-r6,lr}
;;;78     {
000002  4604              MOV      r4,r0
;;;79         volatile uint8_t u8ClockSrc;
;;;80         volatile uint32_t u32clk = 0;
000004  2600              MOVS     r6,#0
;;;81             
;;;82         if ((ch == E_TMR0) || (ch == E_TMR1) || (ch == E_TMR2) || (ch == E_TMR3))
000006  2c00              CMP      r4,#0
000008  d005              BEQ      |L39.22|
00000a  2c01              CMP      r4,#1
00000c  d003              BEQ      |L39.22|
00000e  2c02              CMP      r4,#2
000010  d001              BEQ      |L39.22|
000012  2c03              CMP      r4,#3
000014  d11c              BNE      |L39.80|
                  |L39.22|
;;;83         {
;;;84             u8ClockSrc = (inpw(&SYSCLK->CLKSEL1) >> (8+(ch*4))) & 0x7;
000016  4811              LDR      r0,|L39.92|
000018  6940              LDR      r0,[r0,#0x14]
00001a  00a1              LSLS     r1,r4,#2
00001c  3108              ADDS     r1,r1,#8
00001e  40c8              LSRS     r0,r0,r1
000020  0745              LSLS     r5,r0,#29
000022  0f6d              LSRS     r5,r5,#29
;;;85     
;;;86             if (u8ClockSrc == 0)           
000024  2d00              CMP      r5,#0
000026  d103              BNE      |L39.48|
;;;87             {
;;;88                 u32clk = DrvSYS_GetExtClockFreq() ;     /* Option 0: Get External Clock From DrvSYS Setting */
000028  f7fffffe          BL       DrvSYS_GetExtClockFreq
00002c  4606              MOV      r6,r0
00002e  e012              B        |L39.86|
                  |L39.48|
;;;89             }
;;;90             else if(u8ClockSrc == 1)
000030  2d01              CMP      r5,#1
000032  d101              BNE      |L39.56|
;;;91             {
;;;92                 u32clk = __RTC_XTAL;                    /* Option 1: 32K */
000034  03ee              LSLS     r6,r5,#15
000036  e00e              B        |L39.86|
                  |L39.56|
;;;93             }
;;;94             else if(u8ClockSrc == 2)
000038  2d02              CMP      r5,#2
00003a  d103              BNE      |L39.68|
;;;95             {
;;;96                 u32clk = DrvSYS_GetHCLKFreq();          /* Option 2: HCLK */
00003c  f7fffffe          BL       DrvSYS_GetHCLKFreq
000040  4606              MOV      r6,r0
000042  e008              B        |L39.86|
                  |L39.68|
;;;97             }
;;;98             else if(u8ClockSrc == 7)
000044  2d07              CMP      r5,#7
000046  d101              BNE      |L39.76|
;;;99             {
;;;100                u32clk = __IRC22M;                      /* Option 7: 22MHz*/
000048  4e05              LDR      r6,|L39.96|
00004a  e004              B        |L39.86|
                  |L39.76|
;;;101            }else
;;;102            {
;;;103                return E_DRVTIMER_CLOCK_RATE;
00004c  4805              LDR      r0,|L39.100|
                  |L39.78|
;;;104            }
;;;105        }
;;;106        else 
;;;107            return E_DRVTIMER_CHANNEL;
;;;108                
;;;109        return u32clk;
;;;110    }
00004e  bd70              POP      {r4-r6,pc}
                  |L39.80|
000050  4804              LDR      r0,|L39.100|
000052  1e40              SUBS     r0,r0,#1              ;107
000054  e7fb              B        |L39.78|
                  |L39.86|
000056  4630              MOV      r0,r6                 ;109
000058  e7f9              B        |L39.78|
;;;111    
                          ENDP

00005a  0000              DCW      0x0000
                  |L39.92|
                          DCD      0x50000200
                  |L39.96|
                          DCD      0x01518000
                  |L39.100|
                          DCD      0xffff9702

                          AREA ||i.NVIC_DisableIRQ||, CODE, READONLY, ALIGN=2

                  NVIC_DisableIRQ PROC
;;;809     */
;;;810    static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
000000  06c2              LSLS     r2,r0,#27
;;;811    {
;;;812      NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
000002  0ed2              LSRS     r2,r2,#27
000004  2101              MOVS     r1,#1
000006  4091              LSLS     r1,r1,r2
000008  4a01              LDR      r2,|L40.16|
00000a  6011              STR      r1,[r2,#0]
;;;813    }
00000c  4770              BX       lr
;;;814    
                          ENDP

00000e  0000              DCW      0x0000
                  |L40.16|
                          DCD      0xe000e180

                          AREA ||i.NVIC_EnableIRQ||, CODE, READONLY, ALIGN=2

                  NVIC_EnableIRQ PROC
;;;796     */
;;;797    static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
000000  06c2              LSLS     r2,r0,#27
;;;798    {
;;;799      NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
000002  0ed2              LSRS     r2,r2,#27
000004  2101              MOVS     r1,#1
000006  4091              LSLS     r1,r1,r2
000008  4a01              LDR      r2,|L41.16|
00000a  6011              STR      r1,[r2,#0]
;;;800    }
00000c  4770              BX       lr
;;;801    
                          ENDP

00000e  0000              DCW      0x0000
                  |L41.16|
                          DCD      0xe000e100

                          AREA ||i.NVIC_SetPriority||, CODE, READONLY, ALIGN=2

                  NVIC_SetPriority PROC
;;;866     */
;;;867    static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
000000  b510              PUSH     {r4,lr}
;;;868    {
;;;869      if(IRQn < 0) {
000002  2800              CMP      r0,#0
000004  da19              BGE      |L42.58|
;;;870        SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) | 
000006  4a1a              LDR      r2,|L42.112|
000008  0703              LSLS     r3,r0,#28
00000a  0f1b              LSRS     r3,r3,#28
00000c  3b08              SUBS     r3,r3,#8
00000e  089b              LSRS     r3,r3,#2
000010  009b              LSLS     r3,r3,#2
000012  58d2              LDR      r2,[r2,r3]
000014  0783              LSLS     r3,r0,#30
000016  0edc              LSRS     r4,r3,#27
000018  23ff              MOVS     r3,#0xff
00001a  40a3              LSLS     r3,r3,r4
00001c  439a              BICS     r2,r2,r3
00001e  078b              LSLS     r3,r1,#30
000020  0e1b              LSRS     r3,r3,#24
000022  0784              LSLS     r4,r0,#30
000024  0ee4              LSRS     r4,r4,#27
000026  40a3              LSLS     r3,r3,r4
000028  431a              ORRS     r2,r2,r3
00002a  4b11              LDR      r3,|L42.112|
00002c  0704              LSLS     r4,r0,#28
00002e  0f24              LSRS     r4,r4,#28
000030  3c08              SUBS     r4,r4,#8
000032  08a4              LSRS     r4,r4,#2
000034  00a4              LSLS     r4,r4,#2
000036  511a              STR      r2,[r3,r4]
000038  e018              B        |L42.108|
                  |L42.58|
;;;871            (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
;;;872      else {
;;;873        NVIC->IPR[_IP_IDX(IRQn)] = (NVIC->IPR[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
00003a  4a0e              LDR      r2,|L42.116|
00003c  2303              MOVS     r3,#3
00003e  021b              LSLS     r3,r3,#8
000040  18d2              ADDS     r2,r2,r3
000042  0883              LSRS     r3,r0,#2
000044  009b              LSLS     r3,r3,#2
000046  58d2              LDR      r2,[r2,r3]
000048  0783              LSLS     r3,r0,#30
00004a  0edc              LSRS     r4,r3,#27
00004c  23ff              MOVS     r3,#0xff
00004e  40a3              LSLS     r3,r3,r4
000050  439a              BICS     r2,r2,r3
000052  078b              LSLS     r3,r1,#30
000054  0e1b              LSRS     r3,r3,#24
000056  0784              LSLS     r4,r0,#30
000058  0ee4              LSRS     r4,r4,#27
00005a  40a3              LSLS     r3,r3,r4
00005c  431a              ORRS     r2,r2,r3
00005e  4b05              LDR      r3,|L42.116|
000060  2403              MOVS     r4,#3
000062  0224              LSLS     r4,r4,#8
000064  191b              ADDS     r3,r3,r4
000066  0884              LSRS     r4,r0,#2
000068  00a4              LSLS     r4,r4,#2
00006a  511a              STR      r2,[r3,r4]
                  |L42.108|
;;;874            (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
;;;875    }
00006c  bd10              POP      {r4,pc}
;;;876    
                          ENDP

00006e  0000              DCW      0x0000
                  |L42.112|
                          DCD      0xe000ed1c
                  |L42.116|
                          DCD      0xe000e100

                          AREA ||i.TMR0_IRQHandler||, CODE, READONLY, ALIGN=2

                  TMR0_IRQHandler PROC
;;;157    /*---------------------------------------------------------------------------------------------------------*/
;;;158    void TMR0_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;159    {   
;;;160        if ((TIMER0->TCSR.IE == 1) && (TIMER0->TISR.TIF == 1))
000002  4821              LDR      r0,|L43.136|
000004  6800              LDR      r0,[r0,#0]
000006  0080              LSLS     r0,r0,#2
000008  0fc0              LSRS     r0,r0,#31
00000a  d00b              BEQ      |L43.36|
00000c  481e              LDR      r0,|L43.136|
00000e  6880              LDR      r0,[r0,#8]
000010  07c0              LSLS     r0,r0,#31
000012  0fc0              LSRS     r0,r0,#31
000014  d006              BEQ      |L43.36|
;;;161            TIMER0->TISR.TIF = 1;
000016  481c              LDR      r0,|L43.136|
000018  6880              LDR      r0,[r0,#8]
00001a  0840              LSRS     r0,r0,#1
00001c  0040              LSLS     r0,r0,#1
00001e  1c40              ADDS     r0,r0,#1
000020  4919              LDR      r1,|L43.136|
000022  6088              STR      r0,[r1,#8]
                  |L43.36|
;;;162    
;;;163        if ((TIMER0->TEXCON.TEXEN == 1) && (TIMER0->TEXCON.TEXIEN == 1) && (TIMER0->TEXISR.TEXIF == 1))
000024  4818              LDR      r0,|L43.136|
000026  6940              LDR      r0,[r0,#0x14]
000028  0700              LSLS     r0,r0,#28
00002a  0fc0              LSRS     r0,r0,#31
00002c  d010              BEQ      |L43.80|
00002e  4816              LDR      r0,|L43.136|
000030  6940              LDR      r0,[r0,#0x14]
000032  0680              LSLS     r0,r0,#26
000034  0fc0              LSRS     r0,r0,#31
000036  d00b              BEQ      |L43.80|
000038  4813              LDR      r0,|L43.136|
00003a  6980              LDR      r0,[r0,#0x18]
00003c  07c0              LSLS     r0,r0,#31
00003e  0fc0              LSRS     r0,r0,#31
000040  d006              BEQ      |L43.80|
;;;164            TIMER0->TEXISR.TEXIF = 1;
000042  4811              LDR      r0,|L43.136|
000044  6980              LDR      r0,[r0,#0x18]
000046  0840              LSRS     r0,r0,#1
000048  0040              LSLS     r0,r0,#1
00004a  1c40              ADDS     r0,r0,#1
00004c  490e              LDR      r1,|L43.136|
00004e  6188              STR      r0,[r1,#0x18]
                  |L43.80|
;;;165    
;;;166        uTimer0Tick++;
000050  480e              LDR      r0,|L43.140|
000052  6800              LDR      r0,[r0,#0]  ; uTimer0Tick
000054  1c40              ADDS     r0,r0,#1
000056  490d              LDR      r1,|L43.140|
000058  6008              STR      r0,[r1,#0]  ; uTimer0Tick
;;;167    
;;;168        if (tTime0Event[0].active)
00005a  480d              LDR      r0,|L43.144|
00005c  6800              LDR      r0,[r0,#0]  ; tTime0Event
00005e  2800              CMP      r0,#0
000060  d010              BEQ      |L43.132|
;;;169        {
;;;170            tTime0Event[0].curTick--;
000062  480b              LDR      r0,|L43.144|
000064  6880              LDR      r0,[r0,#8]  ; tTime0Event
000066  1e40              SUBS     r0,r0,#1
000068  4909              LDR      r1,|L43.144|
00006a  6088              STR      r0,[r1,#8]  ; tTime0Event
;;;171            if (tTime0Event[0].curTick == 0)
00006c  4608              MOV      r0,r1
00006e  6880              LDR      r0,[r0,#8]  ; tTime0Event
000070  2800              CMP      r0,#0
000072  d107              BNE      |L43.132|
;;;172            {
;;;173                (*tTime0Event[0].funPtr)(tTime0Event[0].transParam);
000074  460a              MOV      r2,r1
000076  6910              LDR      r0,[r2,#0x10]  ; tTime0Event
000078  68d1              LDR      r1,[r2,#0xc]  ; tTime0Event
00007a  4788              BLX      r1
;;;174                tTime0Event[0].curTick = tTime0Event[0].initTick;
00007c  4804              LDR      r0,|L43.144|
00007e  6840              LDR      r0,[r0,#4]  ; tTime0Event
000080  4903              LDR      r1,|L43.144|
000082  6088              STR      r0,[r1,#8]  ; tTime0Event
                  |L43.132|
;;;175            }
;;;176        }
;;;177    }
000084  bd10              POP      {r4,pc}
;;;178    
                          ENDP

000086  0000              DCW      0x0000
                  |L43.136|
                          DCD      0x40010000
                  |L43.140|
                          DCD      uTimer0Tick
                  |L43.144|
                          DCD      tTime0Event

                          AREA ||i.TMR1_IRQHandler||, CODE, READONLY, ALIGN=2

                  TMR1_IRQHandler PROC
;;;188    /*---------------------------------------------------------------------------------------------------------*/
;;;189    void TMR1_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;190    {    
;;;191        if ((TIMER1->TCSR.IE == 1) && (TIMER1->TISR.TIF == 1))
000002  4821              LDR      r0,|L44.136|
000004  6a00              LDR      r0,[r0,#0x20]
000006  0080              LSLS     r0,r0,#2
000008  0fc0              LSRS     r0,r0,#31
00000a  d00b              BEQ      |L44.36|
00000c  481e              LDR      r0,|L44.136|
00000e  6a80              LDR      r0,[r0,#0x28]
000010  07c0              LSLS     r0,r0,#31
000012  0fc0              LSRS     r0,r0,#31
000014  d006              BEQ      |L44.36|
;;;192            TIMER1->TISR.TIF = 1;
000016  481c              LDR      r0,|L44.136|
000018  6a80              LDR      r0,[r0,#0x28]
00001a  0840              LSRS     r0,r0,#1
00001c  0040              LSLS     r0,r0,#1
00001e  1c40              ADDS     r0,r0,#1
000020  4919              LDR      r1,|L44.136|
000022  6288              STR      r0,[r1,#0x28]
                  |L44.36|
;;;193    
;;;194        if ((TIMER1->TEXCON.TEXEN == 1) && (TIMER1->TEXCON.TEXIEN == 1) && (TIMER1->TEXISR.TEXIF == 1))
000024  4818              LDR      r0,|L44.136|
000026  6b40              LDR      r0,[r0,#0x34]
000028  0700              LSLS     r0,r0,#28
00002a  0fc0              LSRS     r0,r0,#31
00002c  d010              BEQ      |L44.80|
00002e  4816              LDR      r0,|L44.136|
000030  6b40              LDR      r0,[r0,#0x34]
000032  0680              LSLS     r0,r0,#26
000034  0fc0              LSRS     r0,r0,#31
000036  d00b              BEQ      |L44.80|
000038  4813              LDR      r0,|L44.136|
00003a  6b80              LDR      r0,[r0,#0x38]
00003c  07c0              LSLS     r0,r0,#31
00003e  0fc0              LSRS     r0,r0,#31
000040  d006              BEQ      |L44.80|
;;;195            TIMER1->TEXISR.TEXIF = 1;
000042  4811              LDR      r0,|L44.136|
000044  6b80              LDR      r0,[r0,#0x38]
000046  0840              LSRS     r0,r0,#1
000048  0040              LSLS     r0,r0,#1
00004a  1c40              ADDS     r0,r0,#1
00004c  490e              LDR      r1,|L44.136|
00004e  6388              STR      r0,[r1,#0x38]
                  |L44.80|
;;;196    
;;;197        uTimer1Tick++;
000050  480e              LDR      r0,|L44.140|
000052  6800              LDR      r0,[r0,#0]  ; uTimer1Tick
000054  1c40              ADDS     r0,r0,#1
000056  490d              LDR      r1,|L44.140|
000058  6008              STR      r0,[r1,#0]  ; uTimer1Tick
;;;198    
;;;199        if (tTime1Event[0].active)
00005a  480d              LDR      r0,|L44.144|
00005c  6800              LDR      r0,[r0,#0]  ; tTime1Event
00005e  2800              CMP      r0,#0
000060  d010              BEQ      |L44.132|
;;;200        {
;;;201            tTime1Event[0].curTick--;
000062  480b              LDR      r0,|L44.144|
000064  6880              LDR      r0,[r0,#8]  ; tTime1Event
000066  1e40              SUBS     r0,r0,#1
000068  4909              LDR      r1,|L44.144|
00006a  6088              STR      r0,[r1,#8]  ; tTime1Event
;;;202            if (tTime1Event[0].curTick == 0)
00006c  4608              MOV      r0,r1
00006e  6880              LDR      r0,[r0,#8]  ; tTime1Event
000070  2800              CMP      r0,#0
000072  d107              BNE      |L44.132|
;;;203            {
;;;204                (*tTime1Event[0].funPtr)(tTime1Event[0].transParam);
000074  460a              MOV      r2,r1
000076  6910              LDR      r0,[r2,#0x10]  ; tTime1Event
000078  68d1              LDR      r1,[r2,#0xc]  ; tTime1Event
00007a  4788              BLX      r1
;;;205                tTime1Event[0].curTick = tTime1Event[0].initTick;
00007c  4804              LDR      r0,|L44.144|
00007e  6840              LDR      r0,[r0,#4]  ; tTime1Event
000080  4903              LDR      r1,|L44.144|
000082  6088              STR      r0,[r1,#8]  ; tTime1Event
                  |L44.132|
;;;206            }
;;;207        }
;;;208    }
000084  bd10              POP      {r4,pc}
;;;209    
                          ENDP

000086  0000              DCW      0x0000
                  |L44.136|
                          DCD      0x40010000
                  |L44.140|
                          DCD      uTimer1Tick
                  |L44.144|
                          DCD      tTime1Event

                          AREA ||i.TMR2_IRQHandler||, CODE, READONLY, ALIGN=2

                  TMR2_IRQHandler PROC
;;;219    /*---------------------------------------------------------------------------------------------------------*/
;;;220    void TMR2_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;221    {    
;;;222        if ((TIMER2->TCSR.IE == 1) && (TIMER2->TISR.TIF == 1))
000002  4821              LDR      r0,|L45.136|
000004  6800              LDR      r0,[r0,#0]
000006  0080              LSLS     r0,r0,#2
000008  0fc0              LSRS     r0,r0,#31
00000a  d00b              BEQ      |L45.36|
00000c  481e              LDR      r0,|L45.136|
00000e  6880              LDR      r0,[r0,#8]
000010  07c0              LSLS     r0,r0,#31
000012  0fc0              LSRS     r0,r0,#31
000014  d006              BEQ      |L45.36|
;;;223            TIMER2->TISR.TIF = 1;
000016  481c              LDR      r0,|L45.136|
000018  6880              LDR      r0,[r0,#8]
00001a  0840              LSRS     r0,r0,#1
00001c  0040              LSLS     r0,r0,#1
00001e  1c40              ADDS     r0,r0,#1
000020  4919              LDR      r1,|L45.136|
000022  6088              STR      r0,[r1,#8]
                  |L45.36|
;;;224    
;;;225        if ((TIMER2->TEXCON.TEXEN == 1) && (TIMER2->TEXCON.TEXIEN == 1) && (TIMER2->TEXISR.TEXIF == 1))
000024  4818              LDR      r0,|L45.136|
000026  6940              LDR      r0,[r0,#0x14]
000028  0700              LSLS     r0,r0,#28
00002a  0fc0              LSRS     r0,r0,#31
00002c  d010              BEQ      |L45.80|
00002e  4816              LDR      r0,|L45.136|
000030  6940              LDR      r0,[r0,#0x14]
000032  0680              LSLS     r0,r0,#26
000034  0fc0              LSRS     r0,r0,#31
000036  d00b              BEQ      |L45.80|
000038  4813              LDR      r0,|L45.136|
00003a  6980              LDR      r0,[r0,#0x18]
00003c  07c0              LSLS     r0,r0,#31
00003e  0fc0              LSRS     r0,r0,#31
000040  d006              BEQ      |L45.80|
;;;226            TIMER2->TEXISR.TEXIF = 1;
000042  4811              LDR      r0,|L45.136|
000044  6980              LDR      r0,[r0,#0x18]
000046  0840              LSRS     r0,r0,#1
000048  0040              LSLS     r0,r0,#1
00004a  1c40              ADDS     r0,r0,#1
00004c  490e              LDR      r1,|L45.136|
00004e  6188              STR      r0,[r1,#0x18]
                  |L45.80|
;;;227    
;;;228        uTimer2Tick++;
000050  480e              LDR      r0,|L45.140|
000052  6800              LDR      r0,[r0,#0]  ; uTimer2Tick
000054  1c40              ADDS     r0,r0,#1
000056  490d              LDR      r1,|L45.140|
000058  6008              STR      r0,[r1,#0]  ; uTimer2Tick
;;;229    
;;;230        if (tTime2Event[0].active)
00005a  480d              LDR      r0,|L45.144|
00005c  6800              LDR      r0,[r0,#0]  ; tTime2Event
00005e  2800              CMP      r0,#0
000060  d010              BEQ      |L45.132|
;;;231        {
;;;232            tTime2Event[0].curTick--;
000062  480b              LDR      r0,|L45.144|
000064  6880              LDR      r0,[r0,#8]  ; tTime2Event
000066  1e40              SUBS     r0,r0,#1
000068  4909              LDR      r1,|L45.144|
00006a  6088              STR      r0,[r1,#8]  ; tTime2Event
;;;233            if (tTime2Event[0].curTick == 0)
00006c  4608              MOV      r0,r1
00006e  6880              LDR      r0,[r0,#8]  ; tTime2Event
000070  2800              CMP      r0,#0
000072  d107              BNE      |L45.132|
;;;234            {
;;;235                (*tTime2Event[0].funPtr)(tTime2Event[0].transParam);
000074  460a              MOV      r2,r1
000076  6910              LDR      r0,[r2,#0x10]  ; tTime2Event
000078  68d1              LDR      r1,[r2,#0xc]  ; tTime2Event
00007a  4788              BLX      r1
;;;236                tTime2Event[0].curTick = tTime2Event[0].initTick;
00007c  4804              LDR      r0,|L45.144|
00007e  6840              LDR      r0,[r0,#4]  ; tTime2Event
000080  4903              LDR      r1,|L45.144|
000082  6088              STR      r0,[r1,#8]  ; tTime2Event
                  |L45.132|
;;;237            }
;;;238        }
;;;239    }
000084  bd10              POP      {r4,pc}
;;;240    
                          ENDP

000086  0000              DCW      0x0000
                  |L45.136|
                          DCD      0x40110000
                  |L45.140|
                          DCD      uTimer2Tick
                  |L45.144|
                          DCD      tTime2Event

                          AREA ||i.TMR3_IRQHandler||, CODE, READONLY, ALIGN=2

                  TMR3_IRQHandler PROC
;;;250    /*---------------------------------------------------------------------------------------------------------*/
;;;251    void TMR3_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;252    {
;;;253        if ((TIMER3->TCSR.IE == 1) && (TIMER3->TISR.TIF == 1))
000002  4821              LDR      r0,|L46.136|
000004  6a00              LDR      r0,[r0,#0x20]
000006  0080              LSLS     r0,r0,#2
000008  0fc0              LSRS     r0,r0,#31
00000a  d00b              BEQ      |L46.36|
00000c  481e              LDR      r0,|L46.136|
00000e  6a80              LDR      r0,[r0,#0x28]
000010  07c0              LSLS     r0,r0,#31
000012  0fc0              LSRS     r0,r0,#31
000014  d006              BEQ      |L46.36|
;;;254            TIMER3->TISR.TIF = 1;
000016  481c              LDR      r0,|L46.136|
000018  6a80              LDR      r0,[r0,#0x28]
00001a  0840              LSRS     r0,r0,#1
00001c  0040              LSLS     r0,r0,#1
00001e  1c40              ADDS     r0,r0,#1
000020  4919              LDR      r1,|L46.136|
000022  6288              STR      r0,[r1,#0x28]
                  |L46.36|
;;;255    
;;;256        if ((TIMER3->TEXCON.TEXEN == 1) && (TIMER3->TEXCON.TEXIEN == 1) && (TIMER3->TEXISR.TEXIF == 1))
000024  4818              LDR      r0,|L46.136|
000026  6b40              LDR      r0,[r0,#0x34]
000028  0700              LSLS     r0,r0,#28
00002a  0fc0              LSRS     r0,r0,#31
00002c  d010              BEQ      |L46.80|
00002e  4816              LDR      r0,|L46.136|
000030  6b40              LDR      r0,[r0,#0x34]
000032  0680              LSLS     r0,r0,#26
000034  0fc0              LSRS     r0,r0,#31
000036  d00b              BEQ      |L46.80|
000038  4813              LDR      r0,|L46.136|
00003a  6b80              LDR      r0,[r0,#0x38]
00003c  07c0              LSLS     r0,r0,#31
00003e  0fc0              LSRS     r0,r0,#31
000040  d006              BEQ      |L46.80|
;;;257            TIMER3->TEXISR.TEXIF = 1;
000042  4811              LDR      r0,|L46.136|
000044  6b80              LDR      r0,[r0,#0x38]
000046  0840              LSRS     r0,r0,#1
000048  0040              LSLS     r0,r0,#1
00004a  1c40              ADDS     r0,r0,#1
00004c  490e              LDR      r1,|L46.136|
00004e  6388              STR      r0,[r1,#0x38]
                  |L46.80|
;;;258    
;;;259        uTimer3Tick++;
000050  480e              LDR      r0,|L46.140|
000052  6800              LDR      r0,[r0,#0]  ; uTimer3Tick
000054  1c40              ADDS     r0,r0,#1
000056  490d              LDR      r1,|L46.140|
000058  6008              STR      r0,[r1,#0]  ; uTimer3Tick
;;;260    
;;;261        if (tTime3Event[0].active)
00005a  480d              LDR      r0,|L46.144|
00005c  6800              LDR      r0,[r0,#0]  ; tTime3Event
00005e  2800              CMP      r0,#0
000060  d010              BEQ      |L46.132|
;;;262        {
;;;263            tTime3Event[0].curTick--;
000062  480b              LDR      r0,|L46.144|
000064  6880              LDR      r0,[r0,#8]  ; tTime3Event
000066  1e40              SUBS     r0,r0,#1
000068  4909              LDR      r1,|L46.144|
00006a  6088              STR      r0,[r1,#8]  ; tTime3Event
;;;264            if (tTime3Event[0].curTick == 0)
00006c  4608              MOV      r0,r1
00006e  6880              LDR      r0,[r0,#8]  ; tTime3Event
000070  2800              CMP      r0,#0
000072  d107              BNE      |L46.132|
;;;265            {
;;;266                (*tTime3Event[0].funPtr)(tTime3Event[0].transParam);
000074  460a              MOV      r2,r1
000076  6910              LDR      r0,[r2,#0x10]  ; tTime3Event
000078  68d1              LDR      r1,[r2,#0xc]  ; tTime3Event
00007a  4788              BLX      r1
;;;267                tTime3Event[0].curTick = tTime3Event[0].initTick;
00007c  4804              LDR      r0,|L46.144|
00007e  6840              LDR      r0,[r0,#4]  ; tTime3Event
000080  4903              LDR      r1,|L46.144|
000082  6088              STR      r0,[r1,#8]  ; tTime3Event
                  |L46.132|
;;;268            }
;;;269        }
;;;270    }
000084  bd10              POP      {r4,pc}
;;;271    
                          ENDP

000086  0000              DCW      0x0000
                  |L46.136|
                          DCD      0x40110000
                  |L46.140|
                          DCD      uTimer3Tick
                  |L46.144|
                          DCD      tTime3Event

                          AREA ||i.WDT_IRQHandler||, CODE, READONLY, ALIGN=2

                  WDT_IRQHandler PROC
;;;1866   /*---------------------------------------------------------------------------------------------------------*/
;;;1867   void WDT_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;1868   {
;;;1869       volatile uint32_t uWakeupFlag;
;;;1870   
;;;1871       uWakeupFlag = WDT->WTCR.WTWKF;  /* Stored WDT wakeup flag */
000002  480a              LDR      r0,|L47.44|
000004  6800              LDR      r0,[r0,#0]
000006  0680              LSLS     r0,r0,#26
000008  0fc4              LSRS     r4,r0,#31
;;;1872   
;;;1873       WDT->WTCR.WTIF = 1;             /* Clear the WDT INT Flag */
00000a  4808              LDR      r0,|L47.44|
00000c  6800              LDR      r0,[r0,#0]
00000e  2108              MOVS     r1,#8
000010  4388              BICS     r0,r0,r1
000012  3008              ADDS     r0,r0,#8
000014  4905              LDR      r1,|L47.44|
000016  6008              STR      r0,[r1,#0]
;;;1874   
;;;1875       if (fnCallBack_WDT)        
000018  4805              LDR      r0,|L47.48|
00001a  6800              LDR      r0,[r0,#0]  ; fnCallBack_WDT
00001c  2800              CMP      r0,#0
00001e  d003              BEQ      |L47.40|
;;;1876       {
;;;1877           fnCallBack_WDT(uWakeupFlag);
000020  4620              MOV      r0,r4
000022  4903              LDR      r1,|L47.48|
000024  6809              LDR      r1,[r1,#0]  ; fnCallBack_WDT
000026  4788              BLX      r1
                  |L47.40|
;;;1878       }
;;;1879   }
000028  bd10              POP      {r4,pc}
;;;1880   
                          ENDP

00002a  0000              DCW      0x0000
                  |L47.44|
                          DCD      0x40004000
                  |L47.48|
                          DCD      fnCallBack_WDT

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  tTime0Event
                          %        20
                  tTime1Event
                          %        20
                  tTime2Event
                          %        20
                  tTime3Event
                          %        20

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  CH_OFFSET
                          DCD      0x00000000
                          DCD      0x00000020
                          DCD      0x00100000
                          DCD      0x00100020

                          AREA ||.data||, DATA, ALIGN=2

                  bIsTimer0Initial
                          DCD      0x00000000
                  bIsTimer1Initial
                          DCD      0x00000000
                  bIsTimer2Initial
                          DCD      0x00000000
                  bIsTimer3Initial
                          DCD      0x00000000
                  bIsTimer0Used
                          DCD      0x00000000
                  bIsTimer1Used
                          DCD      0x00000000
                  bIsTimer2Used
                          DCD      0x00000000
                  bIsTimer3Used
                          DCD      0x00000000
                  bIsSetTime0Event
                          DCD      0x00000000
                  bIsSetTime1Event
                          DCD      0x00000000
                  bIsSetTime2Event
                          DCD      0x00000000
                  bIsSetTime3Event
                          DCD      0x00000000
                  uTimer0Tick
                          DCD      0x00000000
                  uTimer1Tick
                          DCD      0x00000000
                  uTimer2Tick
                          DCD      0x00000000
                  uTimer3Tick
                          DCD      0x00000000
                  uTime0EventCount
                          DCD      0x00000000
                  uTime1EventCount
                          DCD      0x00000000
                  uTime2EventCount
                          DCD      0x00000000
                  uTime3EventCount
                          DCD      0x00000000
                  u32EXTClockFreq
                          DCD      0x00b71b00
                  _sys_uTimer0TickPerSecond
                          DCD      0x00000000
                  _sys_uTimer1TickPerSecond
                          DCD      0x00000000
                  _sys_uTimer2TickPerSecond
                          DCD      0x00000000
                  _sys_uTimer3TickPerSecond
                          DCD      0x00000000
                  fnCallBack_WDT
                          DCD      0x00000000

                          AREA ||i.__ARM_common_switch8||, COMGROUP=__ARM_common_switch8, CODE, READONLY, ALIGN=1

                  __ARM_common_switch8 PROC
000000  b430              PUSH     {r4,r5}
000002  4674              MOV      r4,lr
000004  1e64              SUBS     r4,r4,#1
000006  7825              LDRB     r5,[r4,#0]
000008  1c64              ADDS     r4,r4,#1
00000a  42ab              CMP      r3,r5
00000c  d304              BCC      |L289.24|
                  |L289.14|
00000e  5d63              LDRB     r3,[r4,r5]
000010  005b              LSLS     r3,r3,#1
000012  18e3              ADDS     r3,r4,r3
000014  bc30              POP      {r4,r5}
000016  4718              BX       r3
                  |L289.24|
000018  461d              MOV      r5,r3
00001a  e7f8              B        |L289.14|
                          ENDP

